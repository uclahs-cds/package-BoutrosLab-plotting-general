[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Boutros. Author, maintainer. Christine P'ng. Contributor. Jeff Green. Contributor. Stephenie Prokopec. Contributor. Ontario Institute Cancer Research. Copyright holder. R Core Team. Copyright holder. R Foundation. Copyright holder. Robert Gentleman. Contributor. Ross Ihaka. Contributor. Caden Bugh. Contributor. Dan Knight. Contributor. Stefan Eng. Contributor. Mohammed Faizal Eeman Mootor. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Paul Boutros (2023). BoutrosLab.plotting.general: Functions Create Publication-Quality Plots. R package version 7.0.5, https://github.com/uclahs-cds/public-R-BoutrosLab-plotting-general.","code":"@Manual{,   title = {BoutrosLab.plotting.general: Functions to Create Publication-Quality Plots},   author = {{Paul Boutros}},   year = {2023},   note = {R package version 7.0.5},   url = {https://github.com/uclahs-cds/public-R-BoutrosLab-plotting-general}, }"},{"path":"/reference/BoutrosLab.plotting.general-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Boutros Lab general plotting functions — BoutrosLab.plotting.general-package","title":"Boutros Lab general plotting functions — BoutrosLab.plotting.general-package","text":"Functions creating publication-quality plots","code":""},{"path":"/reference/BoutrosLab.plotting.general-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boutros Lab general plotting functions — BoutrosLab.plotting.general-package","text":"append.footnote(); colour.gradient(); covariates.grob(); create.colourkey(); create.barplot(); create.boxplot(); create.dendrogram(); create.densityplot(); create.dotmap(); create.heatmap(); create.hexbinplot(); create.histogram(); create.manhattanplot(); create.multiplot(); create.polygonplot(); create.qqplot.comparison(); create.qqplot.fit(); create.scatterplot(); create.segplot(); create.stripplot(); create.violinplot(); default.colours(); display.colours(); display.statistical.result(); force.colour.scheme(); general..final(); get.corr.key(); get.defaults(); get.line.breaks(); legend.grob(); scientific.notation(); show.available.palettes(); write.metadata(); write.plot(); gleason.score.colour();","code":""},{"path":"/reference/BoutrosLab.plotting.general-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boutros Lab general plotting functions — BoutrosLab.plotting.general-package","text":"Author: Paul C. Boutros <Paul.Boutros@oicr..ca> Maintainer: Paul C. Boutros <Paul.Boutros@oicr..ca>","code":""},{"path":"/reference/CNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy number aberration (CNA) data from colon cancer patients — CNA","title":"Copy number aberration (CNA) data from colon cancer patients — CNA","text":"CNA calls 30 genes across 58 colon cancer patients.     Additional data patient samples found patient dataset.     patient samples described microarray SNV      datasets.","code":""},{"path":"/reference/CNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy number aberration (CNA) data from colon cancer patients — CNA","text":"","code":"CNA"},{"path":"/reference/CNA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Copy number aberration (CNA) data from colon cancer patients — CNA","text":"data frame 58 columns 30 rows. columns indicate patient sample,     rows indicate gene. contents data frame encoded     0 indicates CNA, -1 indicates CNA loss, 1 indicates CNA gain.","code":""},{"path":"/reference/CNA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Copy number aberration (CNA) data from colon cancer patients — CNA","text":"Christine P'ng","code":""},{"path":"/reference/CNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy number aberration (CNA) data from colon cancer patients — CNA","text":"","code":"data(CNA); create.dotmap(     # filename = tempfile(pattern = 'Using_CNA_dataset', fileext = '.tiff'),     x = CNA[1:15, 1:15],     main = 'CNA data',     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.rot = 90,     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 50     );"},{"path":"/reference/SNV.html","id":null,"dir":"Reference","previous_headings":"","what":"Single nucleotide variant (SNV) data from colon cancer patients — SNV","title":"Single nucleotide variant (SNV) data from colon cancer patients — SNV","text":"SNV calls 30 genes across 58 colon cancer patients.     Additional data patient samples found \"patient\" dataset.     patient samples described \"microarray\" \"CNA\"      datasets.","code":""},{"path":"/reference/SNV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single nucleotide variant (SNV) data from colon cancer patients — SNV","text":"","code":"SNV"},{"path":"/reference/SNV.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Single nucleotide variant (SNV) data from colon cancer patients — SNV","text":"data frame 58 columns 30 rows. columns indicate patient sample,     rows indicate gene. contents data frame either NA (indicating     SNV call made) one : 1 - nonsynonymous SNV 2 - stopgain SNV 3 - frameshift insertion 4 - frameshift deletion 5 - nonframeshift insertion 6 - nonframeshift deletion 7 - splicing 8 - unknown","code":""},{"path":"/reference/SNV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single nucleotide variant (SNV) data from colon cancer patients — SNV","text":"Christine P'ng","code":""},{"path":"/reference/SNV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single nucleotide variant (SNV) data from colon cancer patients — SNV","text":"","code":"len <- apply(SNV[1:15], 2, function(x){mutation.count <- length(which(x == 1))});  create.barplot(     # filename = tempfile(pattern = 'Using_SNV_dataset', fileext = '.tiff'),     formula = len ~ colnames(SNV[1:15]) ,     data = SNV,     main = 'SNV dataset',     xaxis.rot = 45,      ylimits = c(0,30),     yat = seq(0,30,5),     description = 'Barplot created by BoutrosLab.plotting.general'     );"},{"path":"/reference/auto.axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ideal labels and values for a given dataset (detects log scales) — auto.axis","title":"Create ideal labels and values for a given dataset (detects log scales) — auto.axis","text":"Takes dataset several parameters outputs object values labels ideal dataset","code":""},{"path":"/reference/auto.axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ideal labels and values for a given dataset (detects log scales) — auto.axis","text":"","code":"auto.axis(     x,      pretty = TRUE,      log.scaled = NA,      log.zero = 0.1,      max.factor = 1,      min.factor = 1,      include.origin = TRUE,      num.labels = 5,      max.min.log10.diff = 2 )"},{"path":"/reference/auto.axis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ideal labels and values for a given dataset (detects log scales) — auto.axis","text":"x dataset intended used labels redisdributed data pretty Parameter flag output pretty format log.scaled parameter set determine scaling logarithmic log.zero log 0 starting point max.factor maximum factor y variable min.factor minimum factor y variable include.origin flag include origin value num.labels number labels output max.min.log10.diff max min diffrence dataset determined logarithmic","code":""},{"path":"/reference/auto.axis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create ideal labels and values for a given dataset (detects log scales) — auto.axis","text":"Takafumi Yamaguch","code":""},{"path":[]},{"path":"/reference/auto.axis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ideal labels and values for a given dataset (detects log scales) — auto.axis","text":"","code":"set.seed(223); simple.data <- data.frame(     x = sample(1:15, 10),     y = LETTERS[1:10]     );  auto.axis(simple.data$x) #> log.scaledFALSE #> $log.scaled #> [1] FALSE #>  #> $x #>  [1]  9  1  2  7  6  5 13 14 12  3 #>  #> $at #> [1]  0  5 10 15 #>  #> $axis.lab #> [1]  0  5 10 15 #>   data2 <- c(1,10,100,1000)  auto.axis(data2) #> log.scaledTRUE #> $log.scaled #> [1] TRUE #>  #> $x #> [1] 0 1 2 3 #>  #> $at #> [1] 0 1 2 3 #>  #> $axis.lab #> expression(bold(\"0\"), bold(\"10\"^\"1\"), bold(\"10\"^\"2\"), bold(\"10\"^\"3\")) #>"},{"path":"/reference/colour.gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a colour gradient — colour.gradient","title":"Creates a colour gradient — colour.gradient","text":"Creates sequential palette colours.","code":""},{"path":"/reference/colour.gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a colour gradient — colour.gradient","text":"","code":"colour.gradient(   colour,    length   );"},{"path":"/reference/colour.gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a colour gradient — colour.gradient","text":"colour single colour used center value sequence length number colours include palette","code":""},{"path":"/reference/colour.gradient.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a colour gradient — colour.gradient","text":"Ren Sun & Christine P'ng","code":""},{"path":"/reference/colour.gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a colour gradient — colour.gradient","text":"","code":"display.colours(colour.gradient('dodgerblue2', 6));   display.colours(colour.gradient(default.colours(1), 3));"},{"path":"/reference/covariates.grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create one or more covariate bars — covariates.grob","title":"Create one or more covariate bars — covariates.grob","text":"Takes list covariate bar annotates creates grid graphical object ","code":""},{"path":"/reference/covariates.grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create one or more covariate bars — covariates.grob","text":"","code":"covariates.grob(   covariates,   ord,   side = 'right',   size = 1,   grid.row = NULL,   grid.col = NULL,   grid.border = NULL,   row.lines = NULL,   col.lines = NULL,   reorder.grid.index = FALSE,         x = 0.5,         y = 0.5   );"},{"path":"/reference/covariates.grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create one or more covariate bars — covariates.grob","text":"covariates covariate annotate add plot, fully formed list. ord vector integer indices indicating order items covariate bars. side Intended position covariate bar added legend. Allowed positions “right” “top”. size size covariate bar units “lines”. grid.row list parameters passed gpar specifying behaviour row lines covariate bars. See Notes details. grid.col list parameters passed gpar specifying behaviour column lines covariate bars. grid.border list parameters passed gpar specifying behaviour border around covariate bars. row.lines Vector row indices grid lines drawn. NULL (default), row lines drawn. Ignored grid.row specified. col.lines Vector column indices grid lines drawn. NULL (default), column lines drawn. Ignored grid.col specified. reorder.grid.index Boolean specifying whether grid line indices re-ordered according ord argument. Defaults FALSE. x x coordinate npc coordinate system y y coordinate npc coordinate system","code":""},{"path":"/reference/covariates.grob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create one or more covariate bars — covariates.grob","text":"grid graphical object (grob) representing covariate bar(s)","code":""},{"path":"/reference/covariates.grob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create one or more covariate bars — covariates.grob","text":"Lauren Chong","code":""},{"path":[]},{"path":"/reference/covariates.grob.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Create one or more covariate bars — covariates.grob","text":"code adaptation dendrogramGrob function latticeExtra package. uses functions grid package. default, covariate bar grid drawn via borders around individual rectangles using parameters specified covariates argument (col, lwd, etc.). grid.row, grid.col, grid.border specified user, additional grid lines drawn existing ones using parameters lists.","code":""},{"path":"/reference/covariates.grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create one or more covariate bars — covariates.grob","text":"","code":"# The 'cairo' graphics is preferred but on M1 Macs this is not available bitmap.type = getOption('bitmapType') if (capabilities('cairo')) {   bitmap.type <- 'cairo';   }  # create temp data set.seed(1234567890);  x <- outer(-5:5, -5:5, '*') + matrix(nrow = 11, ncol = 11, data = runif(11 * 11)); colnames(x) <- paste('col', 1:11, sep = '-'); rownames(x) <- paste('row', 1:11, sep = '-');  # set covariates covariate.colours1 <- x[,1] covariate.colours1[covariate.colours1 >= 0] <- default.colours(3)[1]; covariate.colours1[covariate.colours1 != default.colours(3)[1]] <- default.colours(3)[2];  covariate.colours2 <- x[,1] covariate.colours2[covariate.colours2 >= 0] <- default.colours(3)[2]; covariate.colours2[covariate.colours2 != default.colours(3)[2]] <- default.colours(3)[3];  # create an object to draw the covariates from covariates1 <- list(     rect = list(         col = 'black',         fill = covariate.colours1,         lwd = 1.5         ),     rect = list(         col = 'black',         fill = covariate.colours2,         lwd = 1.5         )     );  # create a covariates grob using a simple incremental ordering and default behaviour covariates.grob1 <- covariates.grob(     covariates = covariates1,     ord = c(1:ncol(x)),     side = 'right'     );  # create a dendrogram for x cov.dendrogram <- BoutrosLab.plotting.general::create.dendrogram(     x = x,     clustering.method = 'average'     );  covariates2 <-list(     rect = list(         col = 'black',         fill = covariate.colours2,         lwd = 1.5         )     );  # create a covariates grob using the dendrogram ordering and double the default size covariates.grob2 <- covariates.grob(     covariates = covariates2,     ord = order.dendrogram(cov.dendrogram),     side = 'top',     size = 2     );  # add a border of a different colour covariates.grob3 <- covariates.grob(     covariates = covariates1,     ord = c(1:ncol(x)),     side = 'right',     grid.border = list(col = 'red', lwd = 1.5)     );  # create covariates with transparent rectangle borders covariates3 <- list(     rect = list(         col = 'transparent',         fill = covariate.colours1,         lwd = 1.5         ),     rect = list(         col = 'transparent',         fill = covariate.colours2,         lwd = 1.5         )     );  # add column grid lines and a border with default gpar settings covariates.grob4 <- covariates.grob(     covariates = covariates3,     ord = c(1:nrow(x)),     side = 'top',     grid.col = list(col = 'black', lty = 3),     grid.border = list()     );  # draw a subset of row/column lines covariates.grob5 <- covariates.grob(     covariates = covariates3,     ord = order.dendrogram(cov.dendrogram),     side = 'right',     grid.row = list(lineend = 'butt', lwd = 2),     row.lines = 6,     reorder.grid.index = FALSE, # note: this is already set by default     grid.col = list(lty = 2),     col.lines = c(0,1)     );"},{"path":"/reference/create.barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a barplot — create.barplot","title":"Make a barplot — create.barplot","text":"Takes data.frame creates barplot","code":""},{"path":"/reference/create.barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a barplot — create.barplot","text":"","code":"create.barplot(   formula,   data,   groups = NULL,   stack = FALSE,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   abline.h = NULL,   abline.v = NULL,   abline.lty = 1,   abline.lwd = NULL,   abline.col = 'black',   axes.lwd = 1,   add.grid = FALSE,   xgrid.at = xat,   ygrid.at = yat,   grid.lwd = 5,   grid.col = NULL,   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.tck = 1,   yaxis.tck = 1,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   top.padding = 0.5,   bottom.padding = 1,   right.padding = 1,   left.padding = 1,   key.bottom = 0.1,   ylab.axis.padding = 0.5,   xlab.axis.padding = 0.5,   col = 'black',   border.col = 'black',   border.lwd = 1,   plot.horizontal = FALSE,   background.col = 'transparent',   origin = 0,   reference = TRUE,   box.ratio = 2,   sample.order = 'none',   group.labels = FALSE,   key = list(text = list(lab = c(''))),   legend = NULL,   add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.col = 'black',   text.cex = 1,   text.fontface = 'bold',   strip.col = 'white',   strip.cex = 1,   y.error.up = NULL,   y.error.down = y.error.up,   y.error.bar.col = 'black',   error.whisker.width = width/(nrow(data)*4),   error.bar.lwd = 1,   error.whisker.angle = 90,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'grey85',   alpha.rectangle = 1,   line.func = NULL,   line.from = 0,   line.to = 0,   line.col = 'transparent',   line.infront = TRUE,   text.above.bars = list(labels = NULL,     padding = NULL,     bar.locations = NULL,     rotation = 0     ),   raster = NULL,   raster.vert = TRUE,   raster.just = 'center',   raster.width.dim = unit(2/37, 'npc'),   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,   inside.legend.auto = FALSE,   disable.factor.sorting = FALSE   );"},{"path":"/reference/create.barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a barplot — create.barplot","text":"formula formula used extract x & y components data-frame data data-frame plot groups Optional grouping variable.  Expression variable. stack Logical, relevant groups non-null. FALSE (default), bars different values grouping variable drawn side side, otherwise stacked filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 3 xlab.label label x-axis ylab.label label y-axis xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xlab.col Colour x-axis label, defaults black ylab.col Colour y-axis label, defaults black xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label abline.h Specify superimposed horizontal line(s) abline.v Specify superimposed vertical line(s) abline.lty Specify superimposed line type abline.lwd Specify superimposed line width abline.col Specify superimposed line colour (defaults black) axes.lwd Specify line width axes; set 0 turn axes add.grid Specify whether draw grid (defaults FALSE) xgrid.Specify draw x-axis grid lines (defaults xat) ygrid.Specify draw y-axis grid lines (defaults yat) grid.lwd Specify width grid line (defaults 5) grid.col Specify colour grid line. Currently supports one colour. Defaults NULL, uses colour reference line. xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.col Colour x-axis tick labels, defaults black yaxis.col Colour y-axis tick labels, defaults black xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.cex Size x-axis tick labels, defaults 1.2 yaxis.cex Size y-axis tick labels, defaults 1.5 xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 xlimits Two-element vector giving x-axis limits. Useful plot.horizontal = TRUE ylimits Two-element vector giving y-axis limits xat Vector listing x-axis labels drawn. Useful plot.horizontal = TRUE yat Vector listing y-axis labels drawn layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details . .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” top.padding number specifying distance top margin, defaults 0.5 bottom.padding number specifying distance bottom margin, defaults 2 right.padding number specifying distance right margin, defaults 1 left.padding number specifying distance left margin, defaults 1 key.bottom number specifying much space left key bottom, defaults 0.1 ylab.axis.padding number specifying distance y-axis label y-axis, defaults 0 , xlab.axis.padding number specifying distance x-axis label x-axis, defaults 0.5. Named differently ylab.axis.padding lattice's internal names values col Filling colour bars, defaults black, grey-scale spectrum !.null(groups) border.col Specify border colour (defaults black) border.lwd Specify border width (defaults 1) plot.horizontal Plot bars horizontally background.col Plot background colour, defaults transparent origin origin plot, generally 0 reference reference line printed origin box.ratio Specifies width bar, defaults 2 sample.order bars reordered, accepts values “increasing”, “decreasing” vector sample names. Labels also reordered group.labels labels grouped amount bars per column key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.col colour additional text text.cex size additional text text.fontface fontface additional text strip.col Strip background colour, defaults white strip.cex Strip title character expansion y.error.vector specifying length error bar going point. set NULL (default), error bars drawn y.error.vector specifying length error bar going point. default, set y.error.y.error.bar.col string vector strings specifying colour error bars. Defaults black error.whisker.width number specifying width error bars. Defaults rough approximation based size data error.bar.lwd line width error bars. Defaults 1 error.whisker.angle angle error bar whiskers, defaults 90. Can changed produce arrow-like bars add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle line.func Function line drawn top plot line.starting point line plot line.ending point line plot line.col Colour line plot line.infront line appear front plot text..bars form text appear bars; input list raster image raster bar - see Raster Images R Graphics Paul Murrell full details raster.vert logical indicating whether raster applied vertically horizontally raster.just word giving justification raster, can set “left”, “right”, “centre”, “center”, “bottom”, “top” raster.width.dim unit object giving width raster bar height Figure height, defaults 6 width Figure width, defaults 6 size.units Figure units, defaults inches resolution Figure resolution, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Description image/plot; default NULL style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function disable.factor.sorting Disable barplot auto sorting factors alphabetically/numerically","code":""},{"path":"/reference/create.barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a barplot — create.barplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.barplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a barplot — create.barplot","text":"Mehrdad Shamsi","code":""},{"path":"/reference/create.barplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a barplot — create.barplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a barplot — create.barplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = sample(1:15, 5),     y = LETTERS[1:5]     );  # Simple example create.barplot(     # filename = tempfile(pattern = 'Barplot_Simple', fileext = '.tiff'),     formula = x ~ y,     data = simple.data,     yat = seq(0,16,2),     resolution = 30     );   # set up the data total.counts <- apply(SNV[1:15], 2, function(x){ mutation.count <- (30 - sum(is.na(x)))}); count.nonsyn <- function(x){     mutation.count <- length(which(x == 1));     } nonsynonymous.SNV <- apply(SNV[1:15], 2, count.nonsyn); other.mutations <- total.counts - nonsynonymous.SNV;  # subset the first fifteen samples barplot.data <- data.frame(     samples = rep(1:15, 2),     mutation = c(rep('nonsynonymous', 15), rep('other',15)),     type = c(rep(1, 15), rep(2,15)),     values = c(nonsynonymous.SNV, other.mutations),     sex = rep(patient$sex[1:15], 2),     stage = rep(patient$stage[1:15], 2),     msi = rep(patient$msi[1:15], 2)     );  # Minimal input create.barplot(     # filename = tempfile(pattern = 'Barplot_Minimal_Input', fileext = '.tiff'),     formula = values ~ samples ,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Minimal input',     # Editing the metadata     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Axes labels & limits create.barplot(     # filename = tempfile(pattern = 'Barplot_Custom_Axes', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Axes labels & limits',     # Setting axes labels     xlab.lab = 'Sample',     ylab.lab = 'Nonsynonymous SNVs',     # Setting y-axis limits and tick-mark locations     ylimits = c(0,30),     yat = seq(0,30,5),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Font size and font face create.barplot(     # filename = tempfile(pattern = 'Barplot_Font_Changes', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Font changes',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     # Changing font sizes     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     # Changing font type     xaxis.fontface = 1,     yaxis.fontface = 1,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Sorting data create.barplot(     # filename = tempfile(pattern = 'Barplot_Sorted', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Sorted bars',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Order bars either by 'increasing' or 'decreasing'     sample.order = 'decreasing',     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Sorting data with horizontal barplot create.barplot(     formula = samples ~ values,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Sorted bars',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     xlimits = c(0,30),     xat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Order bars either by 'increasing' or 'decreasing'     sample.order = 'decreasing',     plot.horizontal = TRUE,     resolution = 100     )   # Colour changes sex.colours <- replace(as.vector(barplot.data$sex), which(barplot.data$sex == 'male'),'dodgerblue'); sex.colours <- replace(sex.colours, which(barplot.data$sex == 'female'), 'pink');  create.barplot(     # filename = tempfile(pattern = 'Barplot_Colour_Changes', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Colour changes',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Colour bars based on sex     col = sex.colours,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Legend create.barplot(     # filename = tempfile(pattern = 'Barplot_Legend', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Legend',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     col = sex.colours,     # Adding legend to explain bar colour-coding     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 3,                         fill = c('dodgerblue', 'pink')                         ),                     text = list(                         lab = c('Male','Female')                         ),                     padding.text = 5,                     cex = 1                     )                 ),                 # Positioning legend on plot                 x = 0.75,                 y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Grouped barplot create.barplot(     # filename = tempfile(pattern = 'Barplot_Grouped', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data,     main = 'Grouped bar chart',     xlab.lab = 'Samples',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Setting groups     groups = mutation,     col = default.colours(12, is.greyscale = FALSE)[11:12],     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 2,                         fill = default.colours(12, is.greyscale = FALSE)[11:12]                         ),                     text = list(                         lab = c('Nonsynonymous SNV','Other SNV')                         ),                     padding.text = 3,                     cex = 1                     )                 ),             x = 0.55,             y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Grouped labels create.barplot(     # filename = tempfile(pattern = 'Barplot_Grouped_Labels', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data,     main = 'Grouped labels',     xlab.lab = 'Samples',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Setting groups     groups = mutation,     col = default.colours(12, is.greyscale = FALSE)[11:12],     # Grouped labels     xaxis.lab = rep(c('nonsynonymous', 'other'), 15),     xaxis.rot = 90,     group.labels = TRUE,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Stacked barplot create.barplot(     # filename = tempfile(pattern = 'Barplot_Stacked', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data,     main = 'Stacked bar chart',     xlab.lab = 'Samples',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     groups = mutation,     col = default.colours(12, is.greyscale = FALSE)[11:12],     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 2,                         # reverse order to match stacked bar order                         fill = rev(default.colours(12, is.greyscale = FALSE)[11:12])                         ),                     text = list(                         # reverse order to match stacked bar order                         lab = rev(c('Nonsynonymous SNV','Other SNV'))                         ),                     padding.text = 3,                     cex = 1                     )                 ),             x = 0.55,             y = 0.95             )         ),     # Changing the plot from a grouped plot to a stacked plot     stack = TRUE,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Panel organization create.barplot(     # filename = tempfile(pattern = 'Barplot_Panel_Layout_numeric_conditioning', fileext = '.tiff'),     # Setting the panel layout     formula = values ~ samples | type,     data = barplot.data,     main = 'Panel layout',     xlab.lab = 'Samples',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Numeric values detected for conditional variable. If text labels are desired, please convert conditional variable to character.   create.barplot(     # Setting the panel layout     formula = values ~ samples | mutation,     data = barplot.data,     main = 'Panel layout',     xlab.lab = 'Samples',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Panel organization 2 create.barplot(     # filename = tempfile(pattern = 'Barplot_Panel_Layout_2', fileext = '.tiff'),     formula = values ~ samples | mutation,     data = barplot.data,     main = 'Panel layout',     xlab.lab = 'Samples',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Adjusting the panel layout     layout = c(1,2),     y.spacing = 1,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Covariates # Note: Covariates can also be created using the create.multiplot function  # set covariate colour schemes covariate.colours.sex <- as.character(barplot.data$sex); covariate.colours.sex[covariate.colours.sex == 'male'] <- 'dodgerblue'; covariate.colours.sex[covariate.colours.sex == 'female'] <- 'pink';  covariate.colours.stage <- as.character(barplot.data$stage); covariate.colours.stage[covariate.colours.stage == 'I'] <- 'plum1'; covariate.colours.stage[covariate.colours.stage == 'II'] <- 'orchid1'; covariate.colours.stage[covariate.colours.stage == 'III'] <- 'orchid3'; covariate.colours.stage[covariate.colours.stage == 'IV'] <- 'orchid4';  covariate.colours.msi <- as.character(barplot.data$msi); covariate.colours.msi[covariate.colours.msi == 'MSS'] <- 'chartreuse4'; covariate.colours.msi[covariate.colours.msi == 'MSI-High'] <- 'chartreuse2';  # create object to draw covariates covariates.object <- list(     rect = list(         col = 'white',         fill = covariate.colours.sex,         lwd = 1.5         ),     rect = list(         col = 'white',         fill = covariate.colours.stage,         lwd = 1.5         ),     rect = list(         col = 'white',         fill = covariate.colours.msi,         lwd = 1.5         )     );  # see BoutrosLab.plotting.general::covariates.grob() for more information covariate.object.grob <- covariates.grob(     covariates = covariates.object,     ord = c(1:15),     side = 'top',     size = 0.8     );  # Create legend to explain covariates covariates.legends <- list(     legend = list(         colours = c('dodgerblue','pink'),         labels = c('male','female'),         title = 'Sex',         border = 'white'         ),     legend = list(         colours = c('plum1', 'orchid1', 'orchid3', 'orchid4'),         labels = c('I','II','III','IV'),         title = 'Stage',         border = 'white'         ),     legend = list(         colours = c('chartreuse4','chartreuse2'),         labels = c('MSS','MSI-High'),         title = 'MSI',         border = 'white'         )     );  # see BoutrosLab.plotting.general::legend.grob() for more information covariate.legend.grob <- legend.grob(     legends = covariates.legends,     title.just = 'left'     );  create.barplot(     # filename = tempfile(pattern = 'Barplot_Covariates', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Covariates',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     yaxis.fontface = 1,     # removing x-axis formatting to give space to covariates     xaxis.tck = 0,     xaxis.lab = rep('',15),     xaxis.cex = 0,     # covariates     legend = list(         bottom = list(fun = covariate.object.grob),         right = list(fun = covariate.legend.grob)         ),     key = list(         x = 1,         y = -0.028,         text = list(             lab = c('Sex','Stage','MSI')             ),         padding.text = 1         ),     bottom.padding = 4,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,     resolveHJust(x$just, x$hjust), resolveVJust(x$just, x$vjust),     x$rot, 0): polygon edge not found  create.barplot(     # filename = tempfile(pattern = 'Barplot_Auto_legend', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Covariates',     ylab.lab = 'Mutations',     ylimits = c(0,30),     yat = seq(0,30,5),     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     yaxis.fontface = 1,     # removing x-axis formatting to give space to covariates     xaxis.tck = 0,     xaxis.lab = rep('',15),     xaxis.cex = 0,     # covariates     legend = list(         inside = list(fun = covariate.legend.grob)         ),     bottom.padding = 4,     inside.legend.auto = TRUE,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,     resolveHJust(x$just, x$hjust), resolveVJust(x$just, x$vjust),     x$rot, 0): polygon edge not found  # Horizontal orientation create.barplot(     # filename = tempfile(pattern = 'Barplot_Horizontal', fileext = '.tiff'),     # switch formula order     formula = samples ~ values,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Plot horizontally',     # Adjusting the panel layout     plot.horizontal = TRUE,     # covariates     legend = list(         inside = list(fun = covariate.legend.grob)         ),     inside.legend.auto = TRUE,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Change bar thickness and add text labels create.barplot(     # filename = tempfile(pattern = 'Barplot_Text_Labels', fileext = '.tiff'),     # switch formula order     formula = samples ~ values,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Text labels and thin bars',     # Adjusting the panel layout     plot.horizontal = TRUE,     box.ratio = 0.6,     add.text = TRUE,     text.x = 27.75,     text.y = 1:15,     text.labels = barplot.data[barplot.data$mutation == 'nonsynonymous','values'],     text.cex = 0.8,     text.fontface = 'italic',     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Error bars error.data <- data.frame(     genes = rownames(microarray)[1:15],     values = apply(microarray[1:15,1:58], 1, mean),     error = apply(microarray[1:15,1:58], 1, sd)     );  create.barplot(     # filename = tempfile(pattern = 'Barplot_Error_Bars', fileext = '.tiff'),     # needs sequential x-axis     formula = values ~ 1:15,     data = error.data,     y.error.up = error.data$error,     xaxis.lab = error.data$genes,     main = 'Error bars',     xlab.lab = 'Gene',     ylab.lab = 'Change in Expression',     ylimits = c(0,14),     yat = seq(0,14,2),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.rot = 45,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );    create.barplot(     # filename = tempfile(pattern = 'Barplot_Error_Bars_Horizontal', fileext = '.tiff'),     # needs sequential x-axis     formula = values ~ 1:15,     data = error.data,     y.error.up = error.data$error,     yaxis.lab = error.data$genes,     plot.horizontal = TRUE,     main = 'Error bars',     xlab.lab = 'Gene',     ylab.lab = 'Change in Expression',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.rot = 45,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Grid lines create.barplot(     # filename = tempfile(pattern = 'Barplot_Gridlines', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Gridlines',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Grid lines     add.grid = TRUE,     xgrid.at = seq(0,15,2),   col = sex.colours,     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 3,                         fill = c('dodgerblue', 'pink')                         ),                     text = list(                         lab = c('Male','Female')                         ),                     padding.text = 5,                     cex = 1                     )                 ),                 # Positioning legend on plot                 x = 0.75,                 y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Grid lines 2 create.barplot(     # filename = tempfile(pattern = 'Barplot_Gridlines_GreyBG', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Gridlines & grey background',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Grid lines     background.col = 'grey85',     add.grid = TRUE,     xgrid.at = seq(0,15,2),     col = sex.colours,     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 3,                         fill = c('dodgerblue', 'pink')                         ),                     text = list(                         lab = c('Male','Female')                         ),                     padding.text = 5,                     cex = 1                     )                 ),                 # Positioning legend on plot                 x = 0.75,                 y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Labels create.barplot(     # filename = tempfile(pattern = 'Barplot_Labels', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Labels',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Labels     text.above.bars = list(         labels = c('*','27','15','*'),         padding = 0.75,         bar.locations = c(1, 3, 12, 14),         rotation = 0         ),     col = sex.colours,     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 3,                         fill = c('dodgerblue', 'pink')                         ),                     text = list(                         lab = c('Male','Female')                         ),                     padding.text = 5,                     cex = 1                     )                 ),                 # Positioning legend on plot                 x = 0.75,                 y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # lines create.barplot(     # filename = tempfile(pattern = 'Barplot_Lines', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Lines',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Lines     sample.order = 'increasing',     line.func = function(x) {0.1*x**2},     line.from = 0,     line.to = 16,     line.col = 'darkgrey',     abline.h = 10,     abline.col = 'red',     col = sex.colours,     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 3,                         fill = c('dodgerblue', 'pink')                         ),                     text = list(                         lab = c('Male','Female')                         ),                     padding.text = 5,                     cex = 1                     )                 ),                 # Positioning legend on plot                 x = 0.75,                 y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Background rectangle create.barplot(     # filename = tempfile(pattern = 'Barplot_Bg_Rectangle', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Background rectangle',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     sample.order = 'increasing',     # Background rectangle     add.rectangle = TRUE,     xleft.rectangle = seq(0.5, 14.5, 2),     ybottom.rectangle = 0,     xright.rectangle = seq(1.5, 15.5, 2),     ytop.rectangle = 30,     col.rectangle = 'lightgrey',     col = sex.colours,     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 3,                         fill = c('dodgerblue', 'pink')                         ),                     text = list(                         lab = c('Male','Female')                         ),                     padding.text = 5,                     cex = 1                     )                 ),                 # Positioning legend on plot                 x = 0.75,                 y = 0.95             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Raster create.barplot(     # filename = tempfile(pattern = 'Barplot_with_raster', fileext = '.tiff'),     formula = values ~ samples,     data = barplot.data[barplot.data$mutation == 'nonsynonymous',],     main = 'Raster fill',     xlab.lab = 'Samples',     ylab.lab = 'Nonsynonymous SNVs',     ylimits = c(0,30),     yat = seq(0,30,5),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     # filling bars with raster     raster = 1:10/10,     raster.just = 'bottom',     description = 'Description of image here',     resolution = 200     );   # Nature format create.barplot(     # filename = tempfile(pattern = 'Barplot_Nature_style', fileext = '.tiff'),     formula = x ~ y,     data = simple.data,     yat = seq(0,16,2),     main = 'Nature style',      # set style to Nature     style = 'Nature',      # demonstrating how to italicize character variables     ylab.lab = expression(paste('italicized ', italic('a'))),      # demonstrating how to create en-dashes     xlab.lab = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and #> \t\t\ten-dashes for ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.   # Left Justified Example create.barplot(     # filename = tempfile(pattern = 'Barplot_TwoTopLabelsLeftJustified', fileext = '.tiff'),     formula = x ~ y,     data = simple.data,     yat = seq(0,16,2),     ylab.label = NULL,     # set top label details     xlab.top.label = 'Sample Label',     xlab.top.cex = 1.5,     xlab.top.x = -0.125,     xlab.top.y = 0.5,     xlab.top.just = 'left',     # set main label details     main = 'Sample Main',     main.just = 'left',     main.x = 0,     main.y = 0.6,     top.padding = 1,     resolution = 200     );  # }"},{"path":"/reference/create.boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a boxplot — create.boxplot","title":"Make a boxplot — create.boxplot","text":"Takes data.frame creates boxplot","code":""},{"path":"/reference/create.boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a boxplot — create.boxplot","text":"","code":"create.boxplot(   formula,   data,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   add.stripplot = FALSE,   jitter.factor = 1,   jitter.amount = NULL,   points.pch = 19,   points.col = 'darkgrey',   points.cex = 0.5,   points.alpha = 1,   abline.h = NULL,   abline.v = NULL,   abline.lty = NULL,   abline.lwd = NULL,   abline.col = 'black',   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   box.ratio = 1,   col = 'transparent',   alpha = 1,   border.col = 'black',   symbol.cex = 0.8,   lwd = 1,   outliers = TRUE,   sample.order = 'none',   order.by = 'median',   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.tck = c(1,0),   yaxis.tck = 1,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   top.padding = 0.5,   bottom.padding = 2,   right.padding = 1,   left.padding = 2,   ylab.axis.padding = 0,   add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.anchor = 'centre',   text.col = 'black',   text.cex = 1,   text.fontface = 'bold',   key = NULL,   legend = NULL,   strip.col = 'white',   strip.cex = 1,   strip.fontface = 'bold',   line.func = NULL,   line.from = 0,   line.to = 0,   line.col = 'transparent',   line.infront = TRUE,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',         use.legacy.settings = FALSE,   disable.factor.sorting = FALSE   );"},{"path":"/reference/create.boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a boxplot — create.boxplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 3 add.stripplot logical whether plot points, defaults FALSE jitter.factor Numeric value apply jitter, default 1 jitter.amount Numeric; amount noise add, default NULL points.pch pch value use stripplot points.col colour(s) use stripplot (either single colour     vector) points.cex cex value use stripplot points.alpha alpha value use stripplot abline.h Specify horizontal superimpose line abline.v Specify vertical superimpose line abline.lty Specify superimpose line type abline.lwd Specify superimpose line width abline.col Specify superimpose line colour (defaults black) add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x ooordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour rectangle drawn alpha.rectangle Specifies colour bias rectangle drawn box.ratio ability change box width, defaults 1 col colour fill interior boxplot, defaults white alpha alpha interior boxplot colour specified `col`. Defaults 1 (opaque) border.col Colour boxplot, defaults black symbol.cex Size boxplot outlier-symbol lwd Line width, defaults 1 outliers logical whether plot outliers, defaults TRUE sample.order String specifying samples ordered. Either none, increasing, decreasing. order.string specifying sample order ordered , either max, min, median mean xlab.label label x-axis ylab.label label y-axis xlab.cex Size x-axis label, defaults 3 ylab.cex Size y-axis label, defaults 3 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits ylimits Two-element vector giving y-axis limits xat Vector listing x-axis labels drawn yat Vector listing y-axis labels drawn xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis tick labels, defaults 2 yaxis.cex Size y-axis tick labels, defaults 2 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.tck Specifies length tick marks x-axis, defaults 1 (bottom) 0 (top) yaxis.tck Specifies length tick marks y-axis, defaults 1 layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details . .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” top.padding number specifying distance top margin, defaults 0.5 bottom.padding number specifying distance bottom margin, defaults 2 right.padding number specifying distance right margin, defaults 1 left.padding number specifying distance left margin, defaults 2 ylab.axis.padding number specifying distance y-axis label y-axis, defaults 0 , add.text Allow additional text drawn, default FALSE text.labels Labels additional text. formula contains group, length argument match number groups. text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.anchor Part text anchored x/y coordinates. Defaults 'centre'. Use 'left' 'right' left right-align text. text.col colour additional text text.cex size additional text text.fontface fontface additional text key Add key plot. See xyplot. legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion strip.fontface Strip title fontface, defaults bold line.func Function line drawn top plot line.starting point line plot line.ending point line plot line.col Colour line plot line.infront line appear front plot height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Description image/plot; default NULL. style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) disable.factor.sorting Disable barplot auto sorting factors alphabetically/numerically","code":""},{"path":"/reference/create.boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a boxplot — create.boxplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.boxplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a boxplot — create.boxplot","text":"Maud H.W. Starmans","code":""},{"path":"/reference/create.boxplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a boxplot — create.boxplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a boxplot — create.boxplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = rnorm(1000),     y = rep('A',1000)     );  create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Simple', fileext = '.tiff'),     formula = y ~ x,     data = simple.data,     main = 'Simple',     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 50     );   # add stripplot behind boxplot create.boxplot(     # filename = tempfile(pattern = 'Boxplot_with_Stripplot', fileext = '.tiff'),     formula = y ~ x,     data = simple.data,     main = 'With Stripplot',     add.stripplot = TRUE,     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Multi-coloured stripplot strip.data <- data.frame(     score = c(rnorm(30, 15, 3), rnorm(50, 20, 4)),     sex = sample(c('male', 'female'), 80, replace = TRUE),     gene = sample(c('a', 'b'), 80, replace = TRUE)     );  create.boxplot(     filename = NULL,     formula = score ~ sex | gene,     data = strip.data,     main = 'Multi-Coloured Stripplot',     add.stripplot = TRUE,     points.col = c('pink', 'dodgerblue'),     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 100     );    # format data reformatted.data <- data.frame(     x = as.vector(t(microarray[1:10,1:58])),     y = as.factor(rep(rownames(microarray[1:10,1:58]),each = 58)),     z = sample(1:10, 580, replace = TRUE)     );  # Minimal Input create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Minimal_Input', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Minimal input',     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Minimal Input create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Disable_Factor_Sorting_Input', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'No Factor Sorting',     disable.factor.sorting = TRUE,     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Axes and labels create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Axes_Labels', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Axes & labels',     # Adjusting axes size     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     # Adding y-axis label     ylab.label = 'Gene',     # setting axes limits     xlimits = c(0,13),     xat = seq(0,12,2),     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Sorting create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Sorted', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Sorting',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     ylab.label = 'Gene',     xlimits = c(0,13),     xat = seq(0,12,2),     # Reordered by median     sample.order = 'increasing',     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Colour change sex.colour <- as.character(patient$sex); sex.colour[sex.colour == 'male'] <- 'dodgerblue'; sex.colour[sex.colour == 'female'] <- 'pink';  create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Colour_Change', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Colour change',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     ylab.label = 'Gene',     xlimits = c(0,13),     xat = seq(0,12,2),     # Colour change     col = sex.colour,     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Legend create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Legend', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Legend',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     ylab.label = 'Gene',     xlimits = c(0,13),     xat = seq(0,12,2),     col = sex.colour,     # legend     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 1.5,                         fill = c('dodgerblue','pink')                         ),                     text = list(                         lab = c('male','female')                         ),                     cex = 1                     )                 ),             x = 0.03,             y = 0.97,             corner = c(0,1),             draw = FALSE             )         ),     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Orientation create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Orientation', fileext = '.tiff'),     # switch the order     formula = x ~ y,     data = reformatted.data,     main = 'Orientation',     xaxis.cex = 1,     yaxis.cex = 1,     # adjust the axes     ylimits = c(0,13),     yat = seq(0,12,2),     # rotate the labels     xaxis.rot = 90,     xlab.label = 'Gene',     xlab.cex = 1.5,     col = sex.colour,     # legend     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 1.5,                         fill = c('dodgerblue','pink')                         ),                     text = list(                         lab = c('male','female')                         ),                     cex = 1                     )                 ),             x = 0.23,             y = 0.97,             corner = c(0,1),             draw = FALSE             )         ),     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Background rectangle create.boxplot(     # filename = tempfile(pattern = 'Boxplot_BG_Rect', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Bg rectangle',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     ylab.label = 'Gene',     xlimits = c(0,13),     xat = seq(0,12,2),     # draw rectangle     add.rectangle = TRUE,     xleft.rectangle = 0,     xright.rectangle = 13,     ybottom.rectangle = seq(0.5, 8.5, 2),     ytop.rectangle = seq(1.5, 9.5, 2),     col.rectangle = 'grey',     alpha.rectangle = 0.5,     col = sex.colour,     # legend     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = 'black',                         pch = 22,                         cex = 1.5,                         fill = c('dodgerblue','pink')                         ),                     text = list(                         lab = c('male','female')                         ),                     cex = 1                     )                 ),             x = 0.03,             y = 0.97,             corner = c(0,1),             draw = FALSE             )         ),     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Line create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Line', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Line',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     ylab.label = 'Gene',     xlimits = c(0,13),     xat = seq(0,12,2),     # draw line     line.func = function(x){c(0.5, 10.5)},     line.from = 11,     line.to = 11,     line.col = 'grey',     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Panel Organization create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Panels_numeric_conditioning', fileext = '.tiff'),     formula = ~ x | z,     data = reformatted.data,     main = 'Panels',     xaxis.cex = 1,     yaxis.cex = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     # Setting up the layout     layout = c(2,5),     x.relation = 'free',     x.spacing = 1,     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Numeric values detected for conditional variable. If text labels are desired, please convert conditional variable to character.   create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Panels_factor_conditioning', fileext = '.tiff'),     formula = ~ x | y,     data = reformatted.data,     main = 'Panels',     xaxis.cex = 1,     yaxis.cex = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     # Setting up the layout     layout = c(2,5),     x.relation = 'free',     x.spacing = 1,     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature format create.boxplot(     # filename = tempfile(pattern = 'Boxplot_Nature_style', fileext = '.tiff'),     formula = y ~ x,     data = reformatted.data,     main = 'Nature style',     xaxis.cex = 1,     yaxis.cex = 1,      # set style to Nature     style = 'Nature',      # demonstrating how to italicize character variables     ylab.lab = expression(paste('italicized ', italic('a'))),      # demonstrating how to create en-dashes     xlab.lab = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),     resolution = 1200     ); #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.   # Sorting by mean and multiple filenames create.boxplot(     filename = c(         tempfile(pattern = 'Boxplot_Sorted1', fileext = '.tiff'),         tempfile(pattern = 'Boxplot_Sorted2', fileext = '.tiff')         ),     formula = y ~ x,     data = reformatted.data,     main = 'Sorting',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     ylab.label = 'Gene',     xlimits = c(0,13),     xat = seq(0,12,2),     # Reordered by median     sample.order = 'increasing',     order.by = 'mean',     description = 'Boxplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Adding text to plot # Generate normally distributed variables with two different means set.seed(779); groupA <- rnorm(n = 100, mean = 10, sd = 2); groupB <- rnorm(n = 134, mean = 10.5, sd = 2);  # Create data frame for plotting to.plot <- data.frame(   y = rep(     c('1', '2'),     times = c(100, 134)     ),   x = c(groupA, groupB)   );  # Get difference between means diff.mean <- round(mean(groupB) - mean(groupA), 2);  # Plot and display difference create.boxplot(   formula = x ~ y,   # filename = tempfile(pattern = 'boxplot_with_text', fileext = '.tiff'),   data = to.plot,   add.stripplot = TRUE,   add.text = TRUE,   text.labels = bquote(mu[B] - mu[A] == .(diff.mean)),   text.x = 2.1,   text.y = 15.3,   text.col = 'black',   text.cex = 1.5,   text.fontface = 'bold',   ylimits = c(     min(to.plot$x) - abs(min(to.plot$x) * 0.1),     max(to.plot$x) + abs(max(to.plot$x) * 0.1)     ),   resolution = 200     ); #> Warning: NAs introduced by coercion  # }"},{"path":"/reference/create.colourkey.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Colourkey — create.colourkey","title":"Create Colourkey — create.colourkey","text":"function generating placing colour key. Good use multiplots smaller colour key desired.","code":""},{"path":"/reference/create.colourkey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Colourkey — create.colourkey","text":"","code":"create.colourkey(   x,   scale.data = FALSE,   colour.scheme = c(),   total.colours = 99,   colour.centering.value = 0,   colour.alpha = 1,   fill.colour = 'darkgray',   at = NULL,   colourkey.labels.at = NULL,   colourkey.labels = colourkey.labels.at,   colourkey.labels.cex = 1,   placement = NULL   );"},{"path":"/reference/create.colourkey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Colourkey — create.colourkey","text":"x Either data-frame matrix heatmap created scale.data data heatmap scaled? Defaults FALSE. colour.scheme Heatmap colouring. Accepts old-style themes, vector either two three colours gradiated create final palette. total.colours Total number colours plot. colour.centering.value center colour-map. colour.alpha Bias added colour selection (uses x^colour.alpha mapping). fill.colour background fill (exposed missing values present. vector specifying breakpoints along range x. colourkey.labels.vector specifying tick-positions colourkey. colourkey.labels vector specifying tick-labels colourkey colourkey.labels.cex Size colourkey labels. Defaults 1 placement Location size colourkey.","code":""},{"path":"/reference/create.colourkey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Colourkey — create.colourkey","text":"Returns key format specified xyplot documentation.","code":""},{"path":"/reference/create.colourkey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Colourkey — create.colourkey","text":"Stephenie Prokopec","code":""},{"path":[]},{"path":"/reference/create.colourkey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Colourkey — create.colourkey","text":"","code":"set.seed(1234567890); x <- outer(-5:5, -5:5, '*') + matrix(nrow = 11, ncol = 11, data = runif(11 * 11)); colnames(x) <- paste('col', 1:11, sep = '-'); rownames(x) <- paste('row', 1:11, sep = '-');  y <- as.data.frame(x); y$mean <- apply(x,1,mean);  # example of a simple multiplot with colourkey heatmap1 <- create.heatmap(     x = t(x),     filename = NULL,     clustering.method = 'none',     scale.data = FALSE,     yaxis.lab = NA,     print.colour.key = FALSE,     colour.scheme = c('chartreuse3', 'white', 'blue'),     at = seq(-25, 25, 0.01)     ); #> Warning: max(x) = 25.9832547025289 is greater than max(at) =  25 Clipped data will be plotted  barplot1 <- create.barplot(     1:nrow(y) ~ mean,     y,     plot.horizontal = TRUE     );  create.multiplot(     plot.objects = list(heatmap1, barplot1),     # filename = tempfile(pattern = 'multiplot_with_colourkey', fileext = '.tiff'),     plot.layout = c(2,1),     panel.widths = c(2,1),     yat = list(1:nrow(y), NULL),     yaxis.labels = rownames(y),     xlimits = list(NULL, c(0,1)),     xat = list(NULL, seq(0,1,0.5)),     xaxis.labels = list(NULL, seq(0,1,0.5)),     x.spacing = 0,     print.new.legend = TRUE,     legend = list(         inside = list(             fun = BoutrosLab.plotting.general::create.colourkey(                 x = x,                 colour.scheme = c('chartreuse3', 'white', 'blue'),                 at = seq(-25, 25, 0.01),                 colourkey.labels.at = c(-25, 0, 25),                 placement = viewport(just = 'left', x = 0.55, y = -0.55, width = 0.5)                 )             )         ),     bottom.padding = 4,     width = 10,     height = 8,     resolution = 500     ); #> Warning: max(x) = 25.9832547025289 is greater than max(at) =  25 Clipped data will be plotted  #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length"},{"path":"/reference/create.dendrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a dendrogram — create.dendrogram","title":"Generate a dendrogram — create.dendrogram","text":"Takes matrix creates row-wise column-wise dendrogram","code":""},{"path":"/reference/create.dendrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a dendrogram — create.dendrogram","text":"","code":"create.dendrogram(   x,   clustering.method = 'diana',   cluster.dimension = 'col',   distance.method = 'correlation',   cor.method = 'pearson',   force.clustering = FALSE,   same.as.matrix = FALSE   );"},{"path":"/reference/create.dendrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a dendrogram — create.dendrogram","text":"x matrix used create dendrogram clustering.method Method used cluster records (can none). Accepts agglomerative clustering methods available hclust, plus “diana” (divisive). cluster.dimension clustering performed rows columns x? distance.method Method name distance measure used clustering. Defaults “correlation”. supported methods ?dist. Also supports “jaccard” useful clustering categorical variables. cor.method method used calculating correlation. Defaults “pearson” force.clustering Binary -ride control prevents clustering -large matrices ..matrix Prevents flipping matrix function normally ","code":""},{"path":"/reference/create.dendrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a dendrogram — create.dendrogram","text":"Returns object dendrogram class corresponding row-wise column-wise dendrogram x","code":""},{"path":"/reference/create.dendrogram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a dendrogram — create.dendrogram","text":"Lauren Chong","code":""},{"path":"/reference/create.dendrogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a dendrogram — create.dendrogram","text":"","code":"# create temp data x <- outer(-5:5, -5:5, '*') + matrix(nrow = 11, ncol = 11, data = runif(11 * 11)); colnames(x) <- paste('col', 1:11, sep = '-'); rownames(x) <- paste('row', 1:11, sep = '-');  # example of generating a column-wise dendrogram using default values create.dendrogram(     x = x     ); #> 'dendrogram' with 2 branches and 11 members total, at height 1.999704   # example of generating a column-wise dendrogram using different distance and clustering methods create.dendrogram(     x = x,     clustering.method = 'median',     cluster.dimension = 'cols',     distance.method = 'euclidean'     ); #> 'dendrogram' with 2 branches and 11 members total, at height 42.19573   # generate row-wise dendrogram using default distance and clustering methods create.dendrogram(     x = x,     cluster.dimension = 'row'     ); #> 'dendrogram' with 2 branches and 11 members total, at height 1.999885   # generate row-wise dendrogram using different distance and clustering methods create.dendrogram(     x = x,     clustering.method = 'ward',     cluster.dimension = 'rows',     distance.method = 'manhattan'     ); #> The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\" #> 'dendrogram' with 2 branches and 11 members total, at height 611.0403"},{"path":"/reference/create.densityplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a density plot — create.densityplot","title":"Make a density plot — create.densityplot","text":"Takes list vectors creates density-plot vector separate curve","code":""},{"path":"/reference/create.densityplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a density plot — create.densityplot","text":"","code":"create.densityplot(   x,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = NULL,   ylab.label = 'Density',   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   type = 'l',   lty = 'solid',   cex = 0.75,   pch = 19,   col = 'black',   lwd = 2,   bandwidth = 'nrd0',   bandwidth.adjust = 1,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.tck = 1,   yaxis.tck = 1,   xgrid.at = xat,   ygrid.at = yat,   key = list(text = list(lab = c(''))),   legend = NULL,   top.padding = 0.1,   bottom.padding = 0.7,   left.padding = 0.5,   right.padding = 0.1,   add.axes = FALSE,   abline.h = NULL,   abline.v = NULL,   abline.lty = NULL,   abline.lwd = NULL,   abline.col = 'black',   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   add.text = FALSE,    text.labels = NULL,    text.x = NULL,    text.y = NULL,    text.anchor = \"centre\",    text.col = \"black\",    text.cex = 1,         text.fontface = \"bold\",   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',         use.legacy.settings = FALSE,   inside.legend.auto = FALSE   );"},{"path":"/reference/create.densityplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a density plot — create.densityplot","text":"x list vectors, plotted separate curve final plot filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 2 xlab.label label x-axis ylab.label label y-axis, defaults “Density” xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label type Plot type lty Line type cex Character expansion plotting symbol pch Plotting character col Point/line colour lwd Thickness width best-fit lines bandwidth Smoothing bandwidth, character string giving rule choose bandwidth ('nrd0', 'nrd', 'ucv', 'bcv', 'sj', 'sj-ste'). Passed base R function density. bandwidth.adjust Adjustment parameter bandwidth (bandwidth used bandwidth*bandwidth.adjust). Makes easy specify bandwidth proportion default. xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis tick labels, defaults 1 yaxis.cex Size x-axis tick labels, defaults 1 xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 xgrid.Vector listing x-axis grid lines drawn, defaults xat ygrid.Vector listing y-axis grid lines drawn, defaults yat key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. top.padding number giving top padding multiples lattice default bottom.padding number giving bottom padding multiples lattice default left.padding number giving left padding multiples lattice default right.padding number giving right padding multiples lattice default add.axes Allow axis lines turned abline.h Specify superimposed horizontal line(s) abline.v Specify superimposed vertical line(s) abline.lty Specify superimposed line type abline.lwd Specify superimposed line width abline.col Specify superimposed line colour (defaults black) add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.anchor Part text anchored x/y coordinates. Defaults 'centre'. Use 'left' 'right' left right-align text. text.col colour additional text text.cex size additional text text.fontface fontface additional text height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL. style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function","code":""},{"path":"/reference/create.densityplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a density plot — create.densityplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.densityplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a density plot — create.densityplot","text":"Paul C. Boutros","code":""},{"path":"/reference/create.densityplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a density plot — create.densityplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.densityplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a density plot — create.densityplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = rnorm(1000),     y = rnorm(1000, mean = 3, sd = 3)     );  create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Simple', fileext = '.tiff'),     x = simple.data,     main = 'Simple',     description = 'Barplot created by BoutrosLab.plotting.general'     );   # format data format.data <- microarray[1:3,1:58]; format.data <- as.data.frame(t(format.data));  # Minimal Input create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Minimal_Input', fileext = '.tiff'),     x = format.data,     main = 'Minimal input',     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Line type create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Line_Type', fileext = '.tiff'),     x = format.data,     main = 'Line type',     # Line type     lty = c('solid','dashed','dotted'),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Axes & Labels create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Axes_Labels', fileext = '.tiff'),     x = format.data,     main = 'Axes & labels',     lty = c('solid','dashed','dotted'),     # Axes & Labels     ylimits = c(-0.1, 2.5),     ylab.cex = 1.5,     xat = seq(0, 13, 1),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 50     );   # \\donttest{ # Colour change & Legend create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Colour_Legend', fileext = '.tiff'),     x = format.data,     main = 'Colour & legend',     lty = c('solid','dashed','dotted'),     ylimits = c(-0.1, 2.5),     ylab.cex = 1.5,     # Colours     col = default.colours(3),     # Legend     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 21,                         cex = 1.5,                         fill = default.colours(3)                         ),                     text = list(                         lab = colnames(format.data)                         ),                     padding.text = c(0,5,0),                     cex = 1                     )                 ),             x = 0.65,             y = 0.97,             draw = FALSE             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Correlation key create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Correlation_Key', fileext = '.tiff'),     x = format.data[,1:2],     main = 'Correlation key',     lty = c('solid','dotted'),     ylimits = c(-0.1, 2.5),     ylab.cex = 1.5,     col = default.colours(2),     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(2),                         pch = 21,                         cex = 1.5,                         fill = default.colours(2)                         ),                     text = list(                         lab = colnames(format.data)[1:2]                         ),                     padding.text = c(0,5,0),                     cex = 1                     )                 ),             x = 0.65,             y = 0.97,             draw = FALSE             ),         # Correlation key accepts two vectors         inside = list(             fun = draw.key,             args = list(                 key = get.corr.key(                     x = as.numeric(format.data[,1]),                     y = as.numeric(format.data[,2]),                     label.items = c('pearson','beta1'),                     alpha.background = 1,                     key.cex = 1.2                     )                 ),             x = 0.65,             y = 0.85,             corner = c(0,1)             )         ),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Gridlines create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Gridlines_1', fileext = '.tiff'),     x = format.data,     main = 'Gridlines',     lty = c('solid','dashed','dotted'),     ylimits = c(-0.1, 2.5),     ylab.cex = 1.5,     col = default.colours(3),     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 21,                         cex = 1.5,                         fill = default.colours(3)                         ),                     text = list(                         lab = colnames(format.data)                         ),                     padding.text = c(0,5,0),                     cex = 1                     )                 ),             x = 0.65,             y = 0.97,             draw = FALSE             )         ),     # Grid lines     type = c('l','g'),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Gridlines create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Gridlines_2', fileext = '.tiff'),     x = format.data,     main = 'Gridlines',     lty = c('solid','dashed','dotted'),     ylimits = c(-0.1, 2.5),     ylab.cex = 1.5,     col = default.colours(3),     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 21,                         cex = 1.5,                         fill = default.colours(3)                         ),                     text = list(                         lab = colnames(format.data)                         ),                     padding.text = c(0,5,0),                     cex = 1                     )                 ),             x = 0.65,             y = 0.97,             draw = FALSE             )         ),     # Grid lines     type = c('l','g'),     xgrid.at = seq(0,14,1),     ygrid.at = seq(0,2.5,0.25),     description = 'Barplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature style create.densityplot(     # filename = tempfile(pattern = 'Densityplot_Nature_style', fileext = '.tiff'),     x = format.data,     main = 'Nature style',     lty = c('solid','dashed','dotted'),     ylimits = c(-0.1, 2.5),     ylab.cex = 1.5,     xlab.cex = 1.5,     col = default.colours(3),     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 21,                         cex = 1.5,                         fill = default.colours(3)                         ),                     text = list(                         lab = colnames(format.data)                         ),                     padding.text = c(0,5,0),                     cex = 1                     )                 ),             x = 0.65,             y = 0.97,             draw = FALSE             )         ),     # Grid lines     style = 'Nature',      # demonstrating how to italicize character variables     ylab.lab = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.lab = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),     resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.  # }"},{"path":"/reference/create.dotmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dotmap with coloured background — create.dotmap","title":"Make a dotmap with coloured background — create.dotmap","text":"Takes two data.frames creates dotmap coloured background. dotmap ordered array evenly-spaced dots whose size colour can user-specified represent characteristics. example, size gives absolute magnitude correlation colour gives sign correlation. coloured background may indicate p-values.","code":""},{"path":"/reference/create.dotmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dotmap with coloured background — create.dotmap","text":"","code":"create.dotmap(   x,    bg.data = NULL,    filename = NULL,    main = NULL,    main.just = \"center\",    main.x = 0.5,    main.y = 0.5,    pch = 19,    pch.border.col = 'black',    add.grid = TRUE,    xaxis.lab = colnames(x),    yaxis.lab = rownames(x),    xaxis.rot = 0,    yaxis.rot = 0,    main.cex = 3,    xlab.cex = 2,    ylab.cex = 2,    xlab.label = NULL,    ylab.label = NULL,    xlab.col = 'black',    ylab.col = 'black',    xlab.top.label = NULL,   xlab.top.cex = 2,    xlab.top.col = 'black',    xlab.top.just = \"center\",   xlab.top.x = 0.5,    xlab.top.y = 0,    xaxis.cex = 1.5,    yaxis.cex = 1.5,    xaxis.col = 'black',    yaxis.col = 'black',    xaxis.tck = 1,    yaxis.tck = 1,    axis.top = 1,    axis.bottom = 1,    axis.left = 1,    axis.right = 1,    top.padding = 0.1,    bottom.padding = 0.7,    right.padding = 0.1,    left.padding = 0.5,    key.ylab.padding = 0.1,   key = list(text = list(lab = c(''))),    legend = NULL,    col.lwd = 1.5,    row.lwd = 1.5,    spot.size.function = 'default',    spot.colour.function = 'default',    na.spot.size = 7,    na.pch = 4,    na.spot.size.colour = 'black',   grid.colour = NULL,    colour.scheme = 'white',    total.colours = 99,    at = NULL,    colour.centering.value = 0,    colourkey = FALSE,    colourkey.labels.at = NULL,    colourkey.labels = NULL,    colourkey.cex = 1,   colour.alpha = 1,    bg.alpha = 0.5,    fill.colour = 'white',    key.top = 0.1,    height = 6,    width = 6,    size.units = 'in',    resolution = 1600,    enable.warnings = FALSE,    col.colour = 'black',    row.colour = 'black',    description = 'Created with BoutrosLab.plotting.general',   add.rectangle = FALSE,    xleft.rectangle = NULL,    ybottom.rectangle = NULL,    xright.rectangle = NULL,    ytop.rectangle = NULL,    col.rectangle = 'transparent',    border.rectangle = NULL,   lwd.rectangle = NULL,   alpha.rectangle = 1,   xaxis.fontface = 'bold',    yaxis.fontface = 'bold',    dot.colour.scheme = NULL,    style = 'BoutrosLab',   preload.default = 'custom',         use.legacy.settings = FALSE,   remove.symmetric = FALSE,         lwd = 2 );"},{"path":"/reference/create.dotmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dotmap with coloured background — create.dotmap","text":"x unstacked data.frame plot dotmap bg.data unstacked data.frame plot background, size “x”. Column names specified may arbitrary: used plot. filename Filename tiff output, NULL returns trellis object pch Plotting character pch.border.col Colour dot border using pch = 21:25 add.grid grid black-lines separating column/row added? main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 xlab.label label x-axis ylab.label label y-axis xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label main.cex Size text main title, defaults 2 xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xaxis.lab Vector listing x-axis tick labels, defaults colnames(x) yaxis.lab Vector listing y-axis tick labels, defaults rownames(x) xaxis.cex Size x-axis tick labels, defaults 1.2 yaxis.cex Size y-axis tick labels, defaults 1.5 xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 axis.top Specifies padding top plot axis.bottom Specifies padding bottom plot axis.left Specifies padding left plot axis.right Specifies padding right plot top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.7 right.padding number specifying distance right margin, defaults 0.1 left.padding number specifying distance left margin, defaults 0.5 key.ylab.padding number specifying distance key left label key list giving key (legend). default suppresses drawing. key “space” component extra space cleared side plot key legend Add legend plot. Helpful adding multiple keys adding keys margins plot. See xyplot. col.lwd Thickness column grid lines row.lwd Thickness row grid lines spot.size.function function translates values x dotmap spot-size. default 0.1 + (2 * abs(x)) spot.colour.function function translates values x dotmap spot-colour. default gives negative values blue, positive values red, zero white. Parameter also accepts 'columns' 'rows', groups dot colours columns rows (), respectively. column/row grouping, 12 unique colours colours start repeat 12 columns/rows. na.spot.size size plotting character NA cells. Defaults 7. na.pch type plotting character represent NA cells. Defaults 4 ('X'). na.spot.size.colour Colour plotting character representing NA cells. Defaults black. grid.colour colour grid lines. DEPRECATED colour.scheme Background colouring. Accepts vector colours. Vectors two three colours gradiated create final palette. Defaults “white”. total.colours Total number colours plot Background colours vector specifying breakpoints along range bg; interval specified breakpoints assigned colour palette. Defaults NULL, corresponds range bg divided total.colours equally spaced intervals. bg values outside range specified “”, values shown colours corresponding extreme ends colour spectrum warning given. colour.centering.value center background key colourkey Determines colour key added sets formatting. Defaults FALSE. colourkey.labels.vector specifying tick-positions background colourkey colourkey.labels vector specifying tick-labels background colourkey colourkey.cex Size background colourkey label text colour.alpha Bias added background colour selection (uses x^colour.alpha mapping) bg.alpha alpha value background colours, defaults 0.5 background compete dot colours attention. fill.colour background fill colour (exposed missing values present). Defaults white. NOTE: change colour, may want set bg.alpha 1 avoid fill colour showing key.top number specifying distance top key, defaults 0.1 height Figure height size.units width Figure width size.units size.units Units size figure resolution Figure resolution dpi enable.warnings Print warnings set TRUE, defaults FALSE col.colour colour column grid lines, defaults “black”. Can vector. row.colour colour row grid lines, defaults “black”. Can vector. description Description image/plot; default NULL. add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x ooordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn border.rectangle Specifies colour rectangle border lwd.rectangle Specifies thickness rectangle border xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales dot.colour.scheme Colour Scheme dots style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) remove.symmetric boolean set whether remove top left half symettrically sized matrix lwd line width axis lines","code":""},{"path":"/reference/create.dotmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a dotmap with coloured background — create.dotmap","text":"nice library suitable spot.size spot.colour functions.","code":"Earlier ideas included:      (1) Changing the dot shape to triangles, so that upward or downward-pointing dots indicated direction of change. This would allow dot colour to be used to encode something else. This idea was not used because in the case of very small dots, the direction of the triangle might not be visible.      (2) Adding arrows above or below dots to indicate direction of change. This idea was not used because there may not always be enough space present to add such arrows.      (3) Adding line(s) in the background set at different angles to show data. This was found to be not intuitive to read.  A future addition may be to add the option of outlining boxes instead of adding a background. This would be applicable in cases where there is very little background space, and consequently, the background colour would not be very visible."},{"path":"/reference/create.dotmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dotmap with coloured background — create.dotmap","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.dotmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a dotmap with coloured background — create.dotmap","text":"Paul C. Boutros","code":""},{"path":"/reference/create.dotmap.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a dotmap with coloured background — create.dotmap","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.dotmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a dotmap with coloured background — create.dotmap","text":"","code":"set.seed(12345); simple.data <- data.frame(     'A' = runif(n = 15, min = -1, max = 1),     'B' = runif(n = 15, min = -1, max = 1),     'C' = runif(n = 15, min = -1, max = 1),     'D' = runif(n = 15, min = -1, max = 1),     'E' = runif(n = 15, min = -1, max = 1)     );  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Simple', fileext = '.tiff'),     x = simple.data,     main = 'Simple',     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 100     );   # create a function to determine the spot sizes (default function works best with values < 1) spot.size.med <- function(x) {abs(x)/3;}  # Minimal Input create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Minimal_Input', fileext = '.tiff'),     x = microarray[1:5,1:5],     main = 'Minimal input',     spot.size.function = spot.size.med,     xaxis.rot = 90,     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 100     );   # Axes & Labels spot.size.small <- function(x) {abs(x)/5;}  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Axes_Labels', fileext = '.tiff'),     x = microarray[1:15,1:15],     main = 'Axes & labels',     spot.size.function = spot.size.small,     # Adjusting the font sizes and labels     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 100     );   # Legend key.sizes <- seq(2,12,2);  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Legend', fileext = '.tiff'),     x = microarray[1:15,1:15],     main = 'Legend',     spot.size.function = spot.size.small,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     # Legend for dots     key = list(         space = 'right',         points = list(             cex = spot.size.small(key.sizes),             col = default.colours(2, palette.type = 'dotmap')[2],             pch = 19             ),         text = list(             lab = as.character(key.sizes),             cex = 1,             adj = 1             ),         padding.text = 3,         background = 'white'         ),     key.top = 1,     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Cluster by dots and add dendrogram plot.data <- microarray[1:15,1:15];  # cluster data clustered.data <- diana(plot.data);  # order data by cluster plot.data <- plot.data[clustered.data$order,];  # create dendogram dendrogram.data <- create.dendrogram(x = plot.data, clustering.method = 'diana',   cluster.dimension = 'row');  dendrogram.grob <- latticeExtra::dendrogramGrob(         x = dendrogram.data,         side = 'right',         type = 'rectangle'         );  # create dotmap create.dotmap(     x = plot.data,     # filename = tempfile(pattern = 'Dotmap_clustered_dendrogram', fileext = '.tiff'),     main = 'Clustered & dendrogram',     spot.size.function = spot.size.small,     # Adjusting the font sizes and labels     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     legend = list(         right = list(fun = dendrogram.grob)         ),     right.padding = 4,     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 100     );   # Add background data key.sizes <- c(-1, 1);  CNA.colour.function <- function(x){     colours <- rep('white', length(x));     colours[sign(x) == 1] <- 'Red';     colours[sign(x) == -1] <- 'Blue';     colours[x == 0] <- 'transparent';     return(colours);     }  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_with_Background', fileext = '.tiff'),     # added new data for the dots     x = CNA[1:15,1:15],     # Moving the dot-data to be background data     bg.data = microarray[1:15,1:15],     colour.scheme = c('white','black'),     main = 'Background',     spot.size.function = 1,     spot.colour.function = CNA.colour.function,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     key = list(         space = 'right',         points = list(             cex = 1,             col = CNA.colour.function(key.sizes),             pch = 19             ),         text = list(             lab = c('Gain', 'Loss'),             cex = 1,             adj = 1             ),         title = 'CNA',         padding.text = 2,         background = 'white'         ),     # Adding colourkey for background data     colourkey = TRUE,     key.top = 1,     description = 'Dotmap created by BoutrosLab.plotting.general',     resolution = 200     );   # Discrete background colours create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Discrete_Background', fileext = '.tiff'),     x = CNA[1:15,1:15],     bg.data = microarray[1:15,1:15],     main = 'Discrete background',     spot.size.function = 1,     spot.colour.function = CNA.colour.function,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     key = list(         space = 'right',         points = list(             cex = 1,             col = CNA.colour.function(key.sizes),             pch = 19             ),         text = list(             lab = c('Gain', 'Loss'),             cex = 1,             adj = 1             ),         title = 'CNA',         padding.text = 2,         background = 'white'         ),     colourkey = TRUE,     key.top = 1,     # Changing background colour scheme     colour.scheme = c('lightyellow','gold','darkorange', 'darkorange3'),     at = seq(0,12,3),     colourkey.labels = seq(0,12,3),     colourkey.labels.at = seq(0,12,3),     bg.alpha = 0.65,     description = 'Dotmap created by BoutrosLab.plotting.general'     );   # Dot outlines border.colours <- function(x){     colours <- rep('transparent', length(x));     colours[x > 0] <- 'black';     colours[x == 0] <- 'transparent';     return(colours);     }  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Outlined_Dots', fileext = '.tiff'),     x = CNA[1:15,1:15],     bg.data = microarray[1:15,1:15],     main = 'Dot outlines',     spot.size.function = 1,     spot.colour.function = CNA.colour.function,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     key = list(         space = 'right',         points = list(             cex = 1,             col = 'black',             # Remember to also change the pch in the legend             pch = 21,             fill = CNA.colour.function(key.sizes)             ),         text = list(             lab = c('Gain', 'Loss'),             cex = 1,             adj = 1             ),         title = 'CNA',         padding.text = 2,         background = 'white'         ),     colourkey = TRUE,     key.top = 1,     colour.scheme = c('lightyellow','gold','darkorange', 'darkorange3'),     at = seq(0,12,3),     colourkey.labels = seq(0,12,3),     colourkey.labels.at = seq(0,12,3),     bg.alpha = 0.65,     # Change the plotting character to one which has an outline     pch = 21,     pch.border.col = border.colours(CNA[1:15,1:15]),     description = 'Dotmap created by BoutrosLab.plotting.general'     );   # Covariates & Legend sex.colours <- patient$sex[1:15]; sex.colours[sex.colours == 'male'] <- 'dodgerblue'; sex.colours[sex.colours == 'female'] <- 'pink';  sample.covariate <- list(     rect = list(         col = 'black',         fill = sex.colours,         lwd = 1.5         )     );  cov.grob <- covariates.grob(     covariates = sample.covariate,     ord = c(1:15),     side = 'top'     );  sample.cov.legend <- list(     legend = list(         colours = c('dodgerblue', 'pink'),         labels = c('male','female'),         title = 'Sex'         )     );  cov.legend <- legend.grob(     legends = sample.cov.legend     ); #> Warning: 'x' is NULL so the result will be NULL  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Covariates', fileext = '.tiff'),     x = CNA[1:15,1:15],     bg.data = microarray[1:15,1:15],     main = 'Covariates',     spot.size.function = 1,     spot.colour.function = CNA.colour.function,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     key = list(         space = 'right',         points = list(             cex = 1,             col = 'black',             pch = 21,             fill = CNA.colour.function(key.sizes)             ),         text = list(             lab = c('Gain', 'Loss'),             cex = 1,             adj = 1             ),         title = 'CNA',         padding.text = 2,         background = 'white'         ),     colourkey = TRUE,     key.top = 1,     colour.scheme = c('lightyellow','gold','darkorange', 'darkorange3'),     at = seq(0,12,3),     colourkey.labels = seq(0,12,3),     colourkey.labels.at = seq(0,12,3),     bg.alpha = 0.65,     pch = 21,     pch.border.col = border.colours(CNA[1:15,1:15]),     # Insert covariates & legend     legend = list(         top = list(             fun = cov.grob             ),         left = list(              fun = cov.legend             )         ),     description = 'Dotmap created by BoutrosLab.plotting.general'     );   # Side covariates with label chr.cov.colours <- microarray$Chr; chr.cov.colours[microarray$Chr == 1] <- default.colours(3, palette.type = 'chromosomes')[1]; chr.cov.colours[microarray$Chr == 2] <- default.colours(3, palette.type = 'chromosomes')[2]; chr.cov.colours[microarray$Chr == 3] <- default.colours(3, palette.type = 'chromosomes')[3];  chr.covariate <- list(     rect = list(         col = 'white',         fill = chr.cov.colours,         lwd = 1.5         )     );  chr.cov.grob <- covariates.grob(     covariates = chr.covariate,     ord = c(1:15),     side = 'right'     );  # create dot legend dot.grob <- draw.key(     list(         space = 'right',          points = list(                 cex = 1,                 col = 'black',                 pch = 21,                 fill = CNA.colour.function(key.sizes)                 ),             text = list(                 lab = c('Gain', 'Loss'),                 cex = 1,                 adj = 1                 ),             title = 'CNA',             padding.text = 2,             background = 'white'         )     );  # Setting up the layout for the joint legends right.layout <- grid.layout(     nrow = 1,     ncol = 2,     width = unit(         x = c(0,1),         units = rep('lines',2)         ),     heights = unit(         x = c(1,1),         units = rep('npc', 1)         )     );  right.grob <- frameGrob(layout = right.layout);  right.grob <- packGrob(     frame = right.grob,     grob = chr.cov.grob,     row = 1,     col = 1     );  right.grob <- packGrob(     frame = right.grob,     grob = dot.grob,     row = 1,     col = 2     );  temp <- create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Covariates_Side', fileext = '.tiff'),     x = CNA[1:15,1:15],     bg.data = microarray[1:15,1:15],     main = 'Both covariates',     spot.size.function = 1,     spot.colour.function = CNA.colour.function,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.label = 'Sample',     ylab.label = 'Gene',     xlab.cex = 1,     ylab.cex = 1,     colourkey = TRUE,     key.top = 1,     colour.scheme = c('lightyellow','gold','darkorange', 'darkorange3'),     at = seq(0,12,3),     colourkey.labels = seq(0,12,3),     colourkey.labels.at = seq(0,12,3),     bg.alpha = 0.65,     pch = 21,     pch.border.col = border.colours(CNA[1:15,1:15]),     # insert covariates & legend     legend = list(         right = list(             fun = right.grob             )         ),     description = 'Dotmap created by BoutrosLab.plotting.general'     );  # add side label to covariate print(temp, position = c(0,0,1,1), more = TRUE);  draw.key(     key = list(         text = list(             lab = 'Covariate Label',             cex = 1,             adj = 1             )         ),     # position label on the plot     vp = viewport(x = 0.86, y = 0.155, height = 1, width = 0.5, angle = 90),     draw = TRUE     );  #> frame[plot_01.key.frame]   dev.off(); #> null device  #>           1   # Nature style create.dotmap(     # filename = tempfile(pattern = 'Dotmap_Nature_style', fileext = '.tiff'),     x = CNA[1:15,1:15],     bg.data = microarray[1:15,1:15],     main = 'Nature style',     spot.size.function = 1,     spot.colour.function = CNA.colour.function,     xaxis.cex = 0.8,     yaxis.cex = 0.8,     xaxis.lab = 1:15,     xlab.cex = 1,     ylab.cex = 1,     key = list(         space = 'right',         points = list(             cex = 1,             col = 'black',             # Remember to also change the pch in the legend             pch = 21,             fill = CNA.colour.function(key.sizes)             ),         text = list(             lab = c('Gain', 'Loss'),             cex = 1,             adj = 1             ),         title = 'CNA',         padding.text = 2,         background = 'white'         ),     colourkey = TRUE,     key.top = 1,     colour.scheme = c('lightyellow','gold','darkorange', 'darkorange3'),     at = seq(0,12,3),     colourkey.labels = seq(0,12,3),     colourkey.labels.at = seq(0,12,3),     bg.alpha = 0.65,     # Change the plotting character to one which has an outline     pch = 21,     pch.border.col = border.colours(CNA[1:15,1:15]),      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.lab = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.lab = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),          resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend  simple.data.sym <- data.frame(     '1' = runif(n = 7, min = -1, max = 1),     '2' = runif(n = 7, min = -1, max = 1),     '3' = runif(n = 7, min = -1, max = 1),     '4' = runif(n = 7, min = -1, max = 1),     '5' = runif(n = 7, min = -1, max = 1),     '6' = runif(n = 7, min = -1, max = 1),     '7' = runif(n = 7, min = -1, max = 1)     );  create.dotmap(     # filename = tempfile(pattern = 'Dotmap_remove_symmetric', fileext = '.tiff'),     x = simple.data.sym,     main = 'Simple',     xaxis.lab = seq(1,7,1),     description = 'Dotmap created by BoutrosLab.plotting.general',     remove.symmetric = TRUE,     resolution = 200     );  # }"},{"path":"/reference/create.gif.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a gif — create.gif","title":"Make a gif — create.gif","text":"Takes function several sets parameters makes gif function calls","code":""},{"path":"/reference/create.gif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a gif — create.gif","text":"","code":"create.gif(   exec.func,   parameters,   number.of.frames,   delay = 40,   filename)"},{"path":"/reference/create.gif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a gif — create.gif","text":"exec.func function used make plots gif parameters Parameter list sent exec func frame number..frames Total number frames made (must match number parameter lists) delay Delay frame gif filename Name output file  (must end .gif)","code":""},{"path":"/reference/create.gif.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a gif — create.gif","text":"Jeffrey Green","code":""},{"path":[]},{"path":"/reference/create.gif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a gif — create.gif","text":"","code":"set.seed(223);  simple.data1 <- data.frame(     x = sample(1:15, 10),     y = LETTERS[1:10]     );  simple.data2 <- data.frame(     x = sample(1:15, 10),     y = LETTERS[1:10]     );  simple.data3 <- data.frame(     x = sample(1:15, 10),     y = LETTERS[1:10]     );  p = list(   list(formula = x ~ y,data = simple.data1, yat = seq(0,16,2)),   list(formula = x ~ y,data = simple.data2, yat = seq(0,16,2)),   list(formula = x ~ y,data = simple.data3, yat = seq(0,16,2))   )  create.gif(   exec.func = create.barplot,   parameters = p,   number.of.frames = 3,   delay = 20,   filename = tempfile(pattern = 'test', fileext = '.gif')   ) #> [1] TRUE TRUE TRUE"},{"path":"/reference/create.heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap — create.heatmap","title":"Make a heatmap — create.heatmap","text":"Takes data.frame creates heatmap","code":""},{"path":"/reference/create.heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap — create.heatmap","text":"","code":"create.heatmap(   x,   filename = NULL,   clustering.method = 'diana',   cluster.dimensions = 'both',   rows.distance.method = 'correlation',   cols.distance.method = 'correlation',   cor.method = 'pearson',   row.dendrogram = list(),   col.dendrogram = list(),   plot.dendrograms = 'both',   force.clustering = FALSE,   criteria.list = TRUE,   covariates = list(),   covariates.grid.row = NULL,   covariates.grid.col = NULL,   covariates.grid.border = NULL,   covariates.row.lines = NULL,   covariates.col.lines = NULL,   covariates.reorder.grid.index = FALSE,   covariates.padding = 0.25,   covariates.top = list(),   covariates.top.grid.row = NULL,   covariates.top.grid.col = NULL,   covariates.top.grid.border = NULL,   covariates.top.row.lines = NULL,   covariates.top.col.lines = NULL,   covariates.top.reorder.grid.index = FALSE,   covariates.top.padding = 0.25,   covariate.legends = list(),   legend.cex = 1,   legend.title.cex = 1,   legend.title.just = 'centre',   legend.title.fontface = 'bold',   legend.border = NULL,   legend.border.padding = 1,   legend.layout = NULL,   legend.between.col = 1,   legend.between.row = 1,   legend.side = 'left',   main = list(label = ''),   main.just = \"center\",   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   right.size.add = 1,   top.size.add = 1,   right.dendrogram.size = 2.5,   top.dendrogram.size = 2.5,   scale.data = FALSE,   yaxis.lab = NULL,   xaxis.lab = NULL,   xaxis.lab.top = NULL,   xaxis.cex = 1.5,   xaxis.top.cex = NULL,   yaxis.cex = 1.5,   xlab.cex = 2,   ylab.cex = 2,   xlab.top.label = NULL,         xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = \"center\",   xlab.top.x = 0.5,   xlab.top.y = 0,   xat = TRUE,   xat.top = NULL,   yat = TRUE,   xaxis.tck = NULL,   xaxis.top.tck = NULL,   yaxis.tck = NULL,   xaxis.col = 'black',   yaxis.col = 'black',   col.pos = NULL,   row.pos = NULL,   cell.text = '',   text.fontface = 1,   text.cex = 1,   text.col = 'black',   text.position = NULL,   text.offset = 0,   text.use.grid.coordinates = TRUE,   colourkey.cex = 3.6,   xaxis.rot = 90,   xaxis.rot.top = 90,   yaxis.rot = 0,   xlab.label = '' ,   ylab.label = '',   xlab.col = 'black',   ylab.col = 'black',   axes.lwd = 2,   gridline.order = 'h',   grid.row = FALSE,   grid.col = FALSE,   force.grid.row = FALSE,   force.grid.col = FALSE,   grid.limit = 50,   row.lines = seq(0, ncol(x), 1) + 0.5,   col.lines = seq(0, nrow(x), 1) + 0.5,   colour.scheme = c(),   total.colours = 99,   colour.centering.value = 0,   colour.alpha = 1,   fill.colour = 'darkgray',   at = NULL,   print.colour.key = TRUE,   colourkey.labels.at = NULL,   colourkey.labels = NULL,   top.padding = 0.1,   bottom.padding = 0.5,   right.padding = 0.5,   left.padding = 0.5,   x.alternating = 1,   shrink = 1,   row.colour = 'black',   col.colour = 'black',   row.lwd = 1,   col.lwd = 1,   grid.colour = NULL,   grid.lwd = NULL,   width = 6,   height = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   xaxis.covariates = NULL,   xaxis.covariates.y = 0,   yaxis.covariates = NULL,   yaxis.covariates.x = NULL,   description = 'Created with BoutrosLab.plotting.general',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   symbols = list(borders = NULL,   squares = NULL,   circles = NULL),   same.as.matrix = FALSE,   input.colours = FALSE,   axis.xlab.padding = 0.1,   stratified.clusters.rows = NULL,   stratified.clusters.cols = NULL,         inside.legend = NULL,   style = 'BoutrosLab',   preload.default = 'custom',         use.legacy.settings = FALSE );"},{"path":"/reference/create.heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap — create.heatmap","text":"x Either data-frame matrix heatmap created filename Filename tiff output, NULL returns trellis object clustering.method Method used cluster records -- “none” gives unclustered data. Accepts agglomerative clustering methods available hclust, plus “diana” (divisive). cluster.dimensions clustering performed rows, columns, -- supersedes setting plot.dendrograms rows.distance.method Method name distance measure rows used clustering. Defaults “correlation”. supported methods ?dist. Also supports “jaccard” useful clustering categorical variables.  “euclidean” sometimes robust ties cause “Unclusterable matrix: col-distances null” errors.  Note, rows cols switched due internal transposition data. cols.distance.method Method name distance measure columns used clustering. Defaults “correlation”. supported methods ?dist. Also supports “jaccard” useful clustering categorical variables. “euclidean” sometimes robust ties cause “Unclusterable matrix: col-distances null” errors.  Note, rows cols switched due internal transposition data. cor.method method used calculating correlation. Defaults “pearson” row.dendrogram dendrogram object corresponding heatmap rows. provided, row clustering performed col.dendrogram dendrogram object corresponding heatmap columns. provided, column clustering performed plot.dendrograms clustering performed dendrograms provided, dendrograms plotted -- “none”, “right”, “top”, “” force.clustering Binary -ride control prevents clustering -large matrices criteria.list vector indicating rows retained covariates row-wise covariate annotate add plot, fully formed list (placed right side plot) covariates.grid.row list parameters passed gpar specifying behaviour row lines right covariate bars covariates.grid.col list parameters passed gpar specifying behaviour column lines right covariate bars covariates.grid.border list parameters passed gpar specifying behaviour border around right covariate bars covariates.row.lines Vector row indices grid lines drawn right covariate bars. NULL (default), row lines drawn. Ignored covariates.grid.row specified covariates.col.lines Vector column indices grid lines drawn right covariate bars. NULL (default), column lines drawn. Ignored covariates.grid.col specified covariates.reorder.grid.index Boolean specifying whether grid line indices right covariate bars re-ordered clustering covariates.padding Amount empty space (“lines”) place right covariate bars dendrogram covariates.top column-wise covariate annotate add plot, fully formed list covariates.top.grid.row list parameters passed gpar specifying behaviour row lines top covariate bars covariates.top.grid.col list parameters passed gpar specifying behaviour column lines top covariate bars covariates.top.grid.border list parameters passed gpar specifying behaviour border around top covariate bars covariates.top.row.lines Vector row indices grid lines drawn top covariate bars. NULL (default), row lines drawn. Ignored covariates.top.grid.row specified covariates.top.col.lines Vector column indices grid lines drawn top covariate bars. NULL (default), column lines drawn. Ignored covariates.top.grid.col specified covariates.top.reorder.grid.index Boolean specifying whether grid line indices top covariate bars re-ordered clustering covariates.top.padding Amount empty space (“lines”) place top covariate bars dendrogram covariate.legends list defining covariate legends add plot. See legends argument legend.grob information legend.cex Size text labels covariate legends, defaults 1 legend.title.cex Size title text covariate legends, defaults 1 legend.title.just Justification title text covariate legends, defaults “centre” legend.title.fontface Font face title text covariate legends -- “plain”, “bold”, “italic”, etc. legend.border list parameters passed gpar specifying line options legend border, defaults NULL (border drawn) legend.border.padding amount empty space (split equally sides) add legend border, “lines” units legend.layout Numeric vector length 2 specifying number columns rows legend layout, defaults logical layout based legend.side legend..col Amount space add columns layout, “lines” units legend..row Amount space add rows layout, “lines” units legend.side Side plot legends drawn -- “left”, “right”, “top” main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 2.5 right.size.add size extra covariate row right dendrogram units “lines” top.size.add size extra covariate row top dendrogram units “lines” right.dendrogram.size Size right dendrogram top.dendrogram.size Size top dendrogram scale.data TRUE/FALSE row-wise scaling mean-centering sd-scaling xaxis.lab vector row labels, NA = use existing rownames, NULL = none xaxis.lab.top label top x-axis. Required want print top ** bottom xaxis, otherwise use x.alternating = 2 top axis . Defaults NULL yaxis.lab vector col labels, NA = use existing colnames, NULL = none xaxis.cex Size x-axis label text - defaults values found look-table xaxis.top.cex Size top x axis label text yaxis.cex Size y-axis label text - defaults values found look-table xaxis.rot Rotation x-axis tick labels; defaults 90 xaxis.rot.top Rotation top x-axis tick labels; defaults 90 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xlab.label label x-axis ylab.label label y-axis xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xat Vector listing x-axis labels drawn, defaults automatic xat.top Vector listing x-axis labels drawn top plot. Required want bottom top axis, otherwise use x.alternating = 2, get top axis . Defaults NULL yat Vector listing y-axis labels drawn, defaults automatic xaxis.tck Size x-axis tick marks. Defaults NULL intelligent choice based covariate size. xaxis.top.tck Size top x-axis tick marks. Defaults NULL intelligent choice based covariate size. yaxis.tck Size y-axis tick marks. Defaults NULL intelligent choice based covariate size. col.pos Vector column positions adding text cell, defaults NULL row.pos Vector row positions adding text cell, defaults NULL cell.text Text add cell, defaults empty string text.fontface 1 = Plain, 2 = Bold, 3 = Italic, default 1 text.cex Text size, default 1 text.col Text colour, default black. text.position position text, defaults center. text.offset offset position, defaults 0. text.use.grid.coordinates Indetifier grid coordinates npc coordinates used colourkey.cex Size colourkey label text axes.lwd Width heatmap border. Note also changes colourkey border ticks gridline.order Character specifying order draw interior grid-lines ('h' 'v'). Defaults 'h' horizontal first. grid.row Allow turning interior grid-lines. Default FALSE grid.col Allow turning interior grid-lines. Default FALSE force.grid.row Overrides default behaviour turning grid lines number rows exceed grid.limit. Defaults FALSE force.grid.col Overrides default behaviour turning grid lines number columns exceed grid.limit. Defaults FALSE grid.limit Limit set turn column row lines data size exceeds . Defaults 50 row.lines Vector specifying location lines, default seq(1, ncol(x), 1) + 0.5. Note: Add 0.5 customized vector col.lines Vector specifying location lines, default seq(1, nrow(x), 1) + 0.5. Note: Add 0.5 customized vector colour.scheme Heatmap colouring. Accepts old-style themes, vector either two three colours gradiated create final palette. total.colours Total number colours plot colour.centering.value center colour-map colour.alpha Bias added colour selection (uses x^colour.alpha mapping). Set “automatic” auto-adjustment. fill.colour background fill (exposed missing values present print.colour.key colour key printed ? vector specifying breakpoints along range x; interval specified breakpoints assigned colour palette. Defaults NULL, corresponds range x divided total.colours equally spaced intervals. x values outside range specified “” values shown colours corresponding extreme ends colour spectrum warning given. colourkey.labels.vector specifying tick-positions colourkey colourkey.labels vector specifying tick-labels colourkey top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.5 right.padding number specifying distance right margin, defaults 0.5 left.padding number specifying distance left margin, defaults 0.5 x.alternating value specifying position col names, defaults 1. 1 means graph, 2 means graph. Use 3 get tick marks graph, still need specify xat.top xaxis.lab.top get values shrink Allows rectangles scaled, defaults 1 row.colour Interior grid-line colour, defaults “black”. Can vector col.colour Interior grid-line colour, defaults “black”. Can vector row.lwd Interior grid-line width, defaults 1. Setting zero equivalent grid.row = FALSE grid.col = FALSE.  Can vector. col.lwd Interior grid-line width, defaults 1. Setting zero equivalent grid.row = FALSE grid.col = FALSE.  Can vector. grid.colour Interior grid-line colour, defaults “black”. Can vector.  Applies rows columns. DEPRECATED grid.lwd Interior grid-line width, defaults 1. Setting zero equivalent grid.row = FALSE grid.col = FALSE.  Applies rows columns. DEPRECATED width Figure width size.units height Figure height size.units size.units Units size figure resolution Figure resolution dpi enable.warnings Print warnings set TRUE, defaults FALSE xaxis.covariates column-wise covariate annotate add plot, fully formed list xaxis.covariates.y y coordinate location x axis covariates yaxis.covariates row-wise covariate annotate add plot, fully formed list yaxis.covariates.x x coordinate lcoation y axis covariates description Short description image/plot; default NULL. xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales symbols Extra symbols added (borders, squares circles) ..matrix Prevents flipping matrix function normally input.colours boolean expressing whether matrix specified using colours integer values. Defaults FALSE axis.xlab.padding Padding axis plot x label stratified.clusters.rows row locations rows combined strata stratified.clusters.cols column locations columns combined strata inside.legend legend specification inside legend/key heatmap style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font)","code":""},{"path":"/reference/create.heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap — create.heatmap","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.heatmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a heatmap — create.heatmap","text":"Paul C. Boutros","code":""},{"path":[]},{"path":"/reference/create.heatmap.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a heatmap — create.heatmap","text":"function called without capturing return value, specifying filename, may crash trying draw heatmap. particular, script uses call create heatmap called reading script command line, fail badly, error message unavailable fonts: Note much like able pass xaxis.cex yaxis.cex vectors length actual data-table. However lattice support , currently expects two-element vectors specify left/right top/bottom axes separately. raised bug report requesting enhancement, require API change ... sure happen. bug-report: https://r-forge.r-project.org/tracker/index.php?func=detail&aid=1702&group_id=638&atid=2567","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":"/reference/create.heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap — create.heatmap","text":"","code":"set.seed(12345); simple.data <- data.frame(     x <- rnorm(n = 15),     y <- rnorm(n = 15),     z <- rnorm(n = 15),     v <- rnorm(n = 15),     w <- rnorm(n = 15)     );  simple.1D.data <- data.frame(x = rnorm(n = 15));   create.heatmap(     # filename = tempfile(pattern = 'Heatmap_1D_Inside_Legend', fileext = '.tiff'),     x = simple.1D.data,     clustering.method='none',     inside.legend = list(fun = draw.key,         args = list(       key = list(                 text = list(                     lab = c('test','test','test','test'),                     cex = 1,                     fontface = 'bold'                     ),                 padding.text = 3,                 background = 'white',     alpha.background = 0                 )             ),         x = 0.5,         y = 0.5         ),     resolution = 100     )   create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Simple', fileext = '.tiff'),     x = simple.data,     main = 'Simple',     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 100     );   simple.data.col <- data.frame(     x <- c('blue','green','red','yellow','blue','red','black','white','purple','grey'),     y <- rep('red',10),     z <- rep('yellow',10),     v <- rep('green',10),     w <- rep('purple',10)     );  # Input Colours Provided create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Simple_Using_Colours', fileext = '.tiff'),     x = simple.data.col,     clustering.method = 'none',     input.colours = TRUE,     resolution = 100     );   # Single Input Colour Provided create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Simple_Using_Single_Colour', fileext = '.tiff'),     x = simple.data.col[, ncol(simple.data.col), drop = FALSE],     clustering.method = 'none',     input.colours = TRUE,     resolution = 100     );   # Minimal Input create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Minimal_Input', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Minimal input',     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 100     );   # Axes and labels create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Axes_Labels', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Axes & labels',     # Changing axes     xlab.label = 'Genes',     ylab.label = 'Samples',     # Turning on default row and column labels     xaxis.lab = NA,     yaxis.lab = 1:20,     # Adjusting font sizes     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     # Changing colourkey     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Custom Axes create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Custom_Axes', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Customized axes',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     # Specify where to place tick marks     colourkey.labels.at = c(3,4, 6, 7, 10, 11),     # Specify label colours (note: this is based on the pre-clustering order)     xaxis.col = c('black', 'red',rep('black',6), 'red','black', 'black','red',rep('black',8)),     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Two-sided Colour Scheme create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Colour_Scheme_1', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Colour scheme',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     # Changing the colours     colour.scheme = c('white','firebrick'),     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Three-sided Colour Scheme # Note: when using a three-sided colour scheme, it is advised to have two-sided data create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Colour_Scheme_2', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Colour scheme',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     # Changing the colours     colour.scheme = c('red','white','turquoise'),     # Scale the data to center around the mean     scale.data = TRUE,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Colour Alpha create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Colour_Alpha', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Colours alpha',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     # Adjusting the alpha value of the colours     colour.alpha = 'automatic',     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Clustering create.heatmap(     # filename = tempfile(pattern = 'Heatmap_No_Clustering', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'No clustering',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # Turning clustering off     clustering.method = 'none',     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Clustering create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Clustering_Methods', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Clustering methods',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # Clustering method defaults to 'diana', but can be set to other options     clustering.method = 'complete',     # Also setting the distance measures     rows.distance.method = 'euclidean',     cols.distance.method = 'manhattan',     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Stratified Clustering create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Stratified_Clustering', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Stratified clustering',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # Stratifying the clustering by rows     stratified.clusters.rows = list(c(1:10), c(11:20)),     # Adding line to show highlight the division between the two strata     grid.row = TRUE,     row.lines = 10.5,     row.lwd = 2,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Dendrogram provided col.dendrogram <- BoutrosLab.plotting.general::create.dendrogram(     x = microarray[1:20, 1:20],     cluster.dimension = 'col'     );  row.dendrogram <- BoutrosLab.plotting.general::create.dendrogram(     x = microarray[1:20, 1:20],     cluster.dimension = 'row'     );  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Dendrogram_Provided', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Dendrogram provided',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # note: row/column dendrograms are switched because the function inverts rows and columns     clustering.method = 'none',     row.dendrogram = col.dendrogram,     col.dendrogram = row.dendrogram,     # Adjusting the size of the dendrogram     right.dendrogram.size = 3,     top.dendrogram.size = 2.5,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Covariates and Legends # Note: covariates can also be added using the create.multiplot function # set the colour schemes for the covariates sex.colours <- patient$sex; sex.colours[sex.colours == 'male'] <- 'dodgerblue'; sex.colours[sex.colours == 'female'] <- 'pink';  stage.colours <- patient$stage; stage.colours[stage.colours == 'I'] <- 'plum1'; stage.colours[stage.colours == 'II'] <- 'orchid1'; stage.colours[stage.colours == 'III'] <- 'orchid3'; stage.colours[stage.colours == 'IV'] <- 'orchid4';  # create an object to draw the covariates from sample.covariate <- list(     rect = list(         col = 'black',         fill = sex.colours,         lwd = 1.5         ),     rect = list(         col = 'black',         fill = stage.colours,         lwd = 1.5         )     );  # create a legend for the covariates sample.cov.legend <- list(     legend = list(         colours = c('dodgerblue', 'pink'),         labels = c('male','female'),         title = 'Sex'         ),     legend = list(         colours = c('plum1', 'orchid1','orchid3', 'orchid4'),         labels = c('I','II', 'III', 'IV'),         title = 'Stage'         )     );  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Covariates_Simple', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Covariates',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # adding covariates and corresponding legend     covariates = sample.covariate,     covariate.legend = sample.cov.legend,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL   # Top covariate and legend customization chr.cov.colours <- microarray$Chr; chr.cov.colours[microarray$Chr == 1] <- default.colours(3, palette.type = 'chromosomes')[1]; chr.cov.colours[microarray$Chr == 2] <- default.colours(3, palette.type = 'chromosomes')[2]; chr.cov.colours[microarray$Chr == 3] <- default.colours(3, palette.type = 'chromosomes')[3];  chr.covariate <- list(     rect = list(         col = 'white',         fill = chr.cov.colours,         lwd = 1.5         )     );  # join covariate legends combo.cov.legend <- list(     legend = list(         colours = default.colours(3, palette.type = 'chromosomes'),         labels = c('1','2', '3'),         title = 'Chromosome',         border = 'white'         ),     legend = list(         colours = c('dodgerblue', 'pink'),         labels = c('male','female'),         title = 'Sex'         ),     legend = list(         colours = c('plum1', 'orchid1','orchid3', 'orchid4'),         labels = c('I','II', 'III', 'IV'),         title = 'Stage'         )     );  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Covariate_Legend_Custom', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Custom covariates & legend',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     clustering.method = 'none',     # side covariate     covariates = sample.covariate,     # top covariate and covariate border specification     covariates.top = chr.covariate,     covariate.legend = combo.cov.legend,     # making outline of border a matching green     covariates.top.grid.border = list(col = 'lightblue', lwd = 2),     # making certain column divisions a different colour     covariates.top.col.lines = c(5,6),     covariates.top.grid.col = list(col = 'blue', lwd = 2),     # legend customization     legend.side = c('right','left','top'),     legend.title.cex = 0.75,     legend.cex = 0.75,     legend.title.just = 'left',     legend.border = list(lwd = 1),     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL   # Custom gridlines  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Gridlines', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Gridlines',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # colouring gridlines     grid.row = TRUE,     grid.col = TRUE,     row.colour = 'white',     col.colour = 'white',     row.lwd = 1.5,     col.lwd = 1.5,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Label cells create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Labelled_Cells', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Labelled cells',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     grid.row = TRUE,     grid.col = TRUE,     row.colour = 'white',     col.colour = 'white',     row.lwd = 1.5,     col.lwd = 1.5,     clustering.method = 'none',     # conditionally labelling cells     # flipping rows and columns because the heatmap function does so     row.pos = which(microarray[1:20, 1:20] > 11, arr.ind = TRUE)[,2],     col.pos = which(microarray[1:20, 1:20] > 11, arr.ind = TRUE)[,1],     cell.text = microarray[1:20, 1:20][microarray[1:20, 1:20] > 11],     text.col = 'white',     text.cex = 0.65,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );  # Label cells create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Labelled_Cells_NPC', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Labelled cells',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     grid.row = TRUE,     grid.col = TRUE,     row.colour = 'white',     col.colour = 'white',     row.lwd = 1.5,     col.lwd = 1.5,     clustering.method = 'none',     text.use.grid.coordinates = FALSE,     # conditionally labelling cells     # flipping rows and columns because the heatmap function does so     cell.text = c(\"text1\",\"text2\"),     text.col = 'white',     text.cex = 0.65,     text.position = list(c(0.5,0.5),c(0.75,0.75)),     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Method 1 of adding symbols (very similar to how text is added) points <- microarray[1:20, 1:20][microarray[1:20, 1:20] > 11]; size.from <- range(points, na.rm = TRUE); size.to <- c(1,3); point.size <- (points - size.from[1])/diff(size.from) * diff(size.to) + size.to[1]; point.colour <- grey(runif(sum(microarray[1:20, 1:20] > 11), max = 0.5));  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Symbols_1', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Symbols',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     clustering.method = 'none',     # conditionally adding points to cells     # flipping rows and columns because the heatmap function does so     row.pos = which(microarray[1:20, 1:20] > 11, arr.ind = TRUE)[,2],     col.pos = which(microarray[1:20, 1:20] > 11, arr.ind = TRUE)[,1],     cell.text = rep(expression(\"\\u25CF\"), times = sum(microarray[1:20, 1:20] > 11)),     text.col = point.colour,     text.cex = point.size,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Method 2 of Adding Symbols # Create matrices to describe the symbols circle.matrix <- matrix(     nrow = 20,     ncol = 20,     data = FALSE     );  circle.colour.matrix <- matrix(     nrow = 20,     ncol = 20,     data = 'pink'     );  circle.size.matrix <- matrix(     nrow = 20,     ncol = 20,     data = 20     );  border.matrix <- matrix(     nrow = 20,     ncol = 20,     data = FALSE     );  border.colour.matrix <- matrix(     nrow = 20,     ncol = 20,     data = 'black'     );  border.size.matrix <- matrix(     nrow = 20,     ncol = 20,     data = 4     );  square.matrix <- matrix(     nrow = 20,     ncol = 20,     data = FALSE     );  square.colour.matrix <- matrix(     nrow = 20,     ncol = 20,     data = 'pink'     );  square.size.matrix <- matrix(     nrow = 20,     ncol = 20,     data = 10     );  # setting up the symbols symbol.locations <- list(     circles = list(         list(             x = circle.matrix,             col = circle.colour.matrix,             size = circle.size.matrix             )         ),     borders = list(         list(             x = border.matrix,             col = border.colour.matrix,             size = border.size.matrix             ),         # creating a border encompassing a larger area         list(             xright = 12.10,             xleft = 12,             ybottom = 1,             ytop = 20,             size = 4,             col = 'pink'             )         ),     squares = list(         list(             x = square.matrix,             col = square.colour.matrix,             size = square.size.matrix             )         )     );  # Set which items in the matrix will be shown  # symbol.locations$borders[[1]]$x <- FALSE; # symbol.locations$squares[[1]]$x <- FALSE; symbol.locations$circles[[1]]$x[which(microarray[1:20,1:20] > 11, arr.ind = TRUE)] <- TRUE;  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Symbols_2', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Symbols',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     clustering.method = 'none',     # adding symbols     symbols = symbol.locations,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Rotate matrix create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Rotated_Matrix', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Rotated matrix',     # Also flip labels     ylab.label = 'Genes',     xlab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = NA,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     grid.row = TRUE,     grid.col = TRUE,     row.colour = 'white',     col.colour = 'white',     row.lwd = 1.5,     col.lwd = 1.5,     # stop heatmap function from rotating matrix     same.as.matrix = TRUE,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Example of using discrete data discrete.data <- microarray[1:10,1:40]; # Looking for values greater than 10 discrete.data[which(discrete.data < 10, arr.ind = TRUE)] <- 0; discrete.data[which(discrete.data > 0, arr.ind = TRUE)] <- 1;  sex.colour <- as.character(patient$sex); sex.colour[sex.colour == 'male'] <- 'dodgerblue'; sex.colour[sex.colour == 'female'] <- 'pink';  stage.colour <- as.character(patient$stage) stage.colour[stage.colour == 'I'] <- 'plum1' stage.colour[stage.colour == 'II'] <- 'orchid1' stage.colour[stage.colour == 'III'] <- 'orchid3' stage.colour[stage.colour == 'IV'] <- 'orchid4'  msi.colour <- as.character(patient$msi) msi.colour[msi.colour == 'MSS'] <- 'chartreuse4' msi.colour[msi.colour == 'MSI-High'] <- 'chartreuse2'  discrete.covariate <- list(     rect = list(         col = 'transparent',         fill = sex.colour,         lwd = 1.5         ),     rect = list(         col = 'transparent',         fill = stage.colour,         lwd = 1.5         ),     rect = list(         col = 'transparent',         fill = msi.colour,         lwd = 1.5         )     );  discrete.covariate.legend <- list(     legend = list(         colours = c('dodgerblue', 'pink'),         labels = c('male','female'),         title = expression(underline('Sex'))         ),     legend = list(         colours = c('plum1', 'orchid1', 'orchid3', 'orchid4'),         labels = c('I','II', 'III', 'IV'),         title = expression(underline('Stage'))         ),     legend = list(         colours = c('chartreuse4', 'chartreuse2'),         labels = c('MSS','MSI-High'),         title = expression(underline('MSI'))         )     );  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Discrete_Data', fileext = '.tiff'),     x = discrete.data,     main = 'Discrete data',     xlab.label = 'Samples',     same.as.matrix = TRUE,     # Customize plot     clustering.method = 'none',     total.colours = 3,     colour.scheme = c('white','black'),     fill.colour = 'grey95',     # Changing axes     xat = seq(0,40,5),     xaxis.lab = seq(0,40,5),     yaxis.lab = rownames(microarray)[1:10],     yaxis.cex = 0.75,     xaxis.cex = 0.75,     xaxis.rot = 0,     xlab.cex = 1,     # Covariates     covariates.top = discrete.covariate,     covariate.legend = discrete.covariate.legend,     legend.side = 'right',     legend.title.cex = 0.75,     legend.cex = 0.75,     legend.title.just = 'left',     legend.between.row = 0.2,     legend.border = list(col = 'transparent'),     legend.border.padding = 2,     shrink = 0.7,     covariates.top.grid.border = list(col = 'black', lwd = 2),     scale.data = FALSE,     print.colour.key = FALSE,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL   # Correlation matrix # Example of how to visualize the relationship between (e.x.) different cellularity estimates # Generate a correlation matrix cor.data <- cor(t(microarray[1:10,1:10]), method = 'spearman'); colnames(cor.data) <- colnames(microarray)[1:10];  # ensure that input data matrix is equal to what the heatmap clustering produces distance.matrix <- as.dist(1 - cor(t(cor.data), use = \"pairwise\", method = \"pearson\")); clustered.order <- hclust(d = distance.matrix, method = \"ward\")$order; #> The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\" cor.data <- cor.data[clustered.order, clustered.order];  # prepare labels x <- round(cor.data, 2); x[x == 1] <- colnames(x); y <- x; for (i in 1:(ncol(y)-1)) {     y[i, (i+1):nrow(y)] <- \"\";     };  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Cellularity_Estimates', fileext = '.tiff'),     x = cor.data,     main = 'Correlation matrix',     xaxis.lab = NULL,     yaxis.lab = NULL,     cell.text = y,     clustering.method = 'ward',     plot.dendrograms = 'none',     rows.distance.method = 'correlation',     cols.distance.method = 'correlation',     cor.method = 'pearson',     col.pos = which(y != '1', arr.ind = TRUE)[,1],     row.pos = which(y != '1', arr.ind = TRUE)[,2],     text.fontface = 2,     text.col = 'white',     text.cex = 0.70,     colourkey.cex = 1,     colour.scheme = c('blue', 'darkgrey', 'brown'),     colour.centering.value = 0,     at = seq(-1, 1, 0.001),     colour.alpha = 1.5,     grid.row = TRUE,     grid.col = TRUE,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     ); #> The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\" #> The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\"   # Discrete sequential colours create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Discrete_Colours_Sequential', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Discrete colours',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     # Adjusting total colours plotted     colourkey.labels.at = seq(2,12,1),     at = seq(2,12,1),     # Add one to account for a 'null' colour     total.colours = 11,     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     );   # Discrete qualitative colours create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Discrete_Colours_Qualitative', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Discrete colours',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     # Adjusting total colours plotted     colourkey.labels.at = seq(2,12,1),     colourkey.labels = seq(2,12,1),     at = seq(2,12,1),     # Add one to account for a 'null' colour     total.colours = 11,     colour.scheme = default.colours(10),     description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Colour scheme may not be greyscale compatible.   # Nature style create.heatmap(     # filename = tempfile(pattern = 'Heatmap_Nature_style', fileext = '.tiff'),     x = microarray[1:20, 1:20],     main = 'Nature style',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     # Adjusting total colours plotted     colourkey.labels.at = seq(2,12,1),     colourkey.labels = seq(2,12,1),     at = seq(2,12,1),     # Add one to account for a 'null' colour     total.colours = 11,     colour.scheme = default.colours(10),      # set style to Nature     style = 'Nature',      # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),      # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Heatmap created using BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Colour scheme may not be greyscale compatible. #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend   # create heatmap with key like legend - used to show range of continuous variables  # First create legend with discrete colours sex.colour <- as.character(patient$sex); sex.colour[sex.colour == 'male'] <- 'dodgerblue'; sex.colour[sex.colour == 'female'] <- 'pink';  stage.colour <- as.character(patient$stage) stage.colour[stage.colour == 'I'] <- 'plum1' stage.colour[stage.colour == 'II'] <- 'orchid1' stage.colour[stage.colour == 'III'] <- 'orchid3' stage.colour[stage.colour == 'IV'] <- 'orchid4'  msi.colour <- as.character(patient$msi) msi.colour[msi.colour == 'MSS'] <- 'chartreuse4' msi.colour[msi.colour == 'MSI-High'] <- 'chartreuse2'  discrete.covariate <- list(     rect = list(         col = 'transparent',         fill = sex.colour,         lwd = 1.5         ),     rect = list(         col = 'transparent',         fill = stage.colour,         lwd = 1.5         ),     rect = list(         col = 'transparent',         fill = msi.colour,         lwd = 1.5         )     );  discrete.covariate.legend <- list(     legend = list(         colours = c('dodgerblue', 'pink'),         labels = c('male','female'),         title = expression(underline('Sex'))         ),     legend = list(         colours = c('plum1', 'orchid1', 'orchid3', 'orchid4'),         labels = c('I','II', 'III', 'IV'),         title = expression(underline('Stage'))         ),     legend = list(         colours = c('chartreuse4', 'chartreuse2'),         labels = c('MSS','MSI-High'),         title = expression(underline('MSI'))         ),     legend = list(         colours = c('grey0', 'grey100'),         labels = c('want key like','legend here'),         title = expression(underline('one')),   continuous = TRUE,   height=3         ),     legend = list(         colours = c('grey0', 'grey100'),         labels = c('want key like','legend here'),         title = expression(underline('two'))         ),     legend = list(         colours = c('grey0', 'grey100'),         labels = c(0,10),         title = expression(underline('three')),   continuous = TRUE,         width = 3,         tck = 1,         tck.number = 3,         at = c(0,100),   angle = -90,   just = c(\"center\",\"bottom\")         )    );  create.heatmap(     # filename = tempfile(pattern = 'Heatmap_ContinuousVariablesKey', fileext = '.tiff'),     x = patient[1:20, 4:6],     xlab.label = 'Samples',     ylab.label = 'Scaled Data',     xaxis.cex = 0.75,     yaxis.cex = 0.75,     clustering.method = 'none',     print.colour.key = FALSE,     scale=TRUE,     same.as.matrix = FALSE,     covariates.top = discrete.covariate,     covariates.top.grid.row = list(lwd = 1),     covariate.legends = discrete.covariate.legend,     legend.title.just = 'left',     colour.scheme = c('gray0','grey100'),     fill.colour = 'grey95',     axis.xlab.padding = 1.5,     resolution = 200     ); #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL      create.heatmap(     # filename = tempfile(pattern = 'Heatmap_borderRemoved', fileext = '.tiff'),     x = simple.data,     main = 'Simple',     description = 'Heatmap created using BoutrosLab.plotting.general',     axes.lwd = 0,     resolution = 200     );  # }"},{"path":"/reference/create.hexbinplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a hexagonally binned plot — create.hexbinplot","title":"Make a hexagonally binned plot — create.hexbinplot","text":"Takes data.frame writes hexagonally binned plot","code":""},{"path":"/reference/create.hexbinplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a hexagonally binned plot — create.hexbinplot","text":"","code":"create.hexbinplot(   formula,   data,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,         aspect = 'xy',   trans = NULL,   inv = NULL,   colour.scheme = NULL,   colourkey = TRUE,         colourcut = seq(0, 1, length = 11),   mincnt = 1,   maxcnt = NULL,   xbins = 30,   legend.title = NULL,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,         ylab.cex = 2,         xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,         xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,         xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,         xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.col = 'black',         yaxis.col = 'black',   xaxis.tck = 1,   yaxis.tck = 1,   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',         layout = NULL,   as.table = FALSE,   x.relation = 'same',   y.relation = 'same',   x.spacing = 0,   y.spacing = 0,   strip.col = 'white',         strip.cex = 1,   strip.fontface = 'bold',   add.grid = FALSE,   abline.h = NULL,   abline.v = NULL,   abline.lty = NULL,         abline.lwd = NULL,   abline.col = 'black',   abline.front = FALSE,   add.xyline = FALSE,   xyline.col = 'black',         xyline.lwd = 1,   xyline.lty = 1,   add.curves = FALSE,   curves.exprs = NULL,   curves.from = min(data, na.rm = TRUE),         curves.to = max(data, na.rm = TRUE),   curves.col = 'black',   curves.lwd = 2,   curves.lty = 1,         add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.col = 'black',   text.cex = 1,         text.fontface = 'bold',   add.axes = FALSE,   top.padding = 0.1,   bottom.padding = 0.7,         left.padding = 0.5,   right.padding = 0.1,         add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,         ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,         background.col = 'transparent',   key = NULL,   legend = NULL,         height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,         description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',         use.legacy.settings = FALSE,         inside.legend.auto = FALSE   );"},{"path":"/reference/create.hexbinplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a hexagonally binned plot — create.hexbinplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL (default value) returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size main plot title aspect argument controls physical aspect ratio panels, defaults “xy” trans function specifying transformation counts log, defaults NULL inv inverse transformation trans, defaults NULL colour.scheme colour scheme used, default NULL gives LinGray colour scale colourkey logical whether legend drawn, defaults TRUE colourcut Vector values covering [0, 1] determine hexagon colour class boundaries hexagon legend size boundaries. Alternatively, integer (<= maxcnt) specifying number equispaced colourcut values [0,1]. mincnt Cells fewer counts ignored maxcnt Cells counts ignored, defaults auto-generation xbins Number bins use x, defaults 30 legend.title character/expression use place default legend title named list elements: lab, x, y; defaults NULL xlab.label X-axis label ylab.label Y-axis label xlab.cex Size x-axis label ylab.cex Size y-axis label xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits ylimits Two-element vector giving y-axis limits xat Vector listing x-axis labels drawn yat Vector listing y-axis labels drawn xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis scales, defaults 2 yaxis.cex Size y-axis scales, defaults 2 xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales layout vector specifying number columns, rows (e.g., c(2,1). Default NULL. .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion strip.fontface Strip title fontface, defaults bold add.grid Allows grid lines turned abline.h Specify superimposed horizontal line(s) abline.v Specify superimposed vertical line(s) abline.lty Specify superimposed line type abline.lwd Specify superimposed line width abline.col Specify superimposed line colour (defaults black) abline.front abline /grid added, controls whether drawn front hexbins add.xyline Allow y=x line drawn, default FALSE xyline.col y=x line colour, defaults black xyline.lwd Specifies y=x line width, defaults 1 xyline.lty Specifies y=x line style, defaults 1 (solid) add.curves Allow curves drawn, default FALSE curves.exprs list functions, expressions, calls using “x” variable specify curves drawn curves.Specifies x co-ordinates start curve drawn, defaults drawing curves left edge plotting region curves.Specifies x co-ordinates end curve drawn, defaults drawing curves right edge plotting region curves.col Specifies colours curves, default black curve curves.lwd Specifies width curves, default 1 curve curves.lty Specifies type curves, default 1 (solid) curve add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.col colour additional text text.cex size additional text text.fontface fontface additional text add.axes Allow axis lines turned top.padding number giving top padding multiples lattice default bottom.padding number giving bottom padding multiples lattice default left.padding number giving left padding multiples lattice default right.padding number giving right padding multiples lattice default add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn background.col Specifies colour background plot key Add key plot. See xyplot. legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL. style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function","code":""},{"path":"/reference/create.hexbinplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a hexagonally binned plot — create.hexbinplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.hexbinplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a hexagonally binned plot — create.hexbinplot","text":"WARNING: function uses highly unusual semantics, different rest BoutrosLab.plotting.general library.  underlying hexbinplot function uses argument called maxcnt specify maximum number counts per cell.  default behaviour sensibly encoded via NULL NA, instead using missing function.  result, need use .call semantics handle function. can mess anything using substitute including things generate p-values!","code":""},{"path":"/reference/create.hexbinplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a hexagonally binned plot — create.hexbinplot","text":"Maud HW Starmans","code":""},{"path":"/reference/create.hexbinplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a hexagonally binned plot — create.hexbinplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics If 'maxcnt' is passed, make sure it is not smaller than the actual maximum count (value depends on nbins). Otherwise, some data may be lost. If you aren't sure what the actual max count is, run this function without specifying the 'maxcnt' parameter using the desired number of bins."},{"path":[]},{"path":"/reference/create.hexbinplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a hexagonally binned plot — create.hexbinplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = rnorm(10000),     y = rnorm(10000)     );  create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Simple', fileext = '.tiff'),     formula = y ~ x,     data = simple.data,     main = 'Simple',     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 50     );   create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Simple_underlined_legend_title', fileext = '.tiff'),     formula = y ~ x,     data = simple.data,     legend.title = list(lab = expression(bold(underline('Counts'))), x = 1, y = 1.1),     right.padding = 4,     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 50     ); #> Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,     resolveHJust(x$just, x$hjust), resolveVJust(x$just, x$vjust),     x$rot, 0): polygon edge not found  # Set up data hexbin.data <- data.frame(     x = microarray[,1],     y = microarray[,2]     );  # Minimal Input create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Minimal_Input', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Minimal input',     # formatting bins     colourcut = seq(0, 1, length = 11),     # this sets the maximum value plotted -- values greater than this will not appear     maxcnt = 50,     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Axes & Labels create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Axes_Labels', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Axes & labels',     colourcut = seq(0, 1, length = 11),     maxcnt = 50,     # Customize Axes and labels     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Aspect Ratio create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Aspect_Ratio', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Aspect ratio',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     colourcut = seq(0, 1, length = 11),     maxcnt = 50,     # Set the aspect ratio to control plot dimensions     aspect = 2,     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Colour scheme create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Colour_Change', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Colour change',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     aspect = 1,     colourcut = seq(0, 1, length = 11),     maxcnt = 50,     # Specify colour scheme     colour.scheme = colorRampPalette(c('dodgerblue','paleturquoise','chartreuse','yellow',         'orange','red')),     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Bin sizes create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Bin_Sizes', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Bin sizes',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     aspect = 1,     colour.scheme = colorRampPalette(c('dodgerblue','paleturquoise','chartreuse', 'yellow',         'orange','red')),     # Specify bin sizes     colourcut = seq(0,1,length = 6),     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Correlation Key create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Correlation', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Correlation',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     aspect = 1,     colourcut = seq(0, 1, length = 11),     maxcnt = 50,     # Correlation Key     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = get.corr.key(                     x = hexbin.data$x,                     y = hexbin.data$y,                     label.items = c('beta1', 'spearman'),                     alpha.background = 0                     )                 ),             x = 0.05,             y = 0.95,             corner = c(0,1),             draw = FALSE             )         ),     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Grid lines and diagonal create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Gridlines', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Gridlines',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     aspect = 1,     colourcut = seq(0, 1, length = 11),     maxcnt = 50,     # Grid & diagonal     add.grid = TRUE,     add.xyline = TRUE,     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Large range # Generate some fake data with both very low and very high values set.seed(12345);  x <- c(rnorm(100000,0,0.1),rnorm(1000,0,0.5),rnorm(1000,0,sd=0.75)); y <- c(rnorm(100000,0,0.1),rnorm(1000,0,0.5),rnorm(1000,0,sd=0.75));  fake.data <- data.frame(     x = x,     y = y,     z = y + x*(x+1)/4     );  create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Range', fileext = '.tiff'),     formula = z ~ x,     data = fake.data,     main = 'Range',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     aspect = 1,     # Use colourcut to divide the bins appropriately     colourcut = c(0,0.0002,0.0004,0.0008,0.0016,0.0032,0.0064,0.0128,0.0256,0.0512,0.1024,0.2048,         0.4096,0.8192,1),     # Change the colour scheme     colour.scheme = function(n){BTC(n, beg=1, end=256)},     background.col = 'grey',     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Outliers # Generate data with upper bound outlier set.seed(12345);  x <- c(rnorm(1000,0,0),rnorm(4000,0,0.5)); y <- c(rnorm(1000,0,0),rnorm(4000,0,0.5));  fake.data.outlier <- data.frame(     x = x,     y = y,     z = y + x*(x+1)/4     );  create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Outlier', fileext = '.tiff'),     formula = z ~ x,     data = fake.data.outlier,     main = 'Outlier',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     aspect = 1,     # Use colourcut to divide the bins appropriately     colourcut = c(seq(0,0.01, length = 4),seq(0.0125,0.1,length=4), seq(0.125,1,length=4)),     xbins = 15,     mincnt = 0,     # Change the colour scheme     colour.scheme = function(n){BTC(n, beg=1, end=256)},     background.col = 'grey',     description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature style create.hexbinplot(     # filename = tempfile(pattern = 'Hexbinplot_Nature_style', fileext = '.tiff'),     formula = y ~ x,     data = hexbin.data,     main = 'Nature style',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,16),     ylimits = c(0,16),     xat = seq(0,16,2),     yat = seq(0,16,2),     aspect = 1,     colourcut = seq(0, 1, length = 11),     maxcnt = 50,     # Grid & diagonal     add.grid = TRUE,     add.xyline = TRUE,      # set style to Nature     style = 'Nature',      # demonstrating how to italicize character variables     ylab.lab = expression(paste('italicized ', italic('a'))),      # demonstrating how to create en-dashes     xlab.lab = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Hexbinplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend   # Multiplot different groups set.seed(73);  # Randomly generate groups simple.data$groups <- sample(1:2, 10000, replace = TRUE); simple.data$group.labels <- as.factor(simple.data$groups);  create.hexbinplot(   formula = y ~ x | groups,   # filename = tempfile(   #      pattern = 'stratified_hexbinplot_numeric_conditioning',   #      fileext = '.tiff'   #      ),   data = simple.data,   description = 'Hexbinplot created by BoutrosLab.plotting.general',   strip.col = 'white',   strip.cex = 0.8,   strip.fontface = 'bold',   resolution = 200   ); #> Warning: Numeric values detected for conditional variable. If text labels are desired, please convert conditional variable to character.   create.hexbinplot(   formula = y ~ x | group.labels,   # filename = tempfile(   #      pattern = 'stratified_hexbinplot_factor_conditioning',   #      fileext = '.tiff'   #      ),   data = simple.data,   description = 'Hexbinplot created by BoutrosLab.plotting.general',   strip.col = 'white',   strip.cex = 0.8,   strip.fontface = 'bold',   resolution = 200   );   # }"},{"path":"/reference/create.histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a histogram — create.histogram","title":"Make a histogram — create.histogram","text":"Takes vector creates histogram","code":""},{"path":"/reference/create.histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a histogram — create.histogram","text":"","code":"create.histogram(   x,   data,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = NULL,   ylab.label = NULL,   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.tck = 1,   yaxis.tck = 1,   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   type = 'percent',   breaks = NULL,   col = 'white',   border.col = 'black',   lwd = 2,   lty = 1,   layout = NULL,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   strip.col = 'white',   strip.cex = 1,   top.padding = 0.1,   bottom.padding = 0.7,   right.padding = 0.1,   left.padding = 0.5,   ylab.axis.padding = 0,   abline.h = NULL,   abline.v = NULL,   abline.col = 'black',   abline.lwd = 1,   abline.lty = 1,   key = NULL,   legend = NULL,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',         use.legacy.settings = FALSE,   inside.legend.auto = FALSE   );"},{"path":"/reference/create.histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a histogram — create.histogram","text":"x formula numeric vector (frequencies!) data optional data source x formula filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 2 xlab.label x-axis title ylab.label y-axis title xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis tick labels, defaults 1 yaxis.cex Size y-axis tick labels, defaults 1 xlimits Two-element vector giving x-axis limits ylimits Two-element vector giving y-axis limits xat Vector listing x-axis ticks drawn yat Vector listing y-axis ticks drawn xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label type plot “percent” (default), “density” “count” breaks vector listing break-points histogram, integer specifying desired number breaks. col Fill colour histograms border.col Specify border colour (defaults black) lwd Specifies line width lty Specifies line style layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details . x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.7 right.padding number specifying distance right margin, defaults 0.5 left.padding number specifying distance left margin, defaults 0.5 ylab.axis.padding number specifying distance ylabel y-axis, defaults 0 , abline.h Allow horizontal line drawn, default NULL abline.v Allow vertical line drawn, default NULL abline.col Horizontal vertical line colour, defaults black abline.lwd Specifies horizontal/vertical line width, defaults 1 abline.lty Specifies horizontal/vertical line style, defaults 1 (solid) key Add key plot. See xyplot. legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x ooordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL. style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function","code":""},{"path":"/reference/create.histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a histogram — create.histogram","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.histogram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a histogram — create.histogram","text":"Paul C. Boutros","code":""},{"path":"/reference/create.histogram.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a histogram — create.histogram","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a histogram — create.histogram","text":"","code":"set.seed(12345);  create.histogram(     # filename = tempfile(pattern = 'Histogram_Simple', fileext = '.tiff'),     x = rnorm(5000),     main = 'Simple',     description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 50     );   create.histogram(     # filename = tempfile(pattern = 'Histogram_Simple_Count', fileext = '.tiff'),     x = rnorm(5000),     main = 'Simple Count',     description = 'Histogram created by BoutrosLab.plotting.general',     type = 'count',     resolution = 50     );   # Minimal Input create.histogram(     # filename = tempfile(pattern = 'Histogram_Minimal_Input', fileext = '.tiff'),     x = microarray[,1],     main = 'Minimal input',     description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 50     );   # Formula Input - dividing by chromosome chr.data <- data.frame(     x = microarray$Chr,     y = microarray[,1]     );  create.histogram(     # filename = tempfile(pattern = 'Histogram_Formula_Input', fileext = '.tiff'),     x = y ~ x,     data = chr.data,     main = 'Formula input',     description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 100     );   # Axes and Labels create.histogram(     # filename = tempfile(pattern = 'Histogram_Axes_Labels', fileext = '.tiff'),     x = microarray[,1],     main = 'Axes & labels',     # Customizing the axes and labels     xlab.label = 'Bins',     ylab.label = 'Counts',     xlimits = c(0, 16),     xat = seq(0,15,5),     # set break points for bins     breaks = seq(floor(min(microarray[,1])), ceiling(max(microarray[,1])), 1),     description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Colour change create.histogram(     # filename = tempfile(pattern = 'Histogram_Colours', fileext = '.tiff'),     x = microarray[,1],     main = 'Colours',     xlab.label = 'Bins',     ylab.label = 'Counts',     xlimits = c(0, 16),     xat = seq(0,15,5),     breaks = seq(floor(min(microarray[,1])), ceiling(max(microarray[,1])), 1),     # Colours     col = 'lightgrey',     description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 100     );   # Line type create.histogram(     # filename = tempfile(pattern = 'Histogram_Line_Type', fileext = '.tiff'),     x = microarray[,1],     main = 'Line type',     xlab.label = 'Bins',     ylab.label = 'Counts',     xlimits = c(0, 16),     xat = seq(0,15,5),     breaks = seq(floor(min(microarray[,1])), ceiling(max(microarray[,1])), 1),     col = 'lightgrey',     # Changing the line type     lty = 2,     description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature style create.histogram(     # filename = tempfile(pattern = 'Histogram_Nature_style', fileext = '.tiff'),     x = microarray[,1],     main = 'Nature style',     xlimits = c(0, 16),     xat = seq(0,15,5),     breaks = seq(floor(min(microarray[,1])), ceiling(max(microarray[,1])), 1),     col = 'lightgrey',      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Histogram created by BoutrosLab.plotting.general',     resolution = 200     );  # }"},{"path":"/reference/create.lollipopplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a lollipopplot — create.lollipopplot","title":"Make a lollipopplot — create.lollipopplot","text":"Takes data.frame creates lollipopplot","code":""},{"path":"/reference/create.lollipopplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a lollipopplot — create.lollipopplot","text":"","code":"create.lollipopplot(   formula,   data,   filename = NULL,   groups = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,         main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),         xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',         xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,         xlab.top.y = 0,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,   xaxis.log = FALSE,   yaxis.log = FALSE,         xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.tck = c(1,1),   yaxis.tck = c(1,1),   add.grid = FALSE,   xgrid.at = xat,         ygrid.at = yat,   grid.colour = NULL,   horizontal = FALSE,   type = 'p',   cex = 0.75,   pch = 19,   col = 'black',   col.border = 'black',   lwd = 1,   lty = 1,   alpha = 1,   axes.lwd = 1,   strip.col = 'white',   strip.cex = 1,   strip.fontface = 'bold',   y.error.up = NULL,   y.error.down = y.error.up,   x.error.right = NULL,   x.error.left = x.error.right,   y.error.bar.col = 'black',   x.error.bar.col = y.error.bar.col,   error.whisker.angle = 90,   error.bar.lwd = 1,   error.bar.length = 0.1,   key = list(text = list(lab = c(''))),   legend = NULL,   top.padding = 0.1,   bottom.padding = 0.7,   right.padding = 0.1,   left.padding = 0.5,   key.top = 0.1,   key.left.padding = 0,   ylab.axis.padding = 1,   axis.key.padding = 1,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,     x.relation = 'same',   y.relation = 'same',   add.axes = FALSE,   axes.lty = 'dashed',   add.xyline = FALSE,   xyline.col = 'black',   xyline.lwd = 1,   xyline.lty = 1,   abline.h = NULL,   abline.v = NULL,   abline.col = 'black',   abline.lwd = 1,   abline.lty = 1,   add.curves = FALSE,   curves.exprs = NULL,   curves.from = min(data, na.rm = TRUE),   curves.to = max(data, na.rm = TRUE),   curves.col = 'black',   curves.lwd = 2,   curves.lty = 1,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   add.points = FALSE,   points.x = NULL,   points.y = NULL,   points.pch = 19,   points.col = 'black',   points.col.border = 'black',   points.cex = 1,   add.line.segments = FALSE,   line.start = NULL,   line.end = NULL,   line.col = 'black',   line.lwd = 1,   add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.col = 'black',   text.cex = 1,   text.fontface = 'bold',   text.guess.labels = FALSE,   text.guess.skip.labels = TRUE,   text.guess.ignore.radius = FALSE,   text.guess.ignore.rectangle = FALSE,   text.guess.radius.factor = 1,   text.guess.buffer.factor = 1,   text.guess.label.position = NULL,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   group.specific.colouring = TRUE,   use.legacy.settings = FALSE,   inside.legend.auto = FALSE,   regions.labels = c(),         regions.start = c(),    regions.stop = c(),    regions.color = c(\"red\"),    regions.cex = 1,    regions.alpha = 1,         lollipop.bar.y = NULL,    lollipop.bar.color = \"gray\",   ...   );"},{"path":"/reference/create.lollipopplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a lollipopplot — create.lollipopplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object groups grouping variable data-frame main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title xlab.label x-axis label ylab.label y-axis label xlab.cex Size x-axis label, defaults 3 ylab.cex Size y-axis label, defaults 3 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.log Logical indicating whether x-variable logarithmic scale (base numeric) yaxis.log Logical indicating whether y-variable logarithmic scale (base numeric) xaxis.cex Size x-axis scales, defaults 2 yaxis.cex Size y-axis scales, defaults 2 xaxis.rot Counterclockwise rotation text x-axis scales degrees, defaults 0 yaxis.rot Counterclockwise rotation text y-axis scales degrees, defaults 0 xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick mark, defaults 1 top bottom axes yaxis.tck Specifies length tick mark, defaults 1 top bottom axes add.grid Logical stating wheter grid drawn plot xgrid.Vector listing x-axis grid lines drawn, defaults xat ygrid.Vector listing y-axis grid lines drawn, defaults yat grid.colour ability set individual grid line colours horizontal xyplot-specific function allows change type='h' draws lines vertical horizontal axis type Plot type cex Character expansion plotting symbol pch Plotting character col Point/line colour col.border Colour border points pch >= 21. Defaults “black” lwd Specifies line width, defaults 1 lty Specifies line style, defaults 1 (solid) alpha Specifies line transparency, defaults 1 (opaque) axes.lwd Thickness width axes lines strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion strip.fontface Strip title fontface, defaults bold y.error.upward error vector. Defaults NULL. y.error.NULL, vertical error bar drawn y.error.Downward error vector. Defaults y.error.show symmetric error bars x.error.right Rightward error vector. Defaults NULL. x.error.right NULL, horizontal error bar drawn x.error.left Leftward error vector. Defaults x.error.right show symmetric error bars y.error.bar.col Colour vertical error bar. Defaults “black” x.error.bar.col Colour horizontal error bar. Defaults “black” error.whisker.angle Angle whisker drawn error bar. Defaults 90 degree error.bar.lwd Error bar line width. Defaults 1 error.bar.length Length error bar whiskers. Defaults 0.1 key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.7 right.padding number specifying distance right margin, defaults 0.1 left.padding number specifying distance left margin, defaults 0.5 key.top number specifying distance top key, defaults 0.1 key.left.padding Amount padding go onto legend left ylab.axis.padding number specifying distance ylabel y-axis, defaults 1 axis.key.padding number specifying distance y-axis key, defaults 1 layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” add.axes Allow axis lines turned , default FALSE axes.lty Specifies axis line style, defaults “dashed” add.xyline Allow y=x line drawn, default FALSE xyline.col y=x line colour, defaults black xyline.lwd Specifies y=x line width, defaults 1 xyline.lty Specifies y=x line style, defaults 1 (solid) abline.h Allow horizontal line drawn, default NULL abline.v Allow vertical line drawn, default NULL abline.col Horizontal line colour, defaults black abline.lwd Specifies horizontal line width, defaults 1 abline.lty Specifies horizontal line style, defaults 1 (solid) add.curves Allow curves drawn, default FALSE curves.exprs list functions, expressions, calls using “x” variable specify curves drawn curves.Specifies x co-ordinates start curve drawn, defaults drawing curves left edge plotting region curves.Specifies x co-ordinates end curve drawn, defaults drawing curves right edge plotting region curves.col Specifies colours curves, default black curve curves.lwd Specifies width curves, default 1 curve curves.lty Specifies type curves, default 1 (solid) curve add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x ooordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn add.points Allow additional points drawn, default FALSE points.x x co-ordinates additional points drawn points.y y co-ordinates additional points drawn points.pch plotting character additional points points.col colour additional points points.col.border Colour border additional points points.pch >= 21. Defaults black points.cex size additional points add.line.segments Allow additional line segments drawn, default FALSE line.start y co-ordinates additional line segments start line.end y co-ordinates additional line segments end line.col colour additional line segments, default black line.lwd line width additional line segments, default 1 add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.col colour additional text text.cex size additional text text.fontface fontface additional text text.guess.labels Allows automatic labeling considering values text.x text.y data point labelled, default FALSE text.guess.skip.labels Provides option disregard automatic labelling algorithm space available around data point, thus forcing labelling collision likely, default TRUE text.guess.ignore.radius Allows automatic labeling algorithm ignore radius space data point, useful label cluster data points single text box, default FALSE text.guess.ignore.rectangle Allows atuomatic labeling algorithm ignore rectangle space multiple potential label positions, default FALSE text.guess.radius.factor numeric value factor radius value alter distance label data point text.guess.buffer.factor numeric value factor buffer value alter space used consider data.points potentially going collide text.guess.label.position numeric value 0 360 specify percise angle text box center positive x-axis. Angles move counter-clockwise beginning positive x axis height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs group.specific.colouring Variable specify group specific multi colouring error bars enforced use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function regions.labels Labels regions lollipop plots bars regions.start start x value regions regions.stop stop value regions regions.color color regions regions.cex size text regions regions.alpha alpha regions lollipop.bar.y y location top lollipop plot bar -- defaults right bottom y axis lollipop.bar.color color lollipop plot bar ... Additional arguments passed xyplot","code":""},{"path":"/reference/create.lollipopplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a lollipopplot — create.lollipopplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.lollipopplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a lollipopplot — create.lollipopplot","text":"Paul C. Boutros","code":""},{"path":"/reference/create.lollipopplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a lollipopplot — create.lollipopplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.lollipopplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a lollipopplot — create.lollipopplot","text":"","code":"set.seed(12345); lollipop.data <- data.frame(     y = seq(1,100,1),     x = rnorm(100)     );  create.lollipopplot(     # filename = tempfile(pattern = 'Lollipop_Simple', fileext = '.tiff'),     formula = x ~ y,     data = lollipop.data,     main = 'Lollipop plot',     xaxis.cex = 1,     xlimits = c(-1,102),     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     description = 'Scatter plot created by BoutrosLab.plotting.general',     regions.start = c(1,26,48),     regions.stop = c(15,35,72),     regions.labels = c(\"test 1\", \"test2\", \"test 3\"),     regions.color = c(\"#66b3ff\", \"#5cd65c\", \"#ff3333\")     );"},{"path":"/reference/create.manhattanplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Manhattan plot — create.manhattanplot","title":"Make a Manhattan plot — create.manhattanplot","text":"Takes data.frame creates Manhattan plot","code":""},{"path":"/reference/create.manhattanplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Manhattan plot — create.manhattanplot","text":"","code":"create.manhattanplot(   formula,   data,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,   xaxis.log = FALSE,   yaxis.log = FALSE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.fontface = 'plain',   yaxis.fontface = 'plain',   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.tck = 0,   yaxis.tck = c(1,1),   horizontal = FALSE,   type = 'p',   cex = 2,   pch = '.',   col = 'black',   lwd = 1,   lty = 1,   alpha = 1,   strip.col = 'white',   strip.cex = 1,   axes.lwd = 1,   axes.lty = 'dashed',   key = list(text = list(lab = c(''))),   legend = NULL,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   top.padding = 0,   bottom.padding = 0,   right.padding = 0,   left.padding = 0,   key.top = 0,   key.left.padding = 0,   ylab.axis.padding = 1,   axis.key.padding = 1,   abline.h = NULL,   abline.col = 'black',   abline.lwd = 1,   abline.lty = 1,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   add.points = FALSE,   points.x = NULL,   points.y = NULL,   points.pch = 19,   points.col = 'black',   points.cex = 1,   add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.col = 'black',   text.cex = 1,   text.fontface = 'bold',   height = 6,   width = 10,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   style = 'BoutrosLab',   description = 'Created with BoutrosLab.plotting.general',   preload.default = 'custom',         use.legacy.settings = FALSE,         inside.legend.auto = FALSE,   ...   );"},{"path":"/reference/create.manhattanplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Manhattan plot — create.manhattanplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title xlab.label x-axis label ylab.label y-axis label xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.log Logical indicating whether x-variable logarithmic scale (base numeric) yaxis.log Logical indicating whether y-variable logarithmic scale (base numeric) xaxis.cex Size x-axis scales, defaults 1 yaxis.cex Size y-axis scales, defaults 1 xaxis.rot Counterclockwise rotation text x-axis scales degrees, defaults 0 yaxis.rot Counterclockwise rotation text y-axis scales degrees, defaults 0 xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick mark, defaults 1 top bottom axes yaxis.tck Specifies length tick mark, defaults 1 top bottom axes horizontal xyplot-specific function allows change type='h' draws lines vertical horizontal axis type Plot type cex Character expansion plotting symbol pch Plotting character col Point/line colour lwd Specifies line width, defaults 1 lty Specifies line style, defaults 1 (solid) alpha Specifies line transparency, defaults 1 (opaque) strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion axes.lwd Thickness width axis lines axes.lty Specifies axis line style, defaults “dashed” key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right F x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” top.padding number specifying distance top margin, defaults 0 bottom.padding number specifying distance bottom margin, defaults 0 right.padding number specifying distance right margin, defaults 0 left.padding number specifying distance left margin, defaults 0 key.top number specifying distance top key, defaults 0 key.left.padding Amount padding go onto legend left ylab.axis.padding number specifying distance label y-axis, defaults 1 axis.key.padding number specifying distance y-axis key, defaults 1 abline.h Allow horizontal line drawn, default NULL abline.col Horizontal line colour, defaults black abline.lwd Specifies horizontal line width, defaults 1 abline.lty Specifies horizontal line style, defaults 1 (solid) add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn add.points Allow additional points drawn, default FALSE points.x x co-ordinates additional points drawn points.y y co-ordinates additional points drawn points.pch plotting character additional points points.col colour additional points points.cex size additional points add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.col colour additional text text.cex size additional text text.fontface fontface additional text height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements description Short description image/plot; default NULL preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function ... Additional arguments passed xyplot","code":""},{"path":"/reference/create.manhattanplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Manhattan plot — create.manhattanplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.manhattanplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a Manhattan plot — create.manhattanplot","text":"Christine P'ng, Cindy Q. Yao","code":""},{"path":"/reference/create.manhattanplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a Manhattan plot — create.manhattanplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.manhattanplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Manhattan plot — create.manhattanplot","text":"","code":"set.seed(12345); simple.data <- data.frame(     x = runif(20000, 0, 1),     y = 1:20000     );  create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Simple', fileext = '.tiff'),     formula = -log10(x) ~ y,     data = simple.data,     main = 'Simple',     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 50     );   # set up chromosome covariate colours to use for chr covariate, below chr.colours <- force.colour.scheme(microarray$Chr, scheme = 'chromosome');  # make chr covariate and chr labels  chr.n.genes       <- vector(); chr.tck           <- vector(); chr.pos.genes     <- vector(); chr.break         <- vector(); chr.break[1]      <- 0; # get a list of chromosomes to loop chr <- unique(microarray$Chr);  # loop over each chromosome for ( i in 1:length(chr) ) {      # get the number of genes that belong to one chromosome     n <- sum(microarray$Chr == chr[i]);      # calculate where the labels go     chr.n.genes[i]   <- n;     chr.break[i+1] <- n + chr.break[i];     chr.pos.genes[i] <- floor(chr.n.genes[i]/2);     chr.tck[i]       <- chr.pos.genes[i] + which(microarray$Chr == chr[i])[1];     }  # add an indicator function for the data-frame microarray$ind <- 1:nrow(microarray);  # Minimal input create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Minimal_Input', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Minimal input',     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 100     );   # Custom Axes create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Custom_Axes', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Custom axes',     xlab.label = expression('Chromosomes'),     ylab.label = expression('P'['adjusted']),     xat = chr.tck,     xaxis.lab = c(1:22, 'X', 'Y'),     xaxis.tck = 0,     xaxis.cex = 1,     yaxis.cex = 1,     yat = seq(0,5,1),     yaxis.lab = c(         1,         expression(10^-1),         expression(10^-2),         expression(10^-3),         expression(10^-4)         ),     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 100     );   # Colour scheme create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Colour_Scheme', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Colour scheme',     xlab.label = expression('Chromosomes'),     ylab.label = expression('P'['adjusted']),     xat = chr.tck,     xaxis.lab = c(1:22, 'X', 'Y'),     xaxis.tck = 0,     xaxis.cex = 1,     yaxis.cex = 1,     yat = seq(0,5,1),     yaxis.lab = c(         1,         expression(10^-1),         expression(10^-2),         expression(10^-3),         expression(10^-4)         ),     col = chr.colours,     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 200     );   # Plotting Character create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Plotting_Character', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Plotting character',     xlab.label = expression('Chromosomes'),     ylab.label = expression('P'['adjusted']),     xat = chr.tck,     xaxis.lab = c(1:22, 'X', 'Y'),     xaxis.tck = 0,     xaxis.cex = 1,     yaxis.cex = 1,     yat = seq(0,5,1),     yaxis.lab = c(         1,         expression(10^-1),         expression(10^-2),         expression(10^-3),         expression(10^-4)         ),     col = chr.colours,     # Change plotting character and size of plotting character     pch = 18,     cex = 0.75,     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 200     );   # \\donttest{ # Line create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Added_Line', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Line',     xlab.label = expression('Chromosomes'),     ylab.label = expression('P'['adjusted']),     xat = chr.tck,     xaxis.lab = c(1:22, 'X', 'Y'),     xaxis.tck = 0,     xaxis.cex = 1,     yaxis.cex = 1,     yat = seq(0,5,1),     yaxis.lab = c(         1,         expression(10^-1),         expression(10^-2),         expression(10^-3),         expression(10^-4)         ),     col = chr.colours,     pch = 18,     cex = 0.75,     # draw horizontal line     abline.h = 2,     abline.lty = 2,     abline.lwd = 1,     abline.col = 'black',     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 200     );   # Background shading create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_BG', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Bg rectangles',     xlab.label = expression('Chromosomes'),     ylab.label = expression('P'['adjusted']),     xat = chr.tck,     xaxis.lab = c(1:22, 'X', 'Y'),     xaxis.tck = 0,     xaxis.cex = 1,     yaxis.cex = 1,     yat = seq(0,5,1),     yaxis.lab = c(         1,         expression(10^-1),         expression(10^-2),         expression(10^-3),         expression(10^-4)         ),     col = chr.colours,     pch = 18,     cex = 0.75,     abline.h = 2,     abline.lty = 2,     abline.lwd = 1,     abline.col = 'black',     # Adding rectangles     add.rectangle = TRUE,     xleft.rectangle = chr.break[seq(1, length(chr.break) - 1, 2)],     ybottom.rectangle = 0,     xright.rectangle = chr.break[seq(2, length(chr.break) - 1, 2)],     ytop.rectangle = 4.5,     col.rectangle = 'grey',     alpha.rectangle = 0.5,     description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length   # Nature style create.manhattanplot(     # filename = tempfile(pattern = 'Manhattan_Nature_style', fileext = '.tiff'),     formula = -log10(pval) ~ ind,     data = microarray,     main = 'Nature style',     xat = chr.tck,     xaxis.lab = c(1:22, 'X', 'Y'),     xaxis.tck = 0,     xaxis.cex = 1,     yaxis.cex = 1,     yat = seq(0,5,1),     yaxis.lab = c(         1,         expression(10^-1),         expression(10^-2),         expression(10^-3),         expression(10^-4)         ),     col = chr.colours,     pch = 18,     cex = 0.75,     abline.h = 2,     abline.lty = 2,     abline.lwd = 1,     abline.col = 'black',     # Adding rectangles     add.rectangle = TRUE,     xleft.rectangle = chr.break[seq(1, length(chr.break) - 1, 2)],     ybottom.rectangle = 0,     xright.rectangle = chr.break[seq(2, length(chr.break) - 1, 2)],     ytop.rectangle = 4.5,     col.rectangle = 'grey',     alpha.rectangle = 0.5,      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Manhattan plot created using BoutrosLab.plotting.general',     resolution = 1200     ); #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend. #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length  # }"},{"path":"/reference/create.multipanelplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Joins plots together — create.multipanelplot","title":"Joins plots together — create.multipanelplot","text":"Merges together multiple plots specified layout","code":""},{"path":"/reference/create.multipanelplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joins plots together — create.multipanelplot","text":"","code":"create.multipanelplot(   plot.objects = NULL,   filename = NULL,   height = 10,   width = 10,   resolution = 1000,   plot.objects.heights = c(rep(1,layout.height)),   plot.objects.widths = c(rep(1,layout.width)),   layout.width = 1,   layout.height = length(plot.objects),   main = '',   main.x = 0.5,   main.y = 0.5,   x.spacing = 0,    y.spacing = 0,   xlab.label = '',   xlab.cex = 2,   ylab.label = '',   ylab.label.right = '',   ylab.cex = 2,   main.cex = 3,   legend = NULL,   left.padding = 0,   ylab.axis.padding = c(rep(0, layout.width)),   xlab.axis.padding = c(rep(0, layout.height)),   bottom.padding = 0,   top.padding = 0,   right.padding = 0,   layout.skip = c(rep(FALSE, layout.width*layout.height)),   left.legend.padding = 2,   right.legend.padding = 2,    bottom.legend.padding = 2,    top.legend.padding = 2,   description = 'Created with BoutrosLab.plotting.general',   size.units = 'in',   enable.warnings = FALSE,   style = \"BoutrosLab\",   use.legacy.settings = FALSE );"},{"path":"/reference/create.multipanelplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joins plots together — create.multipanelplot","text":"plot.objects list plot objects. Goes order: Top Left, Top Right, Bottom Left, Bottom Right filename Filename output height Height resulting file width Width resulting file resolution Resolution resulting file plot.objects.heights Heights row plot. Must vector size layout.height plot.objects.widths Widths column plot. Must vector size layout.width layout.width many plots per row. layout.height many plots per column main main label text main.x main label x coordinate main.y main label y coordinate x.spacing horizontal spacing plot. Can single value vector length layout.width - 1 y.spacing vertical spacing plot. Can single value vector length layout.height - 1 xlab.label bottom x-axis main label xlab.cex bottom x-axis main label cex ylab.label left side y-axis label ylab.label.right right side y-axis label ylab.cex y-axis label cex main.cex main label cex legend legend plot left.padding padding left side frame ylab.axis.padding padding axis y label plots. Can single value vector length layout.width xlab.axis.padding padding axis x label plots. Can single value vector length layout.height bottom.padding padding bottom side frame top.padding padding top side frame right.padding padding right side frame layout.skip list specifiying locations skip plots. Must vector length layout.width*layout.height left.legend.padding padding legend left side figure (can use without legend) right.legend.padding padding legend right side figure (can use without legend) bottom.legend.padding padding legend bottom side figure (can use without legend) top.legend.padding padding legend top side figure (can use without legend) description description plot displaying size.units units height width file represent enable.warnings enables warnings output style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements use.legacy.settings boolean set wheter use legacy mode settings (font)","code":""},{"path":"/reference/create.multipanelplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joins plots together — create.multipanelplot","text":"Jeff Green","code":""},{"path":"/reference/create.multipanelplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Joins plots together — create.multipanelplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":"/reference/create.multipanelplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joins plots together — create.multipanelplot","text":"","code":"set.seed(12345); # begin by creating the individual plots which will be combined into a multiplot dist <- data.frame(     a = rnorm(100, 1),      b = rnorm(100, 3),      c = rnorm(100, 5)     );  simple.data <- data.frame(     x = c(dist$a, dist$b, dist$c),     y = rep(LETTERS[1:3], each = 100)     ); fill.squares <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), ncol = 3, byrow = TRUE); rownames(fill.squares) <- c(\"Drug I only\", \"Drug II only\" , \"Drugs I & II\"); colnames(fill.squares) <- levels(factor(simple.data$y));  # Create plot # 1 simple.boxplot <- create.boxplot(     formula = x ~ y,     data = simple.data,     xaxis.lab = c('','',''),     main.x = 0.57,     ylab.label = 'Sugar Level',     xlab.label = '',     col = 'lightgrey',     xaxis.tck = c(0,0),     yaxis.tck = c(1,0),     yaxis.lab = seq(-1,8,2) ,     yat = seq(-1,8,2),     left.padding = 0,     right.padding = 0,     lwd = 2     );  # Create plot # 2 simple.heatmap <- create.heatmap(     x = t(fill.squares),     clustering.method = 'none',     shrink = 0.8,     yaxis.lab = c(3,2,3),     yaxis.tck = 1,     xaxis.lab = c('A','B','C'),     ylab.label = 'Drug Regimen',     xlab.label = 'Patient Group',     colour.scheme = c(\"white\", \"grey20\"),     fill.colour = \"white\",     print.colour.key = FALSE,     left.padding = 0,     xaxis.tck = c(1,0),     right.padding = 0,     xaxis.rot = 0     );  create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_Simple', fileext = '.tiff'),     plot.objects = list(simple.boxplot,simple.heatmap),      y.spacing = 1,       ylab.axis.padding = 2,      main = 'Simple',      top.padding = 2,     resolution = 200     );   # Create plot # 2 simple.heatmap.with.legends <- create.heatmap(     x = t(fill.squares),     shrink = 0.8,     yaxis.lab = c(3,2,3),     yaxis.tck = 1,     xaxis.lab = c('A','B','C'),     ylab.label = 'Drug Regimen',     xlab.label = '',     colour.scheme = c(\"white\", \"grey20\"),     fill.colour = \"white\",     left.padding = 0,     xaxis.tck = c(1,0),     right.padding = 0,     xaxis.rot = 0     );  create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_Simple_Legends', fileext = '.tiff'),     plot.objects = list(simple.boxplot,simple.heatmap.with.legends),     y.spacing = 1,     ylab.axis.padding = 2,     main = 'Simple',     top.padding = 2,     resolution = 200     );   # \\donttest{ # Create plot # 1 simple.boxplot2 <- create.boxplot(     formula = x ~ y,     data = simple.data,     ylab.label = 'Sugar Level',     xlab.label = '',     col = 'lightgrey',     xaxis.tck = c(0,0),     xaxis.lab = c('','',''),     yaxis.tck = c(1,0),     yaxis.lab = seq(-1,8,2),     yat = seq(-1,8,2),     left.padding = 0,     right.padding = 0,     lwd = 2     );  simple.violin2 <- create.violinplot(     formula = x ~ y,     data = simple.data,     col = 'lightgrey',     yaxis.tck = c(0,0),     xlab.label = '',     ylab.label = '',     yaxis.lab = NULL,     xaxis.lab = c('','',''),     xaxis.tck = c(0,0)     );  # Create plot # 2 simple.heatmap2 <- create.heatmap(     x = t(fill.squares),     clustering.method = 'none',     shrink = 0.8,     yaxis.lab = c(1,2,3),     yaxis.tck = 1,     xaxis.lab = c('A','B','C'),     ylab.label = 'Drug Regimen',     colour.scheme = c(\"white\", \"grey20\"),     fill.colour = \"white\",     print.colour.key = FALSE,     left.padding = 0,     xaxis.tck = c(3,0),     right.padding = 0,     xaxis.rot = 0,     ylab.cex = 2     );   create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_Simple_Layout', fileext = '.tiff'),     plot.objects = list(simple.boxplot2,      simple.violin2,simple.heatmap2),      layout.width = 2,      layout.height = 2,      xlab.label = 'Patient Group',      main = 'Simple Layout',      top.padding = 2,      plot.objects.heights = c(3,1),      x.spacing = 1,      y.spacing = 1     );   all.data <- data.frame(     a = rnorm(n = 25, mean = 0, sd = 0.75),     b = rnorm(n = 25, mean = 0, sd = 0.75),     c = rnorm(n = 25, mean = 0, sd = 0.75),     d = rnorm(n = 25, mean = 0, sd = 0.75),     e = rnorm(n = 25, mean = 0, sd = 0.75),     f = rnorm(n = 25, mean = 0, sd = 0.75),     x = rnorm(n = 25, mean = 5),     y = seq(1, 25, 1)     ); # create the plot -- this allows for previewing of the individual plot barplot.formatted <- create.barplot(     formula = x ~ y,     data = all.data[,7:8],     yaxis.tck = c(1,0),     border.lwd = 0,     col = 'grey',     xlab.label = '',     xat = c(-100),     ylab.label = '',     yaxis.lab = seq(1, ceiling(max(all.data$x)), 1),     yat = seq(1, ceiling(max(all.data$x)), 1),     yaxis.cex = 1.5     );   heatmap.formatted <- create.heatmap(     x = all.data[,1:6],     clustering.method = 'none',     colour.scheme = c('magenta','white','green'),     print.colour.key = FALSE,     xlab.label = '',     yaxis.tck = c(1,0),     xaxis.tck = c(1,0),     xat = c(1:25),     yaxis.lab = c(\"BRCA1\", \"BRCA2\", \"APC\", \"TIN\", \"ARG\", \"FOO\"),     yat = c(1,2,3,4,5,6),     xaxis.lab = c(1:25),     xaxis.rot = 0,     yaxis.cex = 1.5     );   create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_formatted', fileext = '.tiff'),     plot.objects = list(barplot.formatted, heatmap.formatted),      plot.objects.heights = c(1,3),      y.spacing = -3.75,      main = 'Formatted',      top.padding = 0     );   data.bars <- data.frame(     x = sample(x = 5:35, size = 10),     y = seq(1,10,1)     );  data.cov <- data.frame(     x = rnorm(n = 10, mean = 0, sd = 0.75),     y = rnorm(n = 10, mean = 0, sd = 0.75),     z = rnorm(n = 10, mean = 0, sd = 0.75)     );  # Create main barplot bars <- create.barplot(     formula = x~y,     data = data.bars,     ylimits = c(0,35),     ylab.label = '',     sample.order = 'increasing',     border.lwd = 0,     yaxis.lab = seq(5,35,5),     yat = seq(5,35,5),     yaxis.tck = c(0,0),     xlab.label = ''     );  # Make covariate bars out of heatmaps cov.1 <- create.heatmap(     x = as.matrix(data.bars$y),     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = default.colours(4),     grid.col = TRUE,     col.colour = 'black',     # col.lwd = 10,     total.col = 5,     print.colour.key = FALSE,     yaxis.tck = 0,     axes.lwd = 0     );  cov.2 <- create.heatmap(     x = as.matrix(data.cov$y),     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = c(\"lightblue\",\"dodgerblue2\", \"dodgerblue4\"),     grid.col = TRUE,     col.colour = 'black',     # col.lwd = 10,     total.col = 4,     print.colour.key = FALSE,     yaxis.tck = 0     ); #> Warning: Colour allocation scheme failed, moving to a default method  cov.3 <- create.heatmap(     x = as.matrix(data.cov$z),     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = c(\"grey\",\"coral1\"),     grid.col = TRUE,     col.colour = 'black',     # col.lwd = 10,     total.col = 3,     print.colour.key = FALSE,     yaxis.tck = 0     );   legendG <- legend.grob(     list(         legend = list(             colours = default.colours(4),             title = \"Batch\",             labels = LETTERS[1:4],             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             ),         legend = list(             colours = c(\"lightblue\",\"dodgerblue2\",\"dodgerblue4\"),             title = \"Grade\",             labels = c(\"Low\",\"Normal\",\"High\"),             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             ),         legend = list(             colours = c(\"grey\",\"coral1\"),             title = \"Biomarker\",             labels = c(\"Not present\",\"Present\"),             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             )         ),         label.cex = 1.25,       title.cex = 1.25,       title.just = 'left',      title.fontface = 'bold.italic',      size = 3,      layout = c(1,3)       );  create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_Barchart', fileext = '.tiff'),     plot.objects = list(bars, cov.3, cov.2, cov.1 ),        plot.objects.heights = c(1, 0.1,0.1,0.1),      legend = list(right = list(fun = legendG)),      ylab.label = 'Response to Treatment',      main = 'Bar Chart',     x.spacing = 0,      y.spacing = 0.1     );   # Set up plots for complex example  # Dotmap spot.sizes <- function(x) { 0.5 * abs(x); } dotmap.dot.colours <- c('red','blue'); spot.colours <- function(x) {     colours <- rep('white', length(x));     colours[sign(x) == -1] <- dotmap.dot.colours[1];     colours[sign(x) ==  1] <- dotmap.dot.colours[2];     return(colours);     };  # Dotmap colours orange <- rgb(249/255, 179/255, 142/255); blue <- rgb(154/255, 163/255, 242/255); green <- rgb(177/255, 213/255, 181/255); bg.colours <- c(green, orange, blue, 'gold', 'skyblue', 'plum');  dotmap <- create.dotmap(     x = CNA[1:15,1:58],     bg.data = SNV[1:15,1:58],     # Set the colour scheme     colour.scheme = bg.colours,     # Set the breakpoints for the colour scheme (determined from the data)     at = c(0,1,2,4,6,7,8),     # Specify the total number of colours (+1 for the fill colour)     total.colours = 7,     col.colour = 'white',     row.colour = 'white',     bg.alpha = 1,     yaxis.tck = c(1,0),     fill.colour = 'grey95',     spot.size.function = spot.sizes,     spot.colour.function = spot.colours,     xaxis.tck = 0,     xaxis.lab = c(rep('',100)),     bottom.padding = 0,      top.padding = 0,     left.padding = 0,     right.padding = 0,     yaxis.cex = 1     );  # Dotmap legend dotmap.legend <- list(     legend = list(         colours = bg.colours,         labels = c('Nonsynonymous','Stop Gain','Frameshift deletion',              'Nonframeshift deletion', 'Splicing', 'Unknown'),         border = 'white',         title = 'SNV',         pch = 15         ),     legend = list(         colours = dotmap.dot.colours,         labels = c('Gain','Loss'),         border = 'white',         title = 'CNA',         pch = 19         )     );  dotmap.legend.grob <- legend.grob(     legends = dotmap.legend,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  # Covariates cov.colours <- c(     c('dodgerblue','pink'),     c('grey','darkseagreen1','seagreen2','springgreen3','springgreen4'),     c('peachpuff','tan4')     );  # the heatmap expects numeric data cov.data <- patient[-c(4:9)]; cov.data[cov.data == 'male'] <- 1; cov.data[cov.data == 'female'] <- 2; cov.data[is.na(cov.data)] <- 3; cov.data[cov.data == 'I'] <- 4; cov.data[cov.data == 'II'] <- 5; cov.data[cov.data == 'III'] <- 6; cov.data[cov.data == 'IV'] <- 7; cov.data[cov.data == 'MSS'] <- 8; cov.data[cov.data == 'MSI-High'] <- 9; cov.data$sex <- as.numeric(cov.data$sex); cov.data$stage <- as.numeric(cov.data$stage); cov.data$msi <- as.numeric(cov.data$msi);  covariates <- create.heatmap(     x = cov.data,     clustering.method = 'none',     colour.scheme = as.vector(cov.colours),     total.colours = 10,     row.colour = 'white',     col.colour = 'white',     grid.row = TRUE,     grid.col = TRUE,     xaxis.lab = c(rep('',100)),     yaxis.lab = c('Sex','Stage','MSI'),     yaxis.tck = c(0,0),     xaxis.tck = c(0,0),     xat = c(1:100),     print.colour.key = FALSE,     yaxis.cex = 1,     bottom.padding = 0,      top.padding = 0,     left.padding = 0,     right.padding = 0     ); #> Warning: number of colum ns exceeded limit (50), column lines are turned off. #> \t\t\t\tPlease set \"force.grid.col\" to TRUE to override this  ## Warning: number of columns exceeded limit (50), column lines are  ## turned off. Please set \"force.grid.col\" to TRUE to override this  # Coviate Legends cov.legends <- list(     legend = list(         colours = cov.colours[8:9],         labels = c('MSS','MSI-High'),         border = 'white',         title = 'MSI'         ),     legend = list(         colours = cov.colours[3:7],          labels = c('NA', 'I','II','III','IV'),         border = 'white',         title = 'Stage'         ),     legend = list(         colours = cov.colours[1:2],         labels = c('Male','Female'),         border = 'white',         title = 'Sex'         )     );  cov.legend.grob <- legend.grob(     legends = cov.legends,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7,     layout = c(3,1)     );   create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_with_heatmap', fileext = '.tiff'),     plot.objects = list(dotmap,covariates),      plot.objects.heights = c(1,0.2),      y.spacing = -0.8,      main = 'Dotmap',      top.padding = 2,     layout.height = 2,     legend = list(         bottom = list(             x = 0.10,             y = 0.50,             fun = cov.legend.grob             ),         right = list(             x = 0.10,             y = 0.50,             fun = dotmap.legend.grob             )         ),     resolution = 300     );   # Add more plots, using more complex layout # grouped barplot groupedbar.colours <- c('indianred1','indianred4');  count.SNV <- apply(SNV[1:15,], 2, function(x){length(which(!is.na(x)))}); count.CNA <- apply(CNA[1:15,], 2, function(x){length(which(!(x==0)))});  grouped.data <- data.frame(     values = c(count.SNV, count.CNA),     samples = rep(colnames(SNV),2),     group = rep(c('SNV','CNA'), each = 58)     );  grouped.barplot <- create.barplot(     formula = values ~ samples,     data = grouped.data,     groups = grouped.data$group,     col = groupedbar.colours,     top.padding = 0,     bottom.padding = 0,     left.padding = 0,     right.padding = 0,     border.col = 'white',     xlab.label = '',     ylab.label = 'Mutation',     yaxis.lab = c(0,5,10,15),     yat = c(0,5,10,15),     xaxis.lab = c(rep('',100)),     yaxis.tck = c(0,0),     xaxis.tck = c(0,0),     ylab.cex = 1.5,     yaxis.cex = 1,     axes.lwd = 2     );  # stacked barplot col.one <- rgb(255/255, 225/255, 238/255); col.two <- rgb(244/255, 224/255, 166/255); col.thr <- rgb(177/255, 211/255, 154/255); col.fou <- rgb(101/255, 180/255, 162/255); col.fiv <- rgb(51/255, 106/255, 144/255); stackedbar.colours <- c(col.one, col.two, col.thr, col.fou, col.fiv, 'orchid4'); stacked.data.labels <- c('C>A/G>T','C>T/G>A','C>G/G>C','T>A/A>T','T>G/A>C', 'T>C/A>G');  stacked.data <- data.frame(     values = c(patient$prop.CAGT, patient$prop.CTGA, patient$prop.CGGC, patient$prop.TAAT,          patient$prop.TGAC, patient$prop.TCAG),      divisions = rep(rownames(patient), 6),     group = rep(stacked.data.labels, each = 58)     );  # Generate stacked barplot stacked.barplot <- create.barplot(     formula = values ~ divisions,     data = stacked.data,     groups = stacked.data$group,     stack = TRUE,     col = stackedbar.colours,     border.col = 'white',     main = '',     xlab.label = '',     ylab.label = 'Proportion',     yaxis.lab = c(0,0.4,0.8),     yat = c(0,0.4,0.8),     xaxis.lab = c(rep('',100)),   yaxis.tck = c(0,0),     xaxis.tck = c(0,0),     ylab.cex = 1.5,     yaxis.cex = 1,     axes.lwd = 2     );  # barchart legends stackedbar.legend <- list(     legend = list(         colours = rev(stackedbar.colours),         labels = rev(stacked.data.labels),         border = 'white'         )     );  groupedbar.legend <- list(     legend = list(         colours = groupedbar.colours,         labels = c('CNA','SNV'),         border = 'white'         )     );  groupedbar.legend.grob <- legend.grob(     legends = groupedbar.legend,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  stackedbar.legend.grob <- legend.grob(     legends = stackedbar.legend,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  # Expression change Segplot # locate matching genes rows.to.keep <- which(match(rownames(microarray), rownames(SNV)[1:15], nomatch = 0) > 0);  segplot.data <- data.frame(     min = apply(microarray[rows.to.keep,1:58], 1, min),     max = apply(microarray[rows.to.keep,1:58], 1, max),     median = apply(microarray[rows.to.keep,1:58], 1, median),     order = seq(1,15,1)     );  segplot <- create.segplot(     formula = order ~ min + max,     data = segplot.data,     main = '',     xlab.label = '',     ylab.label = '',     centers = segplot.data$median,     yaxis.lab = c('','','','','',''),     xaxis.lab = c('0','2','4','6','8'),     xat = c(0,2,4,6,8),     yaxis.tck = c(0,0),     xaxis.tck = c(1,0),     axes.lwd = 2,        top.padding = 0,     left.padding = 0,     right.padding = 0,     bottom.padding = 0     ); # Create multiplot  plots <- list(grouped.barplot,stacked.barplot,dotmap, segplot,covariates); create.multipanelplot(     main.x = 0.47,     main.y = 0.5,     plot.objects = plots,     plot.objects.heights = c(0.3, 0.3, 1, 0.15),     plot.objects.widths = c(1,0.2),     # filename = tempfile(pattern = 'Multipanelplot_Complex', fileext = '.tiff'),     layout.height = 4,     layout.width = 2,     x.spacing = 0.2,     left.padding = 0,     layout.skip = c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,TRUE),     y.spacing = c(-1.35,-1.35,-1.5),     ylab.axis.padding = c(1,0),     legend = list(         left = list(             fun = dotmap.legend.grob,             args = list(                 key = list(                     points = list(                         pch = c(15,15,19,19)                         )                     )                 )             )     ),     height = 12,     width = 12,     main = 'Complex',      top.padding = 2     ); #> Warning: number of columns of result is not a multiple of vector length (arg 2)  # Create a multiplot with a heatmap, key like legend and barplot  # First create a heatmap object simple.heatmap <- create.heatmap(patient[, 4:6],    clustering.method = 'none',    print.colour.key = FALSE,    same.as.matrix = FALSE,    colour.scheme = c('gray0','grey100'),    fill.colour = 'grey95',    xaxis.lab = c(rep('',100)),    xat = c(0,1,2,3,4,5,6,7,8),    yaxis.lab = c('','',''),    yat = c(0,1,2),    xlab.label = '' );   # and a simple bar plot pvals <- data.frame(     order = c(1:3),     pvalue = -log10(c(0.0004, 0.045, 0.0001)),     stringsAsFactors = FALSE         ) #create bar plot simple.bar <- create.barplot(     formula = order ~ rev(pvalue),     data = pvals,     xlimits = c(0,5),     plot.horizontal=TRUE,     xlab.label = '',     ylab.label = '',     yaxis.lab = c(1,2,3)     );  # then the covariates heatmap cov.colours <- c(     c('dodgerblue','pink'),     c('grey','darkseagreen1','seagreen2','springgreen3','springgreen4'),     c('peachpuff','tan4')     );  # the heatmap expects numeric data cov.data <- patient[-c(4:9)]; cov.data[cov.data == 'male'] <- 1; cov.data[cov.data == 'female'] <- 2; cov.data[is.na(cov.data)] <- 3; cov.data[cov.data == 'I'] <- 4; cov.data[cov.data == 'II'] <- 5; cov.data[cov.data == 'III'] <- 6; cov.data[cov.data == 'IV'] <- 7; cov.data[cov.data == 'MSS'] <- 8; cov.data[cov.data == 'MSI-High'] <- 9; cov.data$sex <- as.numeric(cov.data$sex); cov.data$stage <- as.numeric(cov.data$stage); cov.data$msi <- as.numeric(cov.data$msi);  covariates <- create.heatmap(     x = cov.data,     clustering.method = 'none',     colour.scheme = as.vector(cov.colours),     total.colours = 10,     row.colour = 'white',     col.colour = 'white',     grid.row = TRUE,     grid.col = TRUE,     yaxis.tck = 0,     print.colour.key = FALSE,     xaxis.lab = c('','',''),     xlab.label = '',     xat = c(1,2,3)     ); #> Warning: number of colum ns exceeded limit (50), column lines are turned off. #> \t\t\t\tPlease set \"force.grid.col\" to TRUE to override this  ## Warning: number of columns exceeded limit (50), column  ## lines are turned off. Please set \"force.grid.col\" to TRUE to override this  covariates2 <- create.heatmap(     x = patient[4],     clustering.method = 'none',     colour.scheme = c(\"#00007F\", \"#007FFF\"),     row.colour = 'white',     col.colour = 'white',     grid.row = TRUE,     grid.col = TRUE,     yaxis.tck = 0,     print.colour.key = FALSE,     xaxis.lab = c('','',''),     xlab.label = '',     xat = c(1,2,3)     ); #> Warning: number of rows exceeded limit (50), row lines are turned off. #> \t\t\t\tPlease set \"force.grid.row\" to TRUE to override this  ## Warning: number of rows exceeded limit (50), row  ## lines are turned off. Please set \"force.grid.row\" to TRUE to override this   cov.legends <- list(     legend = list(         colours = c(\"white\", \"black\"),         labels = c('0','2'),         border = 'grey',         title = 'Tumour Mass (kg)',         continuous = TRUE,         height = 3         ),     legend = list(         colours = cov.colours[8:9],         labels = c('MSS','MSI-High'),         border = 'white',         title = 'MSI'         ),     legend = list(         colours = cov.colours[3:7],         labels = c('NA', 'I','II','III','IV'),         border = 'white',         title = 'Stage'         ),     legend = list(         colours = cov.colours[1:2],         labels = c('Male','Female'),         border = 'white',         title = 'Sex'         ),     legend = list(         colours = c(\"#00007F\", \"#007FFF\"),         labels = c('0.09','0.72'),         border = 'grey',         title = 'CAGT',         continuous = TRUE,         height = 2,         width = 3,         angle = -90,         tck = 1,         tck.number = 2,         at = c(0,100)         )     );  cov.legend.grob <- legend.grob(     legends = cov.legends,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  # Now bring it was together using multiplot create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_continousLegend', fileext = '.tiff'),     plot.objects = list(simple.heatmap, simple.bar,covariates2,covariates),     plot.objects.heights = c(1,0.1,0.35),     plot.objects.widths = c(1,0.25),     layout.height = 3,     layout.width = 2,     layout.skip = c(FALSE, FALSE,FALSE,TRUE,FALSE,TRUE),     y.spacing = -0.1,     x.spacing = 0.5,     legend = list(         left = list(             fun = cov.legend.grob             )         ),     main = 'Continous Legend',      top.legend.padding = 4,     top.padding = -2,     left.padding = 1      # This parameter must be set for the legend to appear     );    create.multipanelplot(     # filename = tempfile(pattern = 'Multipanelplot_manyPlots', fileext = '.tiff'),     main = 'Large Scale',     plot.objects = list(   simple.boxplot,   simple.heatmap,   simple.bar,   barplot.formatted,   dotmap,   grouped.barplot,   stacked.barplot,   covariates,   covariates2,   heatmap.formatted   ),     plot.objects.heights = c(1,1,1,1),     plot.objects.widths = c(1,1, 1,1),     layout.height = 4,     layout.width = 4,     top.legend.padding = 3,     layout.skip = c(FALSE, FALSE,FALSE,FALSE,FALSE,TRUE,     TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE),     y.spacing = c(-1,-1,-1),     x.spacing = c(1,2,3),     legend = list(         left = list(             fun = cov.legend.grob             )         ),     height = 12,     width = 12     # This parameter must be set for the legend to appear     ); #> Warning: number of columns of result is not a multiple of vector length (arg 2) #> Warning: number of columns of result is not a multiple of vector length (arg 2)   # }"},{"path":"/reference/create.multiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Joins plots together — create.multiplot","title":"Joins plots together — create.multiplot","text":"Merges together multiple plots specified layout","code":""},{"path":"/reference/create.multiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joins plots together — create.multiplot","text":"","code":"create.multiplot(   plot.objects,    filename = NULL,    panel.heights = c(1,1),    panel.widths = 1,    main = NULL,    main.just = \"center\",    main.x = 0.5,    main.y = 0.5,    main.cex = 3,    main.key.padding = 1,    ylab.padding = 5,    xlab.padding = 5,    xlab.to.xaxis.padding = 2,    right.padding = 1,    left.padding = 1,    top.padding = 0.5,    bottom.padding = 0.5,    xlab.label = NULL,    ylab.label = NULL,    xlab.cex = 2,    ylab.cex = 2,    xlab.top.label = NULL,    xaxis.top.tck.lab = NULL,   xat.top = TRUE,   xlab.top.cex = 2,    xaxis.top.idx = NULL,   xlab.top.col = 'black',   xlab.top.just = \"center\",    xlab.top.x = 0.5,    xlab.top.y = 0,    xaxis.cex = 1.5,    yaxis.cex = 1.5,    xaxis.labels = TRUE,    yaxis.labels = TRUE,    xaxis.alternating = 1,    yaxis.alternating = 1,    xat = TRUE,    yat = TRUE,    xlimits = NULL,    ylimits = NULL,    xaxis.rot = 0,   xaxis.rot.top = 0,   xaxis.fontface = 'bold',   y.tck.dist=0.5,   x.tck.dist=0.5,    yaxis.fontface = 'bold',   x.spacing = 1,    y.spacing = 1,    x.relation = 'same',    y.relation = 'same',    xaxis.tck = c(0.75,0.75),    yaxis.tck = c(0.75,0.75),    axes.lwd = 1.5,    key.right.padding = 1,    key.left.padding = 1,    key.bottom.padding = 1,    xlab.key.padding = 0.5,   height = 6,    width = 6,    size.units = 'in',    resolution = 1600,    enable.warnings = FALSE,    key = list(text = list(lab = c(''))),    legend =  NULL,    print.new.legend = FALSE,    merge.legends = FALSE,    plot.layout = c(1,length(plot.objects)),    layout.skip=rep(FALSE,length(plot.objects)),    description = 'Created with BoutrosLab.plotting.general',    plot.labels.to.retrieve = NULL,   style = 'BoutrosLab',    remove.all.border.lines = FALSE,   preload.default = 'custom',   plot.for.carry.over.when.same = 1,   get.dendrogram.from = NULL,    dendrogram.right.size = NULL,    dendrogram.right.x = NULL,    dendrogram.right.y = NULL,          dendrogram.top.size = NULL,          dendrogram.top.x = NULL,          dendrogram.top.y = NULL,         use.legacy.settings = FALSE );"},{"path":"/reference/create.multiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joins plots together — create.multiplot","text":"plot.objects list plot objects. Goes order: Bottom Left, Bottom Right, Top Left, Top Right filename Filename tiff output, NULL returns trellis object panel.heights vector specifying relative heights panels. Default c(1,1) panel.widths vector specifying relative widths panels. Default 1 main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 3 main.key.padding number specifying distance main plot, defaults 1 ylab.padding number specifying distance y-axis plot, defaults 5 xlab.padding number specifying distance x-axis plot, defaults 5 xlab..xaxis.padding number specifying distance xaxis xlabel, defaults 2 right.padding number specifying distance right margin, defaults 1 left.padding number specifying distance left margin, defaults 1 top.padding number specifying distance top margin, defaults 0.5 bottom.padding number specifying distance bottom margin, defaults 0.5 xlab.label label x-axis ylab.label label y-axis xlab.cex Size x-axis labels, defaults 1.5 ylab.cex Size y-axis labels, defaults 1.5 xlab.top.label label top x-axis xaxis.top.tck.lab vector tick labels top x-axis. Currently supports labelling single top x-axis plot xat.top vector specifying tick positions top x-axis. Currently supports single top x-axis plot. Note labelling top x-axis even labelling bottom x-axis labels xat must still defined (eg list empty vectors) lead unpredictable labelling xlab.top.cex Size top x-axis label xaxis.top.idx Index plot want  top x-axis tick labels. Defaults last plot specified. Currently supports one plot. xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xaxis.cex Size x-axis scales, defaults 2 yaxis.cex Size y-axis scales, defaults 2 xaxis.labels Names give x-axis labels, defaults lattice default behaviour yaxis.labels Names give y-axis labels, defaults lattice default behaviour xaxis.alternating Gives control axis tick marks (1 bottom , 2 top , 3 top bottom), default 1 means bottom axis tick marks drawn, set 0 remove tick marks yaxis.alternating Gives control axis labelling, defaults 1 means left axis labels drawn, set 0 remove tick marks xat Vector listing x-axis labels drawn yat Vector listing y-axis labels drawn xlimits Vector listing x-axis limits subplot. Defaults NULL let R figure limits ylimits Vector listing y-axis limits subplot. Defaults NULL let R figure limits xaxis.rot Rotation bottom x-axis labels xaxis.rot.top Rotation top x-axis labels xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales x.spacing number specifying horizontal distance plots, defaults 1 y.spacing number specifying vertical distance plots, defaults 1 x.relation character string determines x-axis limits calculated panel. Possible values “” (default), “free” “sliced”. See ?xyplot y.relation character string determines y-axis limits calculated panel. Possible values “” (default), “free” “sliced”. See ?xyplot xaxis.tck vector length 2 determines size x-axis tick marks. Defaults c(0.75, 0.75). yaxis.tck vector length 2 determines size y-axis tick marks. Defaults c(0.75, 0.75). x.tck.dist  number specifying distance x-axis labels tick marks. Defaults 0.5. y.tck.dist number specifying distance y-axis labels tick marks. Defaults 0.5. axes.lwd Width border. Note also changes colourkey border ticks key.right.padding Space right-plot keys/legends key.left.padding Space left-plot keys/legends key.bottom.padding Space bottom-plot keys/legends xlab.key.padding Space bottom-xlab keys/legends height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE key Add key plot: see xyplot. legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See ?xyplot. print.new.legend Override default behaviour merging legends imported plots, can specify custom legend, default FALSE. TRUE cancel merge.legends functionality merge.legends FALSE means legend first plot used, TRUE retrieves legends plots. Multiple legends share “space”:see c.trellis. plot.layout vector specifying layout plots, defaults single column/ c(1,length(plot.objects)) layout.skip vector specifying positions layout grid leave blank/skip, defaults skipping spots layout / rep(FALSE,length(plot.objects)). Goes order: Bottom Left, Bottom Right, Top Left, Top Right description Short description image/plot; default NULL. plot.labels..retrieve vector indices referencing plots plot.objects limits, , axis labels retrived multiplot vs using arguments specified multiplot style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements remove..border.lines defaults FALSE. Flag whether borders around plots removed. preload.default ability set multiple sets diffrent defaults depending publication needs plot..carry...plot get.dendrogram.plot retrieve dendrogram dendrogram.right.size size right side dendrogram dendrogram.right.x x position right side dendrogram dendrogram.right.y y position right side dendrogram dendrogram.top.size size top side dendrogram dendrogram.top.x x position top side dendrogram dendrogram.top.y y position top side dendrogram use.legacy.settings boolean set wheter use legacy mode settings (font)","code":""},{"path":"/reference/create.multiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joins plots together — create.multiplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.multiplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joins plots together — create.multiplot","text":"Ken Chu Denise Mak","code":""},{"path":"/reference/create.multiplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Joins plots together — create.multiplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":"/reference/create.multiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joins plots together — create.multiplot","text":"","code":"set.seed(12345);  # begin by creating the individual plots which will be combined into a multiplot dist <- data.frame(     a = rnorm(100, 1),      b = rnorm(100, 3),      c = rnorm(100, 5)     );  simple.data <- data.frame(     x = c(dist$a, dist$b, dist$c),     y = rep(LETTERS[1:3], each = 100)     );  fill.squares <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), ncol = 3, byrow = TRUE); rownames(fill.squares) <- c(\"Drug I only\", \"Drug II only\" , \"Drugs I & II\"); colnames(fill.squares) <- levels(factor(simple.data$y));  # Create plot # 1 simple.boxplot <- create.boxplot(     formula = x ~ y,     data = simple.data,     col = 'lightgrey'     );  # Create plot # 2 simple.heatmap <- create.heatmap(         x = t(fill.squares),         clustering.method = 'none',         shrink = 0.8,         colour.scheme = c(\"white\", \"grey20\"),         fill.colour = \"white\",         print.colour.key = FALSE         );  # Simple example of multiplot # This example uses the defaults set in simple.heatmap and simple.boxplot  create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Simple', fileext = '.tiff'),         plot.objects = list(simple.heatmap, simple.boxplot),         main = \"Simple\",         xlab.label = c(\"Patient Group\"),         # The plotting function throws an error if this is not included         ylab.label = c(\"Sugar Level\", \"Drug Regimen\"),         ylab.padding = 7,         # Parameters set in the multiplot will override settings in individual plots         xaxis.cex = 0.7,         yaxis.cex = 0.7,   resolution = 100         ); #> Warning: NAs introduced by coercion   # Simple example of multiplot with adjusted plot sizes create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Simple_Plot_Sizes', fileext = '.tiff'),         plot.objects = list(simple.heatmap, simple.boxplot),         main = \"Simple plot sizes\",         xlab.label = c(\"Patient Group\"),         # y-axis labels must be spaced with tabs or spaces to properly align         ylab.label = c(\"\", \"Sugar Level\", \"\", \"Drug Regimen\"),         ylab.padding = 7,         xaxis.cex = 0.7,         yaxis.cex = 0.7,         # Set the relative heights of the plots         panel.heights = c(3,1),   resolution = 100         ); #> Warning: NAs introduced by coercion   simple.violin <- create.violinplot(     formula = x ~ y,     data = simple.data,     col = 'lightgrey'     );  # Simple example of multiplot with custom layout create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Simple_Layout', fileext = '.tiff'),     plot.objects = list(simple.heatmap, simple.boxplot, simple.violin),     main = \"Simple layout\",     xlab.label = c(\"Patient Group\"),     ylab.label = c(\"\", \"Sugar Level\", \"\", \"Drug Regimen\"),     ylab.padding = 7,     xaxis.cex = 0.7,     yaxis.cex = 0.7,     panel.heights = c(3,1),     # Set how many rows & columns are in the layout     plot.layout = c(2,2),     # Set whether to plot or not in the space (fills from bottom left to top right)     layout.skip = c(FALSE, TRUE, FALSE, FALSE),     # Move plots closer together     x.spacing = 0,     # Remove doubled internal axis     yat = list(         seq(1,3,1),         seq(-2, 8, 2),         c()         ),     resolution = 100     ); #> Warning: NAs introduced by coercion   # Example of how to take parameter values from individual plots # This programming structure allows for including the individual customization  # of plots to the final multiplot all_data <- data.frame(     a = rnorm(n = 25, mean = 0, sd = 0.75),     b = rnorm(n = 25, mean = 0, sd = 0.75),     c = rnorm(n = 25, mean = 0, sd = 0.75),     d = rnorm(n = 25, mean = 0, sd = 0.75),     e = rnorm(n = 25, mean = 0, sd = 0.75),     f = rnorm(n = 25, mean = 0, sd = 0.75),     x = rnorm(n = 25, mean = 5),     y = seq(1, 25, 1)     );  plot.heatmap <- function(all_data){     # save the parameter values that will be reused in the multiplot     multiplot_visuals <- list(         xlab.label = '',         xaxis.labels = NULL,         xat = NULL,         ylab.label = 'Genes of Interest',         yaxis.labels = c(\"BRCA1\", \"BRCA2\", \"APC\", \"TIN\", \"ARG\", \"FOO\"),         yat = c(1,2,3,4,5,6)         );      # create the plot -- this allows for previewing of the individual plot     heatmap.formatted <- create.heatmap(         x = all_data[,1:6],         clustering.method = 'none',         colour.scheme = c('magenta','white','green'),         print.colour.key = FALSE,         xlab.label = multiplot_visuals$xlab.label,         xaxis.lab = multiplot_visuals$xaxis.labels,         xat = multiplot_visuals$xat,         ylab.label = multiplot_visuals$ylab.label,         yaxis.lab = multiplot_visuals$yaxis.labels,         yat = multiplot_visuals$yat          );       # return both the plot and the relevant parameter values     return(         list(             the_plot = heatmap.formatted,             visuals = multiplot_visuals             )         ) }  plot.barplot <- function(all_data) {      # save the parameter values that will be reused in the multiplot     multiplot_visuals <- list(         xlab.label = '',         xaxis.labels = NULL,         xat = NULL,         ylab.label = 'Importance',         yaxis.labels = seq(1, ceiling(max(all_data$x)), 1),         yat = seq(1, ceiling(max(all_data$x)), 1)         );      # create the plot -- this allows for previewing of the individual plot     barplot.formatted <- create.barplot(         formula = x ~ y,         data = all_data[,7:8],         border.lwd = 0,         col = 'grey',         xlab.label = multiplot_visuals$xlab.label,         xaxis.lab = multiplot_visuals$xaxis.labels,         xat = multiplot_visuals$xat,         ylab.label = multiplot_visuals$ylab.label,         yaxis.lab = multiplot_visuals$yaxis.labels,         yat = multiplot_visuals$yat         );      # return both the plot and the relevant parameter values     return(         list(             the_plot = barplot.formatted,             visuals = multiplot_visuals             )         )     }  plot_functions <- c('plot.heatmap', 'plot.barplot');  # run the functions all_plots <- lapply(     plot_functions,      function(funName){         eval(parse(text = paste0(funName, '(all_data)')))         }     );  create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Formatting', fileext = '.tiff'),     main = \"Formatting\",     plot.objects = lapply(all_plots, function(aPlot) aPlot$the_plot),     panel.heights = c(1,3),     xaxis.cex = 1,     yaxis.cex = 1,     ylab.padding = 8,     yat = lapply(all_plots,function(aPlot) aPlot$visuals$yat),     xlab.label = lapply(all_plots,function(aPlot) aPlot$visuals$xlab.label),     ylab.label = rev(lapply(all_plots,function(aPlot) aPlot$visuals$ylab.label)),     yaxis.labels = lapply(all_plots,function(aPlot) aPlot$visuals$yaxis.labels),     resolution = 100     );   data_bars <- data.frame(     x = sample(x = 5:35, size = 10),     y = seq(1,10,1)     );  data_cov <- data.frame(     x = rnorm(n = 10, mean = 0, sd = 0.75),     y = rnorm(n = 10, mean = 0, sd = 0.75),     z = rnorm(n = 10, mean = 0, sd = 0.75)     );  # Create main barplot bars <- create.barplot(     formula = x~y,     data = data_bars,     ylimits = c(0,35),     sample.order = 'increasing',     border.lwd = 0     );  # Make covariate bars out of heatmaps cov_1 <- create.heatmap(     x = as.matrix(data_bars$y),     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = default.colours(4),     grid.col = TRUE,     col.colour = 'black',     # col.lwd = 10,     total.col = 5,     print.colour.key = FALSE,     yaxis.tck = 0,     axes.lwd = 0     );  cov_2 <- create.heatmap(     x = as.matrix(data_cov$y),     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = c(\"lightblue\",\"dodgerblue2\", \"dodgerblue4\"),     grid.col = TRUE,     col.colour = 'black',     # col.lwd = 10,     total.col = 4,     print.colour.key = FALSE,     yaxis.tck = 0     ); #> Warning: Colour allocation scheme failed, moving to a default method  cov_3 <- create.heatmap(     x = as.matrix(data_cov$z),     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = c(\"grey\",\"coral1\"),     grid.col = TRUE,     col.colour = 'black',     # col.lwd = 10,     total.col = 3,     print.colour.key = FALSE,     yaxis.tck = 0     );  # Generate legends outside of individual functions legend <- legend.grob(     list(         legend = list(             colours = default.colours(4),             title = \"Batch\",             labels = LETTERS[1:4],             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             ),         legend = list(             colours = c(\"lightblue\",\"dodgerblue2\",\"dodgerblue4\"),             title = \"Grade\",             labels = c(\"Low\",\"Normal\",\"High\"),             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             ),         legend = list(             colours = c(\"grey\",\"coral1\"),             title = \"Biomarker\",             labels = c(\"Not present\",\"Present\"),             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             )         ),     title.just = 'left'     );  # Assemble plot using multiplot function create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Barchart', fileext = '.tiff'),     main = 'Multiplot with bar chart',     plot.objects = list(cov_3, cov_2, cov_1, bars),     ylab.label = c(\"\\t\", \"Response to treatment\",\"\\t\"),     xlab.label = \"Sample characteristics\",     panel.heights = c(1, 0.05,0.05,0.05),     y.spacing = c(-1, -1, -1, 0),     xaxis.lab = NULL,     yaxis.lab = list(NULL, NULL, NULL, seq(0, 350, 50)),     legend = list(right = list(fun = legend)),     print.new.legend = TRUE,     xaxis.alternating = 0,     main.cex = 1,     ylab.cex = 1,     xlab.cex = 1,     xlab.to.xaxis.padding = -2,     yaxis.cex = 1,     description = \"Multiplot example created by BoutrosLab.plotting.general\",     resolution = 200     );   # \\donttest{ gene_data <- data.frame(     x = rnorm(n = 25, mean = 0, sd = 0.75),     y = rnorm(n = 25, mean = 0, sd = 0.75),     z = rnorm(n = 25, mean = 0, sd = 0.75),     v = rnorm(n = 25, mean = 0, sd = 0.75),     w = rnorm(n = 25, mean = 0, sd = 0.75),     a = rnorm(n = 25, mean = 0, sd = 0.75),     b = rnorm(n = 25, mean = 0, sd = 0.75),     c = rnorm(n = 25, mean = 0, sd = 0.75)     );  # main heatmap main <- create.heatmap(     x = gene_data,     xaxis.tck = 0,     yaxis.tck = 0,     colourkey.cex = 1,     clustering.method = 'none',     axes.lwd = 1,     ylab.label = 'y',     xlab.label = 'x',     yaxis.fontface = 1,     xaxis.fontface = 1,     xlab.cex = 1,     ylab.cex = 1,     main.cex = 1,     colour.scheme = c('red','white','turquoise')     );  key_data <- data.frame(     x <- seq(-50,50,1)     );  # colour key for heatmap key <- create.heatmap(     x = key_data,     clustering.method = 'none',     scale.data = FALSE,     colour.scheme = c('turquoise','white','red'),     print.colour.key = FALSE,     yaxis.tck = 0,     xat = c(10,90),     xaxis.lab = c('low', 'high')     );  top_data <- data.frame(     x = rnorm(n = 25, mean = 0, sd = 0.75),     y = seq(1,25,1)     );  # top barplot top <- create.barplot(     formula = x~y,     data = top_data,     border.lwd = 0     );  side_data <- data.frame(     x = rnorm(n = 8, mean = 0, sd = 0.75),     y = seq(1,8,1)     );  # side barplot side <- create.barplot(     formula = x~y,     data = side_data,     border.lwd = 0,     sample.order = 'decreasing',     plot.horizontal = TRUE     );  # assembling final figure create.multiplot(     # filename = tempfile(pattern = 'Multiplot_with_heatmap', fileext = '.tiff'),     main = 'Multiplot with heatmap',     plot.objects = list(key, main, side, top),     panel.heights = c(0.25, 1, 0.05),     panel.widths = c(1, 0.25),     plot.layout = c(2, 3),     layout.skip = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE),     xaxis.alternating = 0,     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1,     ylab.cex = 1,     xlab.label = c('\\t', 'Samples', '\\t', '    Importance'),     ylab.label = c( 'Amount (g)', '\\t', '\\t', 'Genes', '\\t', '\\t'),     ylab.padding = 6,     xlab.to.xaxis.padding = 0,     xaxis.lab = list(         c(\"\",'low',\"\", \"\",'high', \"\"),         LETTERS[1:25],         seq(0,5,1),         NULL         ),     yaxis.lab = list(         NULL,         replicate(8, paste(sample(LETTERS, 4, replace = TRUE), collapse = \"\")),         NULL,         seq(0,4,0.05)         ),     x.spacing = -0.5,     y.spacing = c(0,-1),     xaxis.fontface = 1,     yaxis.fontface = 1     );   # Set up plots for complex example  # Dotmap spot_sizes <- function(x) { 0.5 * abs(x); } dotmap_dot_colours <- c('red','blue'); spot_colours <- function(x) {     colours <- rep('white', length(x));     colours[sign(x) == -1] <- dotmap_dot_colours[1];     colours[sign(x) ==  1] <- dotmap_dot_colours[2];     return(colours);     };  # Dotmap colours orange <- rgb(249/255, 179/255, 142/255); blue <- rgb(154/255, 163/255, 242/255); green <- rgb(177/255, 213/255, 181/255); bg.colours <- c(green, orange, blue, 'gold', 'skyblue', 'plum');  dotmap <- create.dotmap(     x = CNA[1:15,1:58],     bg.data = SNV[1:15,1:58],     # Set the colour scheme     colour.scheme = bg.colours,     # Set the breakpoints for the colour scheme (determined from the data)     at = c(0,1,2,4,6,7,8),     # Specify the total number of colours (+1 for the fill colour)     total.colours = 7,     col.colour = 'white',     row.colour = 'white',     bg.alpha = 1,     fill.colour = 'grey95',     spot.size.function = spot_sizes,     spot.colour.function = spot_colours,     xaxis.tck = 0,     xaxis.cex = 0.7,     yaxis.cex = 0.7,     xaxis.rot = 90     );  # Dotmap legend dotmap_legend <- list(     legend = list(         colours = bg.colours,         labels = c('Nonsynonymous','Stop Gain','Frameshift deletion',              'Nonframeshift deletion', 'Splicing', 'Unknown'),         border = 'white',         title = 'SNV',         pch = 15         ),     legend = list(         colours = dotmap_dot_colours,         labels = c('Gain','Loss'),         border = 'white',         title = 'CNA',         pch = 19         )     );  dotmap_legend.grob <- legend.grob(     legends = dotmap_legend,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  # Covariates cov.colours <- c(     c('dodgerblue','pink'),     c('grey','darkseagreen1','seagreen2','springgreen3','springgreen4'),     c('peachpuff','tan4')     );  # the heatmap expects numeric data cov.data <- patient[-c(4:9)]; cov.data[cov.data == 'male'] <- 1; cov.data[cov.data == 'female'] <- 2; cov.data[is.na(cov.data)] <- 3; cov.data[cov.data == 'I'] <- 4; cov.data[cov.data == 'II'] <- 5; cov.data[cov.data == 'III'] <- 6; cov.data[cov.data == 'IV'] <- 7; cov.data[cov.data == 'MSS'] <- 8; cov.data[cov.data == 'MSI-High'] <- 9; cov.data$sex <- as.numeric(cov.data$sex); cov.data$stage <- as.numeric(cov.data$stage); cov.data$msi <- as.numeric(cov.data$msi);  covariates <- create.heatmap(     x = cov.data,     clustering.method = 'none',     colour.scheme = as.vector(cov.colours),     total.colours = 10,     row.colour = 'white',     col.colour = 'white',     grid.row = TRUE,     grid.col = TRUE,     yaxis.tck = 0,     print.colour.key = FALSE     ); #> Warning: number of colum ns exceeded limit (50), column lines are turned off. #> \t\t\t\tPlease set \"force.grid.col\" to TRUE to override this  # Coviate Legends cov_legends <- list(     legend = list(         colours = cov.colours[8:9],         labels = c('MSS','MSI-High'),         border = 'white',         title = 'MSI'         ),     legend = list(         colours = cov.colours[3:7],          labels = c('NA', 'I','II','III','IV'),         border = 'white',         title = 'Stage'         ),     legend = list(         colours = cov.colours[1:2],         labels = c('Male','Female'),         border = 'white',         title = 'Sex'         )     );  cov_legend.grob <- legend.grob(     legends = cov_legends,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7,     layout = c(3,1)     );  # Multiplot of dotmap and covariates create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Dotmap_Cov', fileext = '.tiff'),     plot.objects = list(covariates, dotmap),     main = 'Dotmap & covariates',     panel.heights = c(1,0.1),     # Set some of the yat to NULL to let R figure it out     yat = c(seq(1,15,1), NULL),     xat = NULL,     yaxis.lab = list(         c('Sex','Stage','MSI'),         rev(rownames(SNV)[1:15])         ),     yaxis.cex = 0.7,     y.spacing = -1,     legend = list(         bottom = list(             x = 0.10,             y = 0.50,             fun = cov_legend.grob             ),         right = list(             x = 0.10,             y = 0.50,             fun = dotmap_legend.grob             )         ),     # This parameter must be set for the legend to appear     print.new.legend = TRUE,     # Adding spacing for the legend     bottom.padding = 5     );   # Add more plots, using more complex layout # grouped barplot groupedbar_colours <- c('indianred1','indianred4');  count.SNV <- apply(SNV[1:15,], 2, function(x){length(which(!is.na(x)))}); count.CNA <- apply(CNA[1:15,], 2, function(x){length(which(!(x==0)))});  grouped_data <- data.frame(     values = c(count.SNV, count.CNA),     samples = rep(colnames(SNV),2),     group = rep(c('SNV','CNA'), each = 58)     );  grouped_barplot <- create.barplot(     formula = values ~ samples,     data = grouped_data,     groups = grouped_data$group,     col = groupedbar_colours,     border.col = 'white'     );  # stacked barplot col_one <- rgb(255/255, 225/255, 238/255); col_two <- rgb(244/255, 224/255, 166/255); col_thr <- rgb(177/255, 211/255, 154/255); col_fou <- rgb(101/255, 180/255, 162/255); col_fiv <- rgb(51/255, 106/255, 144/255); stackedbar_colours <- c(col_one, col_two, col_thr, col_fou, col_fiv, 'orchid4'); stacked_data_labels <- c('C>A/G>T','C>T/G>A','C>G/G>C','T>A/A>T','T>G/A>C', 'T>C/A>G');  stacked_data <- data.frame(     values = c(patient$prop.CAGT, patient$prop.CTGA, patient$prop.CGGC, patient$prop.TAAT,          patient$prop.TGAC, patient$prop.TCAG),      divisions = rep(rownames(patient), 6),     group = rep(stacked_data_labels, each = 58)     );  # Generate stacked barplot stacked_barplot <- create.barplot(     formula = values ~ divisions,     data = stacked_data,     groups = stacked_data$group,     stack = TRUE,     col = stackedbar_colours,     border.col = 'white'     );  # barchart legends stackedbar_legend <- list(     legend = list(         colours = rev(stackedbar_colours),         labels = rev(stacked_data_labels),         border = 'white'         )     );  groupedbar_legend <- list(     legend = list(         colours = groupedbar_colours,         labels = c('CNA','SNV'),         border = 'white'         )     );  groupedbar_legend.grob <- legend.grob(     legends = groupedbar_legend,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  stackedbar_legend.grob <- legend.grob(     legends = stackedbar_legend,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  # Expression change Segplot # locate matching genes rows.to.keep <- which(match(rownames(microarray), rownames(SNV)[1:15], nomatch = 0) > 0);  segplot.data <- data.frame(     min = apply(microarray[rows.to.keep,1:58], 1, min),     max = apply(microarray[rows.to.keep,1:58], 1, max),     median = apply(microarray[rows.to.keep,1:58], 1, median),     order = seq(1,15,1)     );  segplot <- create.segplot(     formula = order ~ min + max,     data = segplot.data,     main = 'Medians',     centers = segplot.data$median,     pch = 15     );  # Create multiplot plots <- list(covariates, dotmap, segplot, stacked_barplot, grouped_barplot);  create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Complex', fileext = '.tiff'),     main = 'Complex',     # These dimensions make the plot look much more proportional     width = 12,     height = 8,     plot.objects = plots,     panel.heights = c(0.2, 0.2, 1, 0.1),     panel.widths = c(1,0.1),     plot.layout = c(2, 4),     layout.skip = c(FALSE,TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,TRUE),     xaxis.lab = list(         NULL,         NULL,         seq(0,14,2),         NULL,         NULL),     yaxis.lab = list(         c('Sex','Stage','MSI'),         rownames(SNV)[1:15],         NULL,         seq(0.0,1.0,0.2),         seq(0,16,4)         ),     x.spacing = -0.5,     y.spacing = -1.5,     xaxis.cex = 0.7,     yaxis.cex = 0.7,     xat = list(         NULL,         NULL,         seq(0,10,2.5),         NULL,         NULL         ),     yat = list(         seq(1,3,1),         seq(1,15,1),         NULL,         seq(0.0,1.0,0.2),         seq(0,16,4)         ),     ylab.label = c( 'Mutation', 'Proportion','\\t','\\t','\\t','\\t','\\t'),     ylab.cex = 0.7,     xlab.cex = 0.7,     xlab.to.xaxis.padding = 2,     key.bottom.padding = 5,     bottom.padding = 5,     right.padding = 8,     legend = list(         bottom = list(             x = 0.10,             y = 0.50,             fun = cov_legend.grob             ),         inside = list(             x = 0.91,             y = 0.96,             fun = groupedbar_legend.grob             ),         inside = list(             x = 0.91,             y = 0.86,             fun = stackedbar_legend.grob             ),         left = list(             fun = dotmap_legend.grob,             args = list(                 key = list(                     points = list(                         pch = c(15,15,19,19)                         )                     )                 )             )         ),     print.new.legend = TRUE,     resolution = 200     );   # Nature style create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Nature_style', fileext = '.tiff'),     plot.objects = list(simple.heatmap, simple.boxplot),     main = \"Nature style\",     ylab.padding = 7,     xaxis.cex = 0.7,     yaxis.cex = 0.7,      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = c(expression(paste('italicized ', italic('a'))),      expression(paste('italicized ', italic('b')))),        # demonstrating how to create en-dashes     xlab.label = c(expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3))),     resolution = 200     ); #> Warning: NAs introduced by coercion #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend   # Create a multiplot with a heatmap, key like legend and barplot  # First create a heatmap object simple.heatmap <- create.heatmap(patient[, 4:6],     clustering.method = 'none',     print.colour.key = FALSE,     scale=TRUE,     same.as.matrix = FALSE,     colour.scheme = c('gray0','grey100'),     fill.colour = 'grey95' );    # and a simple bar plot pvals <- data.frame(         order = c(1:3),         pvalue = -log10(c(0.0004, 0.045, 0.0001)),         stringsAsFactors = FALSE         ) #create bar plot simple.bar <- create.barplot(         formula = order ~ rev(pvalue),         data = pvals,         xlimits = c(0,5),         plot.horizontal=TRUE         );  # then the covariates heatmap cov.colours <- c(     c('dodgerblue','pink'),     c('grey','darkseagreen1','seagreen2','springgreen3','springgreen4'),     c('peachpuff','tan4')     );  # the heatmap expects numeric data cov.data <- patient[-c(4:9)]; cov.data[cov.data == 'male'] <- 1; cov.data[cov.data == 'female'] <- 2; cov.data[is.na(cov.data)] <- 3; cov.data[cov.data == 'I'] <- 4; cov.data[cov.data == 'II'] <- 5; cov.data[cov.data == 'III'] <- 6; cov.data[cov.data == 'IV'] <- 7; cov.data[cov.data == 'MSS'] <- 8; cov.data[cov.data == 'MSI-High'] <- 9; cov.data$sex <- as.numeric(cov.data$sex); cov.data$stage <- as.numeric(cov.data$stage); cov.data$msi <- as.numeric(cov.data$msi);  covariates <- create.heatmap(     x = cov.data,     clustering.method = 'none',     colour.scheme = as.vector(cov.colours),     total.colours = 10,     row.colour = 'white',     col.colour = 'white',     grid.row = TRUE,     grid.col = TRUE,     yaxis.tck = 0,     print.colour.key = FALSE     ); #> Warning: number of colum ns exceeded limit (50), column lines are turned off. #> \t\t\t\tPlease set \"force.grid.col\" to TRUE to override this covariates2 <- create.heatmap(     x = patient[4],     clustering.method = 'none',     colour.scheme = c(\"#00007F\", \"#007FFF\"),     row.colour = 'white',     col.colour = 'white',     grid.row = TRUE,     grid.col = TRUE,     yaxis.tck = 0,     print.colour.key = FALSE     ); #> Warning: number of rows exceeded limit (50), row lines are turned off. #> \t\t\t\tPlease set \"force.grid.row\" to TRUE to override this  cov_legends <- list(     legend = list(         colours = c(\"white\", \"black\"),         labels = c('0','2'),         border = 'grey',         title = 'Tumour Mass (kg)',         continuous = TRUE,   height = 3         ),     legend = list(         colours = cov.colours[8:9],         labels = c('MSS','MSI-High'),         border = 'white',         title = 'MSI'         ),     legend = list(         colours = cov.colours[3:7],         labels = c('NA', 'I','II','III','IV'),         border = 'white',         title = 'Stage'         ),     legend = list(         colours = cov.colours[1:2],         labels = c('Male','Female'),         border = 'white',         title = 'Sex'         ),     legend = list(         colours = c(\"#00007F\", \"#007FFF\"),         labels = c('0.09','0.72'),         border = 'grey',         title = 'CAGT',   continuous = TRUE,   height = 2,         width = 3,   angle = -90,   tck = 1,   tck.number = 2,   at = c(0,100)         )     );  cov_legend.grob <- legend.grob(     legends = cov_legends,     title.just = 'left',     label.cex = 0.7,     title.cex = 0.7     );  # Now bring it was together using multiplot create.multiplot(     main = 'multiplot with colour key legend',     main.cex = 1,     # filename = tempfile(pattern = 'MultiPlot_With_ColorKey_Legend', fileext = '.tiff'),     plot.objects = list(covariates, covariates2, simple.heatmap, simple.bar),     panel.heights = c(1,0.1,0.35),     panel.widths = c(1,0.25),     plot.layout = c(2,3),     layout.skip = c(FALSE, TRUE, FALSE, TRUE,FALSE,FALSE),     xaxis.alternating = 1,     # Set some of the yat to NULL to let R figure it out     yaxis.lab = list(         c('Sex','Stage','MSI'),         NULL,   c('one','two','three'),         NULL         ),     xaxis.lab = list(         NULL,         NULL,   NULL,         seq(0,5,1)     ),     xat = list(         NULL,         NULL,   NULL,         seq(0,5,1)     ),     yaxis.tck = 0,     xlab.to.xaxis.padding = 0,     yaxis.cex = 0.5,     xaxis.cex = 0.5,     xlab.cex = 0.75,     ylab.cex = 0.75,     xlab.label = c('\\t', 'samples', '\\t', '    -log10 pval'),     ylab.label = c(\"\", \"Test\", \"\",\"CAGT\",  \"covariates\"),     y.spacing = 0,     x.spacing = 0,     legend = list(         left = list(             x = 0.10,             y = 0.50,             fun = cov_legend.grob             )         ),     left.padding = 2.5,     # This parameter must be set for the legend to appear     print.new.legend = TRUE     );   BarPlotDataRetLabels <- data.frame(x = c(\"test1\",\"test2\",\"test3\",\"test4\"),             y = c(10000,13000,12000,6700)) HeatMapDataRetLabels <- matrix(nrow = 4, ncol = 4, data = rnorm(16,1,1))  bpRet <- create.barplot(   formula = y~x,    data = BarPlotDataRetLabels,    xaxis.lab = NULL,    xat = 0   ); hmRet <- create.heatmap(   x= HeatMapDataRetLabels,    yaxis.lab = c(\"Gene 1\", \"Gene 2\", \"Gene 3\", \"Gene 4\"),    yat = c(1,2,3,4),    clustering.method = 'none'   );  create.multiplot(   # filename = tempfile(pattern = 'Multiplot_RetrievePlotLabels', fileext = '.tiff'),   plot.objects = list(hmRet,bpRet,bpRet),    print.new.legend = TRUE,   xlab.label = c('Samples'),   ylab.padding = 12,   y.spacing = c(0,0),   panel.heights = c(0.25,1,0.25),   plot.labels.to.retrieve = c(1,2,3)   );   create.multiplot(     # filename = tempfile(pattern = 'Multiplot_Retrieve_Specefic_Labels', fileext = '.tiff'),         plot.objects = list(simple.heatmap, simple.boxplot),         main = \"Simple\",         xlab.label = c(\"Patient Group\"),   xaxis.labels = c(\"1\",\"Drug Regimen\"),         # The plotting function throws an error if this is not included         ylab.label = c(\"Sugar Level\", \"Drug Regimen\"),         ylab.padding = 7,         # Parameters set in the multiplot will override settings in individual plots         xaxis.cex = 0.7,         yaxis.cex = 0.7,   yaxis.labels = c(NA,NA),   xat = list(TRUE,TRUE),   yat = list(TRUE,TRUE),   plot.labels.to.retrieve = c(1),   xlimits = list(NULL,c(\"A\",\"B\",\"C\")),   ylimits = list(NULL,c(-3,10))         );   # Dendrogram provided dist <- data.frame(     a = rnorm(100, 1),      b = rnorm(100, 3),      c = rnorm(100, 5)     );  simple.data <- data.frame(     x = c(dist$a, dist$b, dist$c),     y = rep(LETTERS[1:3], each = 100)     ); col.dendrogram <- BoutrosLab.plotting.general::create.dendrogram(     x = microarray[1:20, 1:20],     cluster.dimension = 'col'     );  row.dendrogram <- BoutrosLab.plotting.general::create.dendrogram(     x = microarray[1:20, 1:20],     cluster.dimension = 'row'     );  simple.boxplot <- create.boxplot(     formula = x ~ y,     data = simple.data,     col = 'lightgrey'     );  simple.heatmap <- create.heatmap(     x = microarray[1:20, 1:20],     main = 'Dendrogram provided',     xlab.label = 'Genes',     ylab.label = 'Samples',     xaxis.lab = NA,     yaxis.lab = 1:20,     xaxis.cex = 0.75,     yaxis.cex = 0.75,     xaxis.fontface = 1,     yaxis.fontface = 1,     colourkey.cex = 1,     colourkey.labels.at = seq(2,12,1),     colour.alpha = 'automatic',     # note: row/column dendrograms are switched because the function inverts rows and columns     clustering.method = 'none',     row.dendrogram = col.dendrogram,     col.dendrogram = row.dendrogram,     # Adjusting the size of the dendrogram     right.dendrogram.size = 3,     top.dendrogram.size = 2.5,     description = 'Heatmap created using BoutrosLab.plotting.general'     );      legend <- legend.grob(     list(         legend = list(             colours = default.colours(4),             title = \"Batch\",             labels = LETTERS[1:4],             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             ),         legend = list(             colours = c(\"lightblue\",\"dodgerblue2\",\"dodgerblue4\"),             title = \"Grade\",             labels = c(\"Low\",\"Normal\",\"High\"),             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             ),         legend = list(             colours = c(\"grey\",\"coral1\"),             title = \"Biomarker\",             labels = c(\"Not present\",\"Present\"),             size = 3,             title.cex = 1,             label.cex = 1,             border = 'black'             )         ),     title.just = 'left'     ); create.multiplot(         # filename = tempfile(pattern = 'MultiPlot_getDendrograms', fileext = '.tiff'),         plot.objects = list(simple.heatmap, simple.boxplot),         main = \"Simple\",         xlab.label = c(\"Patient Group\"),   y.spacing = 3,         # The plotting function throws an error if this is not included         ylab.label = c(\"Sugar Level\", \"Drug Regimen\"),         ylab.padding = 7,         # Parameters set in the multiplot will override settings in individual plots         xaxis.cex = 0.7,         yaxis.cex = 0.7,   yaxis.lab = list(     c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),     c(-2,-1,0,1,2,3,4,5)     ),   xaxis.lab = list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15, 16,17,18,19,20),c(1,2,3)),   xaxis.rot = 45,   xaxis.rot.top = 90,       legend = list(right = list(fun = legend)),   print.new.legend = TRUE,   get.dendrogram.from = 1,    dendrogram.right.size = 0.40, dendrogram.right.x = 29, dendrogram.right.y = 67,   dendrogram.top.size = 1, dendrogram.top.x = 110, dendrogram.top.y = -180         );  # }"},{"path":"/reference/create.polygonplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a polygonplot — create.polygonplot","title":"Make a polygonplot — create.polygonplot","text":"Takes data.frame creates polygon","code":""},{"path":"/reference/create.polygonplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a polygonplot — create.polygonplot","text":"","code":"create.polygonplot(   formula,   data,   filename = NULL,   groups = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   max,   min,   col = 'white',   alpha = 0.5,   border.col = 'black',   strip.col = 'white',   strip.cex = 1,   type = 'p',   cex = 0.75,   pch = 19,   lwd = 1,   lty = 1,   axes.lwd = 1,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.log = FALSE,   yaxis.log = FALSE,   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.tck = 1,   yaxis.tck = 1,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   top.padding = 0.5,   bottom.padding = 2,   right.padding = 1,   left.padding = 2,   ylab.axis.padding = 0,   add.border = FALSE,   add.xy.border = NULL,   add.median = FALSE,   median.lty = 3,   median.lwd = 1.5,   use.loess.border = FALSE,   use.loess.median = FALSE,   median = NULL,   median.col = 'black',   extra.points = NULL,   extra.points.pch = 21,   extra.points.type = 'p',   extra.points.col = 'black',   extra.points.fill = 'white',   extra.points.cex = 1,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   xgrid.at = xat,   ygrid.at = yat,   grid.lty = 1,   grid.col = 'grey',   grid.lwd = 0.3,   add.xyline = FALSE,   xyline.col = 'black',   xyline.lwd = 1,   xyline.lty = 1,   abline.h = NULL,   abline.v = NULL,   abline.col = 'black',   abline.lwd = 1,   abline.lty = 1,   add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.col = 'black',   text.cex = 1,   text.fontface = 'bold',   key = NULL,   legend = NULL,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,   inside.legend.auto = FALSE   );"},{"path":"/reference/create.polygonplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a polygonplot — create.polygonplot","text":"formula formula used extract boxplot components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object groups grouping variable data-frame main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title max Max values polygon min Min values polygon col Fill colour polygon, defaults white alpha Transparency polygons several plotted, defaults 0.5. border.col Border colour(s) polygon(s), defaults black strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion type Plot type cex Character expansion plotting symbol pch Plotting character lwd Specifies line width, defaults 1 lty Specifies line style, defaults 1 (solid) axes.lwd Thickness width axes lines xlab.label label x-axis ylab.label label y-axis xlab.cex Size x-axis label, defaults 3 ylab.cex Size y-axis label, defaults 3 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis scales, defaults 2 yaxis.cex Size y-axis scales, defaults 2 xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.log Logical indicating whether x-variable logarithmic scale (base numeric) yaxis.log Logical indicating whether y-variable logarithmic scale (base numeric) xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 xlimits Two-element vector giving x-axis limits ylimits Two-element vector giving y-axis limits xat Vector listing x-axis labels drawn yat Vector listing y-axis labels drawn layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details . .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” top.padding number specifying distance top margin, defaults 0.5 bottom.padding number specifying distance bottom margin, defaults 2 right.padding number specifying distance right margin, defaults 1 left.padding number specifying distance left margin, defaults 2 ylab.axis.padding number specifying distance ylabel y-axis, defaults 0 , add.border Add xy border polygon, default FALSE add.xy.border DEPRECATED: Use `add.border` argument instead add.median Add median line, default FALSE median.lty Median line type median.lwd Median line width, defaults 1.5 use.loess.border Use loess curve border instead max/min values, default FALSE use.loess.median Use loess curve median values, default FALSE median Median values median line median.col Median line colour, default black extra.points set NULL (default), add set extra points plot. list two numeric vectors named “x” “y” giving co-ordinates points added extra.points.pch vector specifying types extra points add plot. Defaults 21 extra.points.type vector specifying plot type. Defaults “p” extra.points.col vector specifying border colours extra points add plot. Defaults “black” extra.points.fill vector specifying fill colours extra points add plot. Defaults “white” extra.points.cex vector specifying sizes extra points add plot. Defaults 1 add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle xgrid.vector listing co-ordinates vertical grid-lines drawn. Default suppresses drawing vertical grid-lines ygrid.vector listing co-ordinates horizontal grid-lines drawn. Default suppresses drawing horizontal grid-lines grid.lty Specifies line type use grid-lines. Defaults 1 (solid lines) grid.col Specifies colour use grid-lines. Defaults “grey” grid.lwd Specifies width grid-lines. Defaults 0.3 add.xyline Allow y=x line drawn, default FALSE xyline.col y=x line colour, defaults black xyline.lwd Specifies y=x line width, defaults 1 xyline.lty Specifies y=x line style, defaults 1 (solid) abline.h Allow horizontal line drawn, default NULL abline.v Allow vertical line drawn, default NULL abline.col Horizontal line colour, defaults black abline.lwd Specifies horizontal line width, defaults 1 abline.lty Specifies horizontal line style, defaults 1 (solid) add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.col colour additional text text.cex size additional text text.fontface fontface additional text key Add key plot. See xyplot. legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL. style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function","code":""},{"path":"/reference/create.polygonplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a polygonplot — create.polygonplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.polygonplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a polygonplot — create.polygonplot","text":"Denise Mak","code":""},{"path":"/reference/create.polygonplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a polygonplot — create.polygonplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.polygonplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a polygonplot — create.polygonplot","text":"","code":"set.seed(12345);  temp  <- matrix(runif(1010), ncol = 10) + sort(runif(101));  simple.data <- data.frame(     x = 0:100,     max = apply(temp, 1, max),     min = apply(temp, 1, min)     );  create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Simple', fileext = '.tiff'),     formula = NA ~ x,     data = simple.data,     max = simple.data$max,     min = simple.data$min,     main = 'Simple',     xlimits = c(0,100),     ylimits = c (0,2),     col = default.colours(1),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 100     );   # Compare two genes across increasing numbers of samples data1 <- microarray[1,1:58]; data2 <- microarray[2,1:58];  gene1 <- as.data.frame(matrix(nrow = 58, ncol = 58)); gene2 <- as.data.frame(matrix(nrow = 58, ncol = 58));  fill.matrix <- function(x, gene, data){     for(i in x){         gene[i, 1:i] <- rep(NA, i);         gene[i, i:58] <- rep(as.numeric(data[i]), 58-i+1);         }     return(gene);     };  gene1 <- fill.matrix(1:58, gene1, data1); gene1 <- t(matrix(unlist(gene1), ncol = 58, byrow = TRUE));  gene2 <- fill.matrix(1:58, gene2, data2); gene2 <- t(matrix(unlist(gene2), ncol = 58, byrow = TRUE));  # Set up the data polygon.data.gene1 <- data.frame(     x = 1:58,     max = apply(gene1, 2, function(x) {max(x, na.rm = TRUE)}),     median = apply(gene1, 2, function(x) {median(x, na.rm = TRUE)}),     min = apply(gene1, 2, function(x) {min(x, na.rm = TRUE)}),     set = rownames(microarray[1,]),     extra = apply(microarray[1:58], 2, function(x) {median(x)})     );  polygon.data.two.genes <- rbind(     polygon.data.gene1,     data.frame(         x = 1:58,         max = apply(gene2, 2, function(x) {max(x, na.rm = TRUE)}),         median = apply(gene2, 2, function(x) {median(x, na.rm = TRUE)}),         min = apply(gene2, 2, function(x) {min(x, na.rm = TRUE)}),         set = rownames(microarray[2,]),         extra = apply(microarray[1:58], 2, function(x) {median(x)})         )     )  # Minimal Input create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Minimal_Input', fileext = '.tiff'),     formula = NA ~ x,     data = polygon.data.gene1,     max = polygon.data.gene1$max,     min = polygon.data.gene1$min,     main = 'Minimal input',     xlimits = c(0,58),     ylimits = c (2,5),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 100     );   # Axes & Labels create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Axes_Labels', fileext = '.tiff'),     formula = NA ~ x,     data = polygon.data.gene1,     max = polygon.data.gene1$max,     min = polygon.data.gene1$min,     main = 'Axes & labels',     xlimits = c(0,58),     ylimits = c (0,10),     # Axes & Labels     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 10, 2),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 100     );   # Colour create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Colour', fileext = '.tiff'),     formula = NA ~ x,     data = polygon.data.gene1,     max = polygon.data.gene1$max,     min = polygon.data.gene1$min,     main = 'Colour',     xlimits = c(0,58),     ylimits = c (0,10),     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 10, 2),     # Colour     col = default.colours(1),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 100     );   # Add median line and points create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Median_Points', fileext = '.tiff'),     formula = NA ~ x,     data = polygon.data.gene1,     max = polygon.data.gene1$max,     min = polygon.data.gene1$min,     # Median     median = polygon.data.gene1$median,     add.median = TRUE,     main = 'Plotting character',     xlimits = c(0,58),     ylimits = c (0,10),     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 10, 2),     col = default.colours(1),     # border points     add.border = TRUE,     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Additional Data create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Extra_Data', fileext = '.tiff'),     formula = NA ~ x,     # divide data     groups = set,     data = polygon.data.two.genes,     max = polygon.data.two.genes$max,     min = polygon.data.two.genes$min,     main = 'Two data sets',     median = polygon.data.two.genes$median,     add.median = TRUE,     xlimits = c(0,58),     ylimits = c (0,15),     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 14, 2),     # Increasing number of colours     col = default.colours(2),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 100     );   # Legend create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Legend', fileext = '.tiff'),     formula = NA ~ x,     groups = set,     data = polygon.data.two.genes,     max = polygon.data.two.genes$max,     min = polygon.data.two.genes$min,     main = 'Legend',     median = polygon.data.two.genes$median,     add.median = TRUE,     xlimits = c(0,58),     ylimits = c (0,15),     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 14, 2),     col = default.colours(2),     # Adding legend     key = list(         text = list(             lab = rownames(microarray[1:2,]),             cex = 0.8,             col = 'black'             ),         points = list(             pch = 15,             col = default.colours(2),             cex = 2             ),         x = 0.04,         y = 0.93,         padding.text = 3,         columns = 1         ),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 200     );   # Panel Organiation create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Panel', fileext = '.tiff'),     # divide data     formula = NA ~ x | set,     data = polygon.data.two.genes,     max = polygon.data.two.genes$max,     min = polygon.data.two.genes$min,     main = 'Panel',     median = polygon.data.two.genes$median,     add.median = TRUE,     xlimits = c(0,58),     ylimits = c (0,15),     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 14, 2),     col = default.colours(1),     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 200     );   # Extra Points create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Extra_Points', fileext = '.tiff'),     formula = NA ~ x,     groups = set,     data = polygon.data.two.genes,     max = polygon.data.two.genes$max,     min = polygon.data.two.genes$min,     main = 'Extra points',     median = polygon.data.two.genes$median,     add.median = TRUE,     xlimits = c(0,58),     ylimits = c (0,15),     xlab.label = 'Samples',     ylab.label = 'Value',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 14, 2),     col = default.colours(2),     # Add to legend     key = list(         text = list(             lab = c(rownames(microarray[1:2,]), 'All genes'),             cex = 0.8,             col = 'black'             ),         points = list(             pch = c(15, 15, 3),             col = c(default.colours(2), 'red'),             cex = c(2, 2, 0.7)             ),         x = 0.04,         y = 0.93,         padding.text = 3,         columns = 1         ),     # Extra points     extra.points = list(         x = polygon.data.two.genes$x,         y = polygon.data.two.genes$extra         ),     extra.points.col = 'red',     extra.points.pch = 3,     extra.points.type = c('p', 'l'),     extra.points.cex = 0.7,     description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature style create.polygonplot(     # filename = tempfile(pattern = 'Polygon_Nature_style', fileext = '.tiff'),     formula = NA ~ x,     groups = set,     data = polygon.data.two.genes,     max = polygon.data.two.genes$max,     min = polygon.data.two.genes$min,     main = 'Nature style',     median = polygon.data.two.genes$median,     add.median = TRUE,     xlimits = c(0,58),     ylimits = c (0,15),     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xat = seq(0, 58, 5),     yat = seq(0, 14, 2),     col = default.colours(2),     # Adding legend     key = list(         text = list(             lab = rownames(microarray[1:2,]),             cex = 0.8,             col = 'black'             ),         points = list(             pch = 15,             col = default.colours(2),             cex = 2             ),         x = 0.04,         y = 0.93,         padding.text = 3,         columns = 1         ),      # set style to Nature     style = 'Nature',      # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),      # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Polygon created by BoutrosLab.plotting.general',     resolution = 1200     ); #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.  # }"},{"path":"/reference/create.qqplot.comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","title":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","text":"Takes two samples creates qq plot comparing two distributions, possibly conditioned variables","code":""},{"path":"/reference/create.qqplot.comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","text":"","code":"create.qqplot.comparison(   x,   data = NULL,   filename = NULL,   groups = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   aspect = 'fill',   prepanel = NULL,   xlab.label = NULL,   ylab.label = NULL,   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.log = FALSE,   yaxis.log = FALSE,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.tck = 1,   yaxis.tck = 1,   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   add.grid = FALSE,   xgrid.at = xat,   ygrid.at = yat,   type = 'p',   cex = 0.75,   pch = 19,   col = 'black',   lwd = 1,   lty = 1,   axes.lwd = 2.25,   key = list(text = list(lab = c(''))),   legend = NULL,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   top.padding = 3,   bottom.padding = 0.7,   left.padding = 0.5,   right.padding = 0.1,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,   inside.legend.auto = FALSE   );"},{"path":"/reference/create.qqplot.comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","text":"x formula list two numeric vectors data optional data source x formula filename Filename tiff output, NULL returns trellis object aspect argument controls physical aspect ratio panels, defaults “fill” prepanel function takes arguments “panel” add.grid Default manner drawing grid lines - custom grids, use type = c('p','g') set xat, yat, xgrid., ygrid.parameters groups grouping variable data-frame main main plot title main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 xlab.label label x-axis ylab.label label y-axis main.cex Size overall plot title, defaults 3 xlab.cex Size x-axis label, defaults 2.5 ylab.cex Size y-axis label, defaults 2.5 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic xgrid.Vector listing x-axis grid lines drawn, defaults xat ygrid.Vector listing y-axis grid lines drawn, defaults yat xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.cex Size x-axis scales, defaults 1.5 yaxis.cex Size y-axis scales, defaults 1.5 xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.log Logical indicating whether x-variable logarithmic scale (base numeric) yaxis.log Logical indicating whether y-variable logarithmic scale (base numeric) xaxis.rot Counterclockwise rotation text x-axis scales degrees, defaults 0 yaxis.rot Counterclockwise rotation text y-axis scales degrees, defaults 0 xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 type Plot type cex Character expansion plotting symbol pch Plotting character col Point/line colour lwd Specifies line width, defaults 1 lty Specifies line style, defaults 1 (solid) axes.lwd Thickness width axes lines key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. top.padding number giving top padding multiples lattice default bottom.padding number giving bottom padding multiples lattice default left.padding number giving left padding multiples lattice default right.padding number giving right padding multiples lattice default height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL. add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function","code":""},{"path":"/reference/create.qqplot.comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.qqplot.comparison.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","text":"Ying Wu","code":""},{"path":[]},{"path":"/reference/create.qqplot.comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a quantile-quantile plot of two samples — create.qqplot.comparison","text":"","code":"set.seed(12345);  create.qqplot.comparison(     # filename = tempfile(pattern = 'QQcomparison_Simple', fileext = '.tiff'),     x = list(rnorm(100), rnorm(100)),     resolution = 50     );   # Minimal Input create.qqplot.comparison(     # filename = tempfile(pattern = 'QQcomparison_Minimal_Input', fileext = '.tiff'),     x = list(microarray[1:500,2], microarray[1:500,2]),     main = 'Minimal input',     description = 'QQplot comparison created by BoutrosLab.plotting.general',     resolution = 50     );   # Axes & Labels create.qqplot.comparison(     # filename = tempfile(pattern = 'QQcomparison_Axes_Labels', fileext = '.tiff'),     x = list(microarray[1:500,2], microarray[1:500,2]),     main = 'Axes & labels',     # adding axes and labels     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlab.cex = 1.5,     ylab.cex = 1.5,     # adding grid for good measure     add.grid = TRUE,     description = 'QQplot comparison created by BoutrosLab.plotting.general',     resolution = 100     );   # Formula input  # 'Formula' format of data chr.locations <- microarray$Chr[1:500]; chr.locations <- replace(chr.locations, which(chr.locations == 1), 'Chromosome 1'); chr.locations <- replace(chr.locations, which(chr.locations == 2), 'Chromosome 2');  qqplot.data <- data.frame(     sample = c(rep('Sample 1', 500), rep('Sample 2', 500)),     value = c(microarray[1:500,1], microarray[1:500,2]),     chr = chr.locations     );   create.qqplot.comparison(     # filename = tempfile(pattern = 'QQcomparison_Formula', fileext = '.tiff'),     # Using a different input method     x = sample ~ value,     data = qqplot.data,     main = 'Formula input',     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xaxis.lab = seq(0, 15, 5),     yaxis.lab = seq(0, 15, 5),     xlimits = c(0, 17),     ylimits = c(0, 17),     xlab.cex = 1.5,     ylab.cex = 1.5,     add.grid = TRUE,     description = 'QQplot comparison created by BoutrosLab.plotting.general',     resolution = 200     );   # \\donttest{ # Groups & Legend create.qqplot.comparison(  # filename = tempfile(pattern = 'QQcomparison_Groups_Legend', fileext = '.tiff'),     x = sample ~ value,     data = qqplot.data,     # Using fake grouping for the sake of illustration     groups = qqplot.data$chr,     # Set colours to differente the gruops     col = default.colours(3),     # Setting different plotting characters     pch = c(15, 16),     main = 'Groups & legend',     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlab.cex = 1.5,     ylab.cex = 1.5,     add.grid = TRUE,     # Adding legend to explain groups     key = list(         text = list(             lab = c('1','2'),             cex = 1.5,             col = 'black'             ),         points = list(             pch = c(15, 16),             col = default.colours(2),             cex = 1             ),         x = 0.04,         y = 0.95,         padding.text = 2         ),     description = 'QQplot comparison created by BoutrosLab.plotting.general',     resolution = 200     );   # Multiple qq plots create.qqplot.comparison(     # filename = tempfile(pattern = 'QQcomparison_Multiple', fileext = '.tiff'),     x = sample ~ value | chr,     data = qqplot.data,     main = 'Multiple plots',     xlab.label = 'Sample 1',     ylab.label = 'Sample 2',     xlab.cex = 1.5,     ylab.cex = 1.5,     add.grid = TRUE,     description = 'QQplot comparison created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature style create.qqplot.comparison(     # filename = tempfile(pattern = 'QQcomparison_Nature_style', fileext = '.tiff'),     x = sample ~ value,     data = qqplot.data,     main = 'Nature style',     xlab.cex = 1.5,     ylab.cex = 1.5,     add.grid = TRUE,     # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'QQplot comparison created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.  # }"},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"Returns values constructing confidence bands one-sample qq plot","code":""},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"","code":"create.qqplot.fit.confidence.interval(x, distribution = qnorm, conf = 0.95,     conf.method = \"both\", reference.line.method = \"quartiles\");"},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"x numeric vector distribution quantile function takes vector probabilities argument produces corresponding quantiles theoretical distribution, defaults \"qnorm\", normal distribution. conf Confidence level, default 0.95 conf.method Methods used draw confidence bands must one \"simultaneous\", \"pointwise\", \"\"(default). reference.line.method Methods used draw reference line must one \"quartiles\"(default), \"diagonal\", \"robust\".","code":""},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"Returns values creating upper lower bands qq plot.","code":""},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"Note function works single panel qq plot, grouped data multi-qq plot.","code":""},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"Ying Wu","code":""},{"path":"/reference/create.qqplot.fit.confidence.interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the confidence bands for a one-sample qq plot — create.qqplot.fit.confidence.interval","text":"","code":"tmp.x <- rnorm(100);  tmp.confidence.interval <- create.qqplot.fit.confidence.interval(tmp.x);  qqnorm(tmp.x); qqline(tmp.x); lines(tmp.confidence.interval$z, tmp.confidence.interval$upper.pw, lty = 2, col = \"brown\"); lines(tmp.confidence.interval$z, tmp.confidence.interval$lower.pw, lty = 2, col = \"brown\"); lines(tmp.confidence.interval$z[tmp.confidence.interval$u],      tmp.confidence.interval$upper.sim, lty = 2, col = \"blue\"); lines(tmp.confidence.interval$z[tmp.confidence.interval$l],      tmp.confidence.interval$lower.sim, lty = 2, col = \"blue\");  legend(1, -1.5, c(\"simultaneous\", \"pointwise\"), col = c(\"blue\", \"brown\"), lty = 2, bty = \"n\");"},{"path":"/reference/create.qqplot.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a quantile-quantile plot of a sample — create.qqplot.fit","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"Takes sample creates qq plot theoretical distribution, possibly conditioned variables.","code":""},{"path":"/reference/create.qqplot.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"","code":"create.qqplot.fit(   x,   data = NA,   filename = NULL,   groups = NULL,   confidence.bands = FALSE,   conf = 0.95,         confidence.method = 'both',   reference.line.method = 'quartiles',   distribution = qnorm,   aspect = 'fill',         prepanel = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,         xlab.label = NULL,   ylab.label = NULL,   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',         xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,         xlab.top.y = 0,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,         xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',         yaxis.fontface = 'bold',   xaxis.log = FALSE,   yaxis.log = FALSE,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.tck = 1,         yaxis.tck = 1,   add.grid = FALSE,   xgrid.at = xat,   ygrid.at = yat,   type = 'p',   cex = 0.75,   pch = 19,   col = 'black',         col.line = 'grey',   lwd = 2,   lty = 1,   axes.lwd = 2.25,   key = list(text = list(lab = c(''))),   legend = NULL,         add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,         ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   top.padding = 3,   bottom.padding = 0.7,         left.padding = 0.5,   right.padding = 0.1,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,         enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',         style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,   inside.legend.auto = FALSE   );"},{"path":"/reference/create.qqplot.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"x formula numeric vector data optional data source x formula filename Filename tiff output, NULL returns trellis object groups grouping variable data-frame confidence.bands Add confidence bands , default FALSE. Note function, confidence band can added single plot, multi-qq plot. conf Confidence level, default 0.95 confidence.method Methods used draw confidence bands: “simultaneous”, “pointwise”, “”, defaults “”. reference.line.method Methods used draw reference line must one “quartiles”(default), “diagonal”, “robust”. “quartiles” draw line across 1/4 3/4 quantiles, “diagonal” draw 0-1 line, “robust” draw best fit line basing linear model. Note: multi-panel plot, default one applicable. distribution quantile function takes vector probabilities argument produces corresponding quantiles theoretical distribution, defaults “qnorm”, normal distribution. aspect argument controls physical aspect ratio panels, defaults “fill” prepanel function takes arguments “panel” main main plot title main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size overall plot title, defaults 3 xlab.label x-axis title ylab.label y-axis title xlab.cex Size x-axis label, defaults 2.5 ylab.cex Size y-axis label, defaults 2.5 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis scales, defaults 1.5 yaxis.cex Size y-axis scales, defaults 1.5 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.log Logical indicating whether x-variable logarithmic scale (base numeric) yaxis.log Logical indicating whether y-variable logarithmic scale (base numeric) xaxis.rot Counterclockwise rotation text x-axis scales degrees, defaults 0 yaxis.rot Counterclockwise rotation text y-axis scales degrees, defaults 0 xaxis.tck Specifies length tick marks x-axis, defaults 1 yaxis.tck Specifies length tick marks y-axis, defaults 1 add.grid Default manner drawing grid lines xgrid.Vector listing x-axis grid lines drawn, defaults xat ygrid.Vector listing y-axis grid lines drawn, defaults yat type Plot type cex Character expansion plotting symbol pch Plotting character col Point colour col.line QQ line colour, defaults grey lwd Specifies line width, defaults 2 lty Specifies line style, defaults 1 (solid) axes.lwd Thickness width axes lines key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x ooordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn top.padding number giving top padding multiples lattice default bottom.padding number giving bottom padding multiples lattice default left.padding number giving left padding multiples lattice default right.padding number giving right padding multiples lattice default height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL. style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function","code":""},{"path":"/reference/create.qqplot.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.qqplot.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"Ying Wu","code":""},{"path":"/reference/create.qqplot.fit.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"Note confidence band works single panel qq plot, grouped data multi-qq plot. ? missing?","code":""},{"path":[]},{"path":"/reference/create.qqplot.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a quantile-quantile plot of a sample — create.qqplot.fit","text":"","code":"set.seed(12345); create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Simple', fileext = '.tiff'),     x = rnorm(300),     # choosing to compare against a uniform distribution     distribution = qunif,     resolution = 100     ); #> Warning: explicit 'data' specification ignored   # Minimal Input create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Minimal_Input', fileext = '.tiff'),     x = microarray[1:500,1],     # choosing to compare against a uniform distribution     distribution = qunif,     main = 'Minimal input',     description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: explicit 'data' specification ignored   # Axes and Labels create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Axes_Labels', fileext = '.tiff'),     x = microarray[1:500,1],     distribution = qunif,     main = 'Axes & labels',     # Adding axes labels     xlab.label = 'qunif',     ylab.label = 'sample values',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xaxis.cex = 1,     yaxis.cex = 1,     add.grid = TRUE,     description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: explicit 'data' specification ignored   # Confidence bands  create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Confidence_Bands', fileext = '.tiff'),     x = microarray[1:500,1],     distribution = qunif,     main = 'Confidence bands',     xlab.label = 'qunif',     ylab.label = 'sample values',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xaxis.cex = 1,     yaxis.cex = 1,     add.grid = TRUE,     # Adding confidence bands (auto-generates legend)     confidence.bands = TRUE,     confidence.method = 'both',     description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: explicit 'data' specification ignored   # \\donttest{ # Multiple qq plot conditioned on a variable # 'Formula' format of data chr.locations <- microarray$Chr[1:500]; chr.locations <- replace(chr.locations, which(chr.locations == 1), 'Chromosome 1'); chr.locations <- replace(chr.locations, which(chr.locations == 2), 'Chromosome 2');  qqplot.data <- data.frame(     value = microarray[1:500,1],     chr = chr.locations     );  create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Multiple', fileext = '.tiff'),     x = ~ value | chr,     data = qqplot.data,     distribution = qunif,     main = 'Multiple plots',     xlab.label = 'qunif',     ylab.label = 'sample values',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xaxis.cex = 1,     yaxis.cex = 1,     add.grid = TRUE,     confidence.bands = TRUE,     confidence.method = 'simultaneous',     description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 100     );   # Grouped qq plot create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Grouped', fileext = '.tiff'),     x = ~ value,     data = qqplot.data,     # Adding groups     groups = qqplot.data$chr,     # Colouring groups     col = default.colours(2),     # Setting different plotting characters     pch = c(15, 19),     distribution = qunif,     main = 'Grouped & legend',     xlab.label = 'qunif',     ylab.label = 'sample values',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xaxis.cex = 1,     yaxis.cex = 1,     add.grid = TRUE,     confidence.bands = TRUE,     confidence.method = 'simultaneous',     # Adding legend for groups     key = list(         text = list(             lab = c('1','2'),             cex = 1,             col = 'black'             ),         points = list(             pch = c(15, 19),             col = default.colours(2),             cex = 1             ),         x = 0.04,         y = 0.95,         padding.text = 2         ),     description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 100     );   # Correlation Key create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Correlation_Key', fileext = '.tiff'),     x = ~ value,     data = qqplot.data,     groups = qqplot.data$chr,     col = default.colours(2),     pch = c(15, 19),     distribution = qunif,     main = 'Correlation key',     xlab.label = 'qunif',     ylab.label = 'sample values',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xaxis.cex = 1,     yaxis.cex = 1,     add.grid = TRUE,     confidence.bands = TRUE,     confidence.method = 'simultaneous',     # Adjusting legend to contain multiple keys     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                         text = list(                             lab = c('1','2'),                             cex = 1,                             col = 'black'                             ),                         points = list(                             pch = c(15, 19),                             col = default.colours(2),                             cex = 1                             ),                         x = 0.14,                         y = 0.80,                         padding.text = 2                     )                 )             ),         inside = list(             fun = draw.key,             args = list(                 key = get.corr.key(                     x = runif(500),                     y = qqplot.data$value,                     label.items = c('spearman', 'kendall','beta1'),                     alpha.background = 0,                     key.cex = 1                     )                 ),             x = 0.75,             y = 0.20,             corner = c(0,1)             )         ),     description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: Cannot compute exact p-value with ties   # Nature style create.qqplot.fit(     # filename = tempfile(pattern = 'QQfit_Nature_style', fileext = '.tiff'),     x = microarray[1:500,1],     distribution = qunif,     main = 'Nature style',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.fontface = 1,     yaxis.fontface = 1,     xaxis.cex = 1,     yaxis.cex = 1,     add.grid = TRUE,     confidence.bands = TRUE,     confidence.method = 'both',      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'QQplot fit created by BoutrosLab.plotting.general',     resolution = 1200     ); #> Warning: explicit 'data' specification ignored #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.  # }"},{"path":"/reference/create.scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a scatterplot — create.scatterplot","title":"Make a scatterplot — create.scatterplot","text":"Takes data.frame creates scatterplot","code":""},{"path":"/reference/create.scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a scatterplot — create.scatterplot","text":"","code":"create.scatterplot(   formula,   data,   filename = NULL,   groups = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,         main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),         xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',         xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,         xlab.top.y = 0,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   xaxis.lab = NA,   yaxis.lab = NA,   xaxis.log = FALSE,   yaxis.log = FALSE,         xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.tck = c(1,1),   yaxis.tck = c(1,1),   add.grid = FALSE,   xgrid.at = xat,         ygrid.at = yat,   grid.colour = NULL,   horizontal = FALSE,   type = 'p',   cex = 0.75,   pch = 19,   col = 'black',   col.border = 'black',   lwd = 1,   lty = 1,   alpha = 1,   axes.lwd = 1,   strip.col = 'white',   strip.cex = 1,   strip.fontface = 'bold',   y.error.up = NULL,   y.error.down = y.error.up,   x.error.right = NULL,   x.error.left = x.error.right,   y.error.bar.col = 'black',   x.error.bar.col = y.error.bar.col,   error.whisker.angle = 90,   error.bar.lwd = 1,   error.bar.length = 0.1,   key = list(text = list(lab = c(''))),   legend = NULL,   top.padding = 0.1,   bottom.padding = 0.7,   right.padding = 0.1,   left.padding = 0.5,   key.top = 0.1,   key.left.padding = 0,   ylab.axis.padding = 1,   axis.key.padding = 1,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   add.axes = FALSE,   axes.lty = 'dashed',   add.xyline = FALSE,   xyline.col = 'black',   xyline.lwd = 1,   xyline.lty = 1,   abline.h = NULL,   abline.v = NULL,   abline.col = 'black',   abline.lwd = 1,   abline.lty = 1,   add.curves = FALSE,   curves.exprs = NULL,   curves.from = min(data, na.rm = TRUE),   curves.to = max(data, na.rm = TRUE),   curves.col = 'black',   curves.lwd = 2,   curves.lty = 1,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   add.points = FALSE,   points.x = NULL,   points.y = NULL,   points.pch = 19,   points.col = 'black',   points.col.border = 'black',   points.cex = 1,   add.line.segments = FALSE,   line.start = NULL,   line.end = NULL,   line.col = 'black',   line.lwd = 1,   add.text = FALSE,   text.labels = NULL,   text.x = NULL,   text.y = NULL,   text.col = 'black',   text.cex = 1,   text.fontface = 'bold',   text.guess.labels = FALSE,   text.guess.skip.labels = TRUE,   text.guess.ignore.radius = FALSE,   text.guess.ignore.rectangle = FALSE,   text.guess.radius.factor = 1,   text.guess.buffer.factor = 1,   text.guess.label.position = NULL,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   group.specific.colouring = TRUE,   use.legacy.settings = FALSE,   inside.legend.auto = FALSE,   regions.labels = c(),         regions.start = c(),   regions.stop = c(),   regions.color = c(\"red\"),   regions.cex = 1,   regions.alpha = 1,         lollipop.bar.y = NULL,   lollipop.bar.color = \"gray\",   ...   );"},{"path":"/reference/create.scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a scatterplot — create.scatterplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object groups grouping variable data-frame main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title xlab.label x-axis label ylab.label y-axis label xlab.cex Size x-axis label, defaults 3 ylab.cex Size y-axis label, defaults 3 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.log Logical indicating whether x-variable logarithmic scale (base numeric) yaxis.log Logical indicating whether y-variable logarithmic scale (base numeric) xaxis.cex Size x-axis scales, defaults 2 yaxis.cex Size y-axis scales, defaults 2 xaxis.rot Counterclockwise rotation text x-axis scales degrees, defaults 0 yaxis.rot Counterclockwise rotation text y-axis scales degrees, defaults 0 xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.tck Specifies length tick mark, defaults 1 top bottom axes yaxis.tck Specifies length tick mark, defaults 1 top bottom axes add.grid Logical stating wheter grid drawn plot xgrid.Vector listing x-axis grid lines drawn, defaults xat ygrid.Vector listing y-axis grid lines drawn, defaults yat grid.colour ability set individual grid line colours horizontal xyplot-specific function allows change type='h' draws lines vertical horizontal axis type Plot type cex Character expansion plotting symbol pch Plotting character col Point/line colour col.border Colour border points pch >= 21. Defaults “black” lwd Specifies line width, defaults 1 lty Specifies line style, defaults 1 (solid) alpha Specifies line transparency, defaults 1 (opaque) axes.lwd Thickness width axes lines strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion strip.fontface Strip title fontface, defaults bold y.error.upward error vector. Defaults NULL. y.error.NULL, vertical error bar drawn y.error.Downward error vector. Defaults y.error.show symmetric error bars x.error.right Rightward error vector. Defaults NULL. x.error.right NULL, horizontal error bar drawn x.error.left Leftward error vector. Defaults x.error.right show symmetric error bars y.error.bar.col Colour vertical error bar. Defaults “black” x.error.bar.col Colour horizontal error bar. Defaults “black” error.whisker.angle Angle whisker drawn error bar. Defaults 90 degree error.bar.lwd Error bar line width. Defaults 1 error.bar.length Length error bar whiskers. Defaults 0.1 key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.7 right.padding number specifying distance right margin, defaults 0.1 left.padding number specifying distance left margin, defaults 0.5 key.top number specifying distance top key, defaults 0.1 key.left.padding Amount padding go onto legend left ylab.axis.padding number specifying distance ylabel y-axis, defaults 1 axis.key.padding number specifying distance y-axis key, defaults 1 layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” add.axes Allow axis lines turned , default FALSE axes.lty Specifies axis line style, defaults “dashed” add.xyline Allow y=x line drawn, default FALSE xyline.col y=x line colour, defaults black xyline.lwd Specifies y=x line width, defaults 1 xyline.lty Specifies y=x line style, defaults 1 (solid) abline.h Allow horizontal line drawn, default NULL abline.v Allow vertical line drawn, default NULL abline.col Horizontal line colour, defaults black abline.lwd Specifies horizontal line width, defaults 1 abline.lty Specifies horizontal line style, defaults 1 (solid) add.curves Allow curves drawn, default FALSE curves.exprs list functions, expressions, calls using “x” variable specify curves drawn curves.Specifies x co-ordinates start curve drawn, defaults drawing curves left edge plotting region curves.Specifies x co-ordinates end curve drawn, defaults drawing curves right edge plotting region curves.col Specifies colours curves, default black curve curves.lwd Specifies width curves, default 1 curve curves.lty Specifies type curves, default 1 (solid) curve add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x ooordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn add.points Allow additional points drawn, default FALSE points.x x co-ordinates additional points drawn points.y y co-ordinates additional points drawn points.pch plotting character additional points points.col colour additional points points.col.border Colour border additional points points.pch >= 21. Defaults black points.cex size additional points add.line.segments Allow additional line segments drawn, default FALSE line.start y co-ordinates additional line segments start line.end y co-ordinates additional line segments end line.col colour additional line segments, default black line.lwd line width additional line segments, default 1 add.text Allow additional text drawn, default FALSE text.labels Labels additional text text.x x co-ordinates additional text placed text.y y co-ordinates additional text placed text.col colour additional text text.cex size additional text text.fontface fontface additional text text.guess.labels Allows automatic labeling considering values text.x text.y data point labelled, default FALSE text.guess.skip.labels Provides option disregard automatic labelling algorithm space available around data point, thus forcing labelling collision likely, default TRUE text.guess.ignore.radius Allows automatic labeling algorithm ignore radius space data point, useful label cluster data points single text box, default FALSE text.guess.ignore.rectangle Allows atuomatic labeling algorithm ignore rectangle space multiple potential label positions, default FALSE text.guess.radius.factor numeric value factor radius value alter distance label data point text.guess.buffer.factor numeric value factor buffer value alter space used consider data.points potentially going collide text.guess.label.position numeric value 0 360 specify percise angle text box center positive x-axis. Angles move counter-clockwise beginning positive x axis height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs group.specific.colouring Variable specify group specific multi colouring error bars enforced use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function regions.labels Labels regions lollipop plots bars regions.start start x value regions regions.stop stop value regions regions.color color regions regions.cex size text regions regions.alpha alpha regions lollipop.bar.y y location top lollipop plot bar -- defaults right bottom y axis lollipop.bar.color color lollipop plot bar ... Additional arguments passed xyplot","code":""},{"path":"/reference/create.scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a scatterplot — create.scatterplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.scatterplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a scatterplot — create.scatterplot","text":"Paul C. Boutros","code":""},{"path":"/reference/create.scatterplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a scatterplot — create.scatterplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.scatterplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a scatterplot — create.scatterplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = rnorm(800),     y = rnorm(800)     ); create.scatterplot( #    # filename = tempfile(pattern = 'Scatterplot_Simple', fileext = '.tiff'),     formula = y ~ x,     data = simple.data,     resolution = 50     );   scatter.data <- data.frame(     sample.one = microarray[1:800,1],     sample.two = microarray[1:800,2],     chr = microarray$Chr[1:800]     );  # Minimal Input create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Minimal_Input', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Minimal Input',     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 50     );   # Axes & Labels create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Axes_Labels', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Axes & Labels',     # Axes and labels     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 50     );   # Plotting space create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Plotting_Space', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Plotting Space',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     # change axes accordingly     xat = 2 ** (0:4),     yat = seq(0, 16, 2),     # change axes range accordingly     xlimits = c(2 ** 0,16),     ylimits = c(0, 15),     # format labels     xaxis.lab = c(         expression('2'^'0'),         expression('2'^'1'),         expression('2'^'2'),         expression('2'^'3'),         expression('2'^'4')         ),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     # Transform the x-axis into log-2 space     xaxis.log = 2,     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 50     );   # Colour & Plotting Character create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Colour_Pch', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Colour & Pch',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     # setting the colour     col = default.colours(2)[2],     # setting the plotting character type & size     pch = 21,     cex = 1.5,     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 100     );   # Colour depth # create colour scheme to illustrate adding a colourkey chr.palette <- colour.gradient(default.colours(2)[2], 800);  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Colour_Depth', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Colour Depth',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     # setting the colour     col = chr.palette,     # setting the plotting character type & size     pch = 19,     cex = 1,     # adding key for colours     key.top = 1.5,     legend = list(         bottom = list(             fun = draw.colorkey,             args = list(                 key = list(                     col = chr.palette,                     at = 1:800,                     tick.number = 3,                     space = 'bottom',                     size = 1,                     width = 1.25,                     height = 1,                     labels = list(                         labels = 1:3,                         cex = 1,                         at = c(1, which(scatter.data$chr == 2)[1], which(scatter.data$chr == 3)[1])                         )                     )                 )             )         ),     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 100     );   # Groups & Legend create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Groups_Legend', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Groups & Legend',     # using arbitrary groups for the sake of illustration     groups = scatter.data$chr,     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     col = default.colours(3),     # Adding legend for groups     key = list(         text = list(             lab = c('1','2','3'),             cex = 1,             col = 'black'             ),         points = list(             pch = 19,             col = default.colours(3),             cex = 1             ),         x = 0.04,         y = 0.95,         padding.text = 2         ),     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 100     );   # Correlation Key create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Correlation_Key', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Correlation Key',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     col = 'black',     pch = 21,     # Adding correlation key     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = get.corr.key(                     x = scatter.data$sample.one,                     y = scatter.data$sample.two,                     label.items = c('spearman','spearman.p','kendall','beta1'),                     alpha.background = 0,                     key.cex = 1                     )                 ),             x = 0.04,             y = 0.95,             corner = c(0,1)             )         ),     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: Cannot compute exact p-value with ties   # \\donttest{ # Panel Organization create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Panel_numeric_conditional', fileext = '.tiff'),     formula = sample.two ~ sample.one | chr,     data = scatter.data,     main = 'Panel',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     # set up panel layout     layout = c(1,3),     yrelation = 'free',     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: Numeric values detected for conditional variable. If text labels are desired, please convert conditional variable to character.   scatter.data$chromosome <- as.character(scatter.data$chr);  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Panel_character_conditional', fileext = '.tiff'),     formula = sample.two ~ sample.one | chromosome,     data = scatter.data,     main = 'Panel',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     # set up panel layout     layout = c(1,3),     yrelation = 'free',     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 100     );   # Covariates cov.colours <- as.character(microarray$Chr[1:800]); cov.colours[cov.colours == '1'] <- default.colours(3, palette.type = 'chromosomes')[1]; cov.colours[cov.colours == '2'] <- default.colours(3, palette.type = 'chromosomes')[2]; cov.colours[cov.colours == '3'] <- default.colours(3, palette.type = 'chromosomes')[3];  cov <- list(     rect = list(         col = 'transparent',         fill = cov.colours         )     );  cov.grob <- covariates.grob(     covariates = cov,     ord = c(1:length(cov.colours)),     side = 'top',     size = 1     );  cov.legend <- list(     legend = list(         colours = default.colours(3, palette.type = 'chromosomes'),         labels = c('1', '2', '3'),         title = 'Chromosome',         border = 'transparent'         )     );  cov.legend.grob <- legend.grob(     legends = cov.legend     );  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Covariates', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Covariates',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     # Adding covariate & legend     legend = list(         bottom = list(fun = cov.grob),         right = list(fun = cov.legend.grob)         ),     # Ensuring sufficient spacing for covariate     key.top = 3,     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 200     );   # Error bars error.data <- data.frame(     chr = (microarray$Start)[1:20],     values = apply(microarray[1:20,1:58], 1, mean),     error = apply(microarray[1:20,1:58], 1, sd)     );  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Error_Bars', fileext = '.tiff'),     formula = values ~ chr,     data = error.data,     main = 'Error Bars',     xlab.label = 'Base pair location on chromosome one',     ylab.label = 'Gene expression change',     # xat = seq(0, 16, 2),     yat = seq(0, 14, 2),     # xlimits = c(0, 15),     ylimits = c(0, 13),     # Format xaxes     xaxis.lab = c(         scientific.notation(0, 1),         scientific.notation(1000000, 1),         scientific.notation(2000000, 1),         scientific.notation(3000000, 1),         scientific.notation(4000000, 1),         scientific.notation(5000000, 1),         scientific.notation(6000000, 1),         scientific.notation(7000000, 1)         ),     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 19,     col = 'black',     fill = 'transparent',     # Specifying error bars     error.bar.lwd = 1,     error.whisker.angle = 120,     y.error.up = error.data$error,     y.error.bar.col = 'black',     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 200     );   create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Error_Bars_MultiColor', fileext = '.tiff'),     formula = values ~ chr,     data = error.data,     main = 'Error Bars',     xlab.label = 'Base pair location on chromosome one',     ylab.label = 'Gene expression change',     # xat = seq(0, 16, 2),     yat = seq(0, 14, 2),     # xlimits = c(0, 15),     ylimits = c(0, 13),     # Format xaxes     xaxis.lab = c(         scientific.notation(0, 1),         scientific.notation(1000000, 1),         scientific.notation(2000000, 1),         scientific.notation(3000000, 1),         scientific.notation(4000000, 1),         scientific.notation(5000000, 1),         scientific.notation(6000000, 1),         scientific.notation(7000000, 1)         ),     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 19,     col = 'black',     fill = 'transparent',     # Specifying error bars     error.bar.lwd = 1,     error.whisker.angle = 120,     y.error.up = error.data$error,     y.error.bar.col = c('black','red','blue'),     description = 'Scatter plot created by BoutrosLab.plotting.general',     group.specific.colouring = FALSE,     resolution = 200     );    # Gridlines create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Gridlines', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Gridlines',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     # Adding gridlines     type = c('p','g'),     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 200     );   # lines & background rectangle create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Lines_BG', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Lines & BG rectangle',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     type = c('p','g'),     # add xy line     add.xyline = TRUE,     xyline.lty = 3,     xyline.col = 'red',     xyline.lwd = 3,     # add background rectangle     add.rectangle = TRUE,     xleft.rectangle = which(scatter.data$chr == 2)[1]/800*15,     xright.rectangle = which(scatter.data$chr == 3)[1]/800*15,     ybottom.rectangle = 0,     ytop.rectangle = 15,     col.rectangle = 'grey',     alpha.rectangle = 0.5,     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 200     );   # attach lines to points create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Lines', fileext = '.tiff'),     formula = sample.two ~ sample.one | chr,     data = scatter.data,     main = 'Lines',     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     # attach lines     type = c('h','p'),     layout = c(1,3),     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Numeric values detected for conditional variable. If text labels are desired, please convert conditional variable to character.   # ROC curve set.seed(123456);  class.values <- runif(50, 0, 1); observed.values <- sample(c(0,1), size = 50, replace = TRUE); cutoffs <- seq(1,0,-0.01); tprs <- c(); fprs <- c();  for (c in cutoffs) {         roc.classification <- rep(0, length(class.values));         roc.classification[class.values >= c] <- 1;         roc.results <- table(                 factor(roc.classification, levels = c(0,1)),                 factor(observed.values, levels = c(0,1)),                 dnn = c('pred', 'obs')                 );         tprs <- c(tprs, roc.results[2,2] / (roc.results[2,2] + roc.results[1,2]));         fprs <- c(fprs, roc.results[2,1] / (roc.results[2,1] + roc.results[1,1]));         }  roc.data <- data.frame(cutoff = cutoffs, TPR = tprs, FPR = fprs); points.x <- roc.data[match(c(0.25, 0.5, 0.75), roc.data$cutoff), 'FPR']; points.y <- roc.data[match(c(0.25, 0.5, 0.75), roc.data$cutoff), 'TPR'];  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_ROC', fileext = '.tiff'),     formula = TPR ~ FPR,     data = roc.data,     main = 'ROC',     xlab.label = 'False positive rate',     ylab.label = 'True positive rate',     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     type = 's',     lwd = 3,     add.xyline = TRUE,     xyline.col = 'grey',     add.points = TRUE,     points.x = points.x,     points.y = points.y,     points.col = c('blue', 'darkgreen', 'red'),     add.text = TRUE,     text.labels = paste('cutoff = ', c(0.25, 0.5, 0.75), sep = ''),     #text.x = points.x - 0.14,     #text.y = points.y + 0.03,     text.x = points.x,     text.y = points.y,     text.guess.labels = TRUE,     text.guess.label.position = 155,     text.guess.radius.factor = 2.5,     description = 'Scatter plot created by BoutrosLab.plotting.general',     resolution = 200     );   # Volcano Plots fold.change <- apply(microarray[,1:29], 1, mean) - apply(microarray[,30:58], 1, mean);  fake.microarray <- microarray[,1:58] - log(mean(apply(microarray[,1:58],1, mean))); fake.microarray[,30:58] <-  fake.microarray[,30:58] + mean(fold.change); fake.microarray[fake.microarray < 0] <- 0;  p.values <- apply(fake.microarray[,1:58], 1, function(x) {t.test(x=x[1:29],y=x[30:58])$p.value} ); fold.change <- apply(fake.microarray[, 1:29], 1, mean) - apply(fake.microarray[, 30:58], 1,mean); p.values.adjusted <- p.adjust(p.values, 'fdr');  dot.colours <- vector(length=length(p.values)); dot.colours[p.values.adjusted < .05 & fold.change < 0] <- 'green'; dot.colours[p.values.adjusted < .05 & fold.change > 0] <- 'red'; dot.colours[p.values.adjusted > .05] <- 'black';   volcano.data <- data.frame(     p.values = -log10(p.values.adjusted),     fold.change = fold.change     );  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Volcano_Plot', fileext = '.tiff'),     formula = p.values ~ fold.change,     data = volcano.data,     col = dot.colours,     alpha = .5,     yat = c(0,2,4,6,8),     ylimits = c(-0.1,8.1),     yaxis.lab = expression(10^0,10^-2,10^-4,10^-6,10^-8),     yaxis.cex = 1.5,     xaxis.cex = 1.5,     xlab.label = 'foldChange',     ylab.label = 'pValues',     xlab.cex = 1.75,     ylab.cex = 1.75,     resolution = 200     );   # Automatic Labeling interesting.fold.change <- (fold.change < -.9 | fold.change > .9); interesting.p.value <- (-log10(p.values.adjusted) < 8 & -log10(p.values.adjusted) > 2); interesting.points <- interesting.fold.change & interesting.p.value;  text.x <- fold.change[interesting.points]; text.y <- (-log10(p.values.adjusted))[interesting.points]; text.labels <- rownames(microarray)[interesting.points];  create.scatterplot(     # filename = tempfile(pattern = 'Scatterplot_Volcano_Plot_With_Labels', fileext = '.tiff'),     formula = p.values ~ fold.change,     data = volcano.data,     alpha = .5,     yat = c(0,2,4,6,8),     ylimits = c(-0.1,8.1),     xlimits = c(-1.5,1.5),     yaxis.lab = expression(10^0,10^-2,10^-4,10^-6,10^-8),     yaxis.cex = 1.5,     xaxis.cex = 1.5,     xlab.label = 'foldChange',     ylab.label = 'pValues',     xlab.cex = 1.75,     ylab.cex = 1.75,     add.text = TRUE,     text.x = text.x,     text.y = text.y,     text.labels = text.labels,     text.guess.labels = TRUE,     resolution = 200     );   # With line segments line.data <- data.frame(     group = c('A','B','C'),     x = sample(1:10,3),     y = sample(1:10,3),     z = sample(1:10,3)     );  create.scatterplot(     (x+y+z) ~ group,     line.data,     # filename = tempfile(pattern = 'Scatterplot_with_LineSegments', fileext = '.tiff'),     cex = 0,     add.line.segments = TRUE,     line.start = list(   rep(0,nrow(line.data)),   line.data$x,   c(line.data$x + line.data$y)   ),     line.end = list(   line.data$x,   c(line.data$x + line.data$y),   c(line.data$x + line.data$y + line.data$z)   ),     line.col = list('red','blue','green'),     line.lwd = list(3,3,3),     resolution = 200     ); #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion   lollipop.data <- data.frame(     y = seq(1,100,1),     x = rnorm(100)     );  create.lollipopplot(     # filename = tempfile(pattern = 'Lollipop_Simple', fileext = '.tiff'),     formula = x ~ y,     data = lollipop.data,     main = 'Lollipop plot',     xaxis.cex = 1,     xlimits = c(-1,102),     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     pch = 21,     col = 'black',     fill = 'transparent',     description = 'Scatter plot created by BoutrosLab.plotting.general',     regions.start = c(1,26,48),     regions.stop = c(15,35,72),     regions.labels = c(\"test 1\", \"test2\", \"test 3\"),     regions.color = c(\"#66b3ff\", \"#5cd65c\", \"#ff3333\"),     resolution = 200     );  # }"},{"path":"/reference/create.segplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a segplot — create.segplot","title":"Make a segplot — create.segplot","text":"Takes data.frame creates segplot","code":""},{"path":"/reference/create.segplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a segplot — create.segplot","text":"","code":"create.segplot(   formula,   data,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.tck = 1,   yaxis.tck = 1,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   abline.h = NULL,   abline.v = NULL,   abline.lty = 1,   abline.lwd = 1,   abline.col = 'black',   segments.col = 'black',   segments.lwd = 1,   layout = NULL,   as.table = FALSE,   x.spacing = 0,   y.spacing = 0,   x.relation = 'same',   y.relation = 'same',   top.padding = 0.5,   bottom.padding = 2,   right.padding = 1,   left.padding = 2,   ylab.axis.padding = 0,   level = NULL,   col.regions = NULL,   centers = NULL,   plot.horizontal = TRUE,   draw.bands = FALSE,   pch = 16,   symbol.col = 'black',   symbol.cex = 1,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   axes.lwd = 1,   key = NULL,   legend = NULL,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,   inside.legend.auto = FALSE,   disable.factor.sorting = FALSE   )"},{"path":"/reference/create.segplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a segplot — create.segplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 3 xlab.label x-axis label ylab.label y-axis label xlab.cex Size x-axis label, defaults 2 ylab.cex Size y-axis label, defaults 2 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis scales, defaults 1.5 yaxis.cex Size y-axis scales, defaults 1.5 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.fontface Fontface x-axis scales, defaults “plain” yaxis.fontface Fontface y-axis scales, defaults “plain” xaxis.rot Counterclockwise rotation text x-axis scales degrees, defaults 0 yaxis.rot Counterclockwise rotation text y-axis scales degrees, defaults 0 xaxis.tck Specifies length tick mark, defaults 1 top bottom axes yaxis.tck Specifies length tick mark, defaults 1 top bottom axes xlimits Two-element vector giving x-axis limits, defaults automatic ylimits Two-element vector giving y-axis limits, defaults automatic xat Vector listing x-axis labels drawn, defaults automatic yat Vector listing y-axis labels drawn, defaults automatic abline.h Allow horizontal line drawn, default NULL abline.v Allow vertical line drawn, default NULL abline.lty Specifies horizontal line style, defaults 1 (solid) abline.lwd Specifies horizontal line width, defaults 1 abline.col Horizontal line colour, defaults black segments.col Colour segments, defaults “black” segments.lwd Line width segments, defaults 1 layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details .table Specifies panel drawing order, default FALSE draws panels bottom left corner, moving right . Set TRUE draw top left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 x.relation Allows x-axis scales vary set “free”, defaults “” y.relation Allows y-axis scales vary set “free”, defaults “” top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.7 right.padding number specifying distance right margin, defaults 0.1 left.padding number specifying distance left margin, defaults 0.5 ylab.axis.padding number specifying distance ylabel y-axis, defaults 1 , level Optional covariate determines colour coding segments, specified overwrites segments.col, can contain actual colors values determine colors, col.regions defined col.regions Vector colors, define level numeric centers Optional vector centers segments, defaults NULL plot.horizontal Logical whether segments drawn horizontally (default) vertically draw.bands Logical specify whether draw lines (default) rectangles pch Plotting character centers symbol.col Colour plotting character centers, defaults “black” symbol.cex Size plotting character centers, defaults 1 add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn axes.lwd Specifies axes line width, defaults 1 key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function disable.factor.sorting Disable barplot auto sorting factors alphabetically/numerically","code":""},{"path":"/reference/create.segplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a segplot — create.segplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.segplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a segplot — create.segplot","text":"Paul C. Boutros","code":""},{"path":"/reference/create.segplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a segplot — create.segplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.segplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a segplot — create.segplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     min = runif(10,5,15),     max = runif(10,15,25),     labels = as.factor(LETTERS[1:10])     );  create.segplot(     # filename = tempfile(pattern = 'Segplot_simple', fileext = '.tiff'),     formula = labels ~ min + max,     data = simple.data,     resolution = 50     );   # load some data length.of.gene <- apply(microarray[1:10,60:61], 1, diff); bin.length <- length.of.gene; bin.length[which(bin.length < 20000)] <- 'A'; bin.length[which(bin.length < 40000)] <- 'B'; bin.length[which(bin.length < 60000)] <- 'C';  segplot.data <- data.frame(     min = apply(microarray[1:10,1:58], 1, min),     max = apply(microarray[1:10,1:58], 1, max),     median = apply(microarray[1:10,1:58], 1, median),     gene = rownames(microarray)[1:10],     # approximating length of gene      length = as.factor(bin.length)     );  # Minimal Input using real data create.segplot(     # filename = tempfile(pattern = 'Segplot_Minimal_Input', fileext = '.tiff'),     formula = gene ~ min + max,     data = segplot.data,     main = 'Minimal input',     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: NAs introduced by coercion #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion   # Axes & Labels create.segplot(     # filename = tempfile(pattern = 'Segplot_Axes_Labels', fileext = '.tiff'),     formula = gene ~ min + max,     data = segplot.data,     main = 'Axes & labels',     # Formatting axes     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: NAs introduced by coercion #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion   # \\donttest{ # Bands create.segplot(     # filename = tempfile(pattern = 'Segplot_Bands', fileext = '.tiff'),     formula = gene ~ min + max,     data = segplot.data,     main = 'Bands',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     # drawing rectangles instead of lines     draw.bands = TRUE,     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: NAs introduced by coercion #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion   # Colours create.segplot(     # filename = tempfile(pattern = 'Segplot_Colours', fileext = '.tiff'),     formula = reorder(gene, median) ~ min + max,     data = segplot.data,     main = 'Colours',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     draw.bands = FALSE,     # Changing the colours based on a covariate ('level' parameter)     level = segplot.data$length,     col.regions = default.colours(3),     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Median create.segplot(     # filename = tempfile(pattern = 'Segplot_Median', fileext = '.tiff'),     formula = gene ~ min + max,     data = segplot.data,     main = 'Medians',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     draw.bands = FALSE,     xat = seq(0, 12, 2),     level = segplot.data$length,     col.regions = default.colours(3),     # Adding center values     centers = segplot.data$median,     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: NAs introduced by coercion #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf   # Reorder by center value create.segplot(     # filename = tempfile(pattern = 'Segplot_Reorder', fileext = '.tiff'),     formula = reorder(gene, median) ~ min + max,     data = segplot.data,     main = 'Reordered',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     draw.bands = FALSE,     centers = segplot.data$median,     level = segplot.data$length,     col.regions = default.colours(3),     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Legend create.segplot(     # filename = tempfile(pattern = 'Segplot_Legend', fileext = '.tiff'),     formula = reorder(gene, median) ~ min + max,     data = segplot.data,     main = 'Legend',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     draw.bands = FALSE,     centers = segplot.data$median,     level = segplot.data$length,     col.regions = default.colours(3),     # Adding legend to explain colours     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 19,                         cex = 1                         ),                     text = list(                         lab = c('1-20000 bp', '20001-40000 bp','40001-60000 bp')                         ),                     padding.text = 1,                     cex = 1                     )                 ),             x = 0.60,             y = 0.15,             corner = c(0,1)             )         ),     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Background create.segplot(     # filename = tempfile(pattern = 'Segplot_Background', fileext = '.tiff'),     formula = reorder(gene, median) ~ min + max,     data = segplot.data,     main = 'Background rectangle',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     draw.bands = FALSE,     centers = segplot.data$median,     level = segplot.data$length,     col.regions = default.colours(3),     # Adding legend to explain colours     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 19,                         cex = 1                         ),                     text = list(                         lab = c('1-20000 bp', '20001-40000 bp','40001-60000 bp')                         ),                     padding.text = 1,                     cex = 1                     )                 ),             x = 0.50,             y = 0.15,             corner = c(0,1)             )         ),     # adding background shading     add.rectangle = TRUE,     xleft.rectangle = 0,     ybottom.rectangle = seq(0.5, 8.5, 2),     xright.rectangle = 13,     ytop.rectangle = seq(1.5, 9.5, 2),     col.rectangle = 'grey',     alpha.rectangle = 0.5,     description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Nature style create.segplot(     # filename = tempfile(pattern = 'Segplot_Nature_style', fileext = '.tiff'),     formula = reorder(gene, median) ~ min + max,     data = segplot.data,     main = 'Nature style',     xaxis.cex = 1,     yaxis.cex = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     xlimits = c(0,13),     xat = seq(0, 12, 2),     draw.bands = FALSE,     centers = segplot.data$median,     level = segplot.data$length,     col.regions = default.colours(3),     legend = list(         inside = list(             fun = draw.key,             args = list(                 key = list(                     points = list(                         col = default.colours(3),                         pch = 19,                         cex = 1                         ),                     text = list(                         lab = c('1-20000 bp', '20001-40000 bp','40001-60000 bp')                         ),                     padding.text = 1,                     cex = 1                     )                 ),             x = 0.50,             y = 0.15,             corner = c(0,1)             )         ),     add.rectangle = TRUE,     xleft.rectangle = 0,     ybottom.rectangle = seq(0.5, 8.5, 2),     xright.rectangle = 13,     ytop.rectangle = seq(1.5, 9.5, 2),     col.rectangle = 'grey',     alpha.rectangle = 0.5,      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Segplot created by BoutrosLab.plotting.general',     resolution = 100     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.   # example of bands and lines create.segplot(     # filename = tempfile(pattern = 'Segplot_BandsAndLines', fileext = '.tiff'),     formula = labels ~ min + max,     data = simple.data,     draw.bands = c(1,3,5,7,9),     resolution = 200     );  # }"},{"path":"/reference/create.stripplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a strip-plot — create.stripplot","title":"Make a strip-plot — create.stripplot","text":"Takes formula data.frame creates strip-plot","code":""},{"path":"/reference/create.stripplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a strip-plot — create.stripplot","text":"","code":"create.stripplot(   formula,   data,   filename = NULL,   groups = NULL,   jitter.data = FALSE,   jitter.factor = 1,   jitter.amount = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.tck = 0,   yaxis.tck = 1,   xlimits = NULL,   ylimits = NULL,   xat = TRUE,   yat = TRUE,   lwd = 1,   pch = 19,   col = 'black',   col.border = 'black',   fill = 'transparent',   colour.alpha = 1,   cex = 0.75,   top.padding = 0.1,   bottom.padding = 0.7,   right.padding = 0.3,   left.padding = 0.5,   ylab.axis.padding = 1,   layout = NULL,   as.table = TRUE,   x.spacing = 0,   y.spacing = 0,   add.median = FALSE,   median.values = NULL,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   strip.col = 'white',   strip.cex = 1,   strip.fontface = 'bold',   key = NULL,   legend = NULL,   height = 6,   width = 6,   size.units = 'in',   resolution = 1600,   enable.warnings = FALSE,   description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,         inside.legend.auto = FALSE,   disable.factor.sorting = FALSE   )"},{"path":"/reference/create.stripplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a strip-plot — create.stripplot","text":"formula formula used extract x & y components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object groups grouping variable data-frame jitter.data Allow data staggered, default FALSE jitter.factor Numeric value apply jitter, default 1 jitter.amount Numeric; amount noise add, default NULL main main title plot (space reclaimed NULL) s main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title xlab.label X-axis label ylab.label Y-axis label xlab.cex Size x-axis label, defaults 3 ylab.cex Size y-axis label, defaults 3 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis scales, defaults 2 yaxis.cex Size y-axis scales, defaults 2 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.rot Rotation y-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.tck Specifies length tick marks x-axis, defaults 0 yaxis.tck Specifies length tick marks y-axis, defaults 1 xlimits Two-element vector giving x-axis limits, default automatic ylimits Two-element vector giving y-axis limits, default automatic xat Vector listing x-axis labels drawn, default automatic yat Vector listing y-axis labels drawn, default automatic lwd Line width, defaults 1 pch plotting character (defaults filled circles) col Colour plotting character (defaults black) col.border Colour border pch > 21. Defaults black fill Fill colour plotting character pch set 21:25 (defaults transparent) colour.alpha Bias added colour selection (defaults 1) cex size plotting character top.padding number specifying distance top margin, defaults 0.1 bottom.padding number specifying distance bottom margin, defaults 0.7 right.padding number specifying distance right margin, defaults 0.3 left.padding number specifying distance left margin, defaults 0.5 ylab.axis.padding number specifying distance ylabel y-axis, defaults 1 layout vector specifying number columns, rows (e.g., c(2,1). Default NULL; see lattice::xyplot details . .table Specifies panel drawing order, default TRUE draw top left corner, moving right . Set FALSE draw panels bottom left corner, moving right x.spacing number specifying distance panels along x-axis, defaults 0 y.spacing number specifying distance panels along y-axis, defaults 0 add.median TRUE/FALSE indicating whether lines drawn group medians, default FALSE median.values vector values representing median group, default NULL add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn strip.col Strip background colour, defaults “white” strip.cex Strip title character expansion strip.fontface Strip text fontface, defaults bold key list giving key (legend). default suppresses drawing legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults inches resolution Figure resolution dpi, defaults 1600 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) inside.legend.auto boolean specifying whether use automatic inside legend function disable.factor.sorting Disable barplot auto sorting factors alphabetically/numerically","code":""},{"path":"/reference/create.stripplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a strip-plot — create.stripplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.stripplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a strip-plot — create.stripplot","text":"Paul C. Boutros","code":""},{"path":"/reference/create.stripplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a strip-plot — create.stripplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.stripplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a strip-plot — create.stripplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = c(rep(rnorm(50),5)),     y = as.factor(sample(LETTERS[1:5],250,TRUE))     );  create.stripplot(     # filename = tempfile(pattern = 'Stripplot_simple', fileext = '.tiff'),     formula = x ~ y,     data = simple.data,     resolution = 50     );   # load real datasets stripplot.data <- data.frame(     values = c(t(microarray[1:10, 1:58])),     genes = rep(rownames(microarray)[1:10], each = 58),     sex = patient$sex,     stringsAsFactors = TRUE     );  # Minimal Input using real data create.stripplot(     # filename = tempfile(pattern = 'Stripplot_Minimal_Input', fileext = '.tiff'),     formula = genes ~ values,     data = stripplot.data,     main = 'Minimal input',     description = 'Stripplot created by BoutrosLab.plotting.general',     resolution = 50     );   # Axes & Labels create.stripplot(     # filename = tempfile(pattern = 'Stripplot_Axes_Labels', fileext = '.tiff'),     formula = genes ~ values,     data = stripplot.data,     main = 'Axes & labels',     # formatting axes     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     description = 'Stripplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Colour & Legend create.stripplot(     # filename = tempfile(pattern = 'Stripplot_Colour_Legend', fileext = '.tiff'),     formula = genes ~ values,     data = stripplot.data,     main = 'Colour & legend',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     # Colour & points adjustment     groups = stripplot.data$sex,     col = c('pink', 'skyblue'),     pch = 19,     colour.alpha = 0.5,     cex = 1,     # Legend     key = list(         space = 'right',         text = list(             lab = levels(stripplot.data$sex),             cex = 1,             col = 'black'             ),         points = list(             pch = 19,             col = c('pink','skyblue'),             alpha = 0.5,             cex = 1             ),         padding.text = 3         ),     description = 'Stripplot created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Jitter create.stripplot(     # filename = tempfile(pattern = 'Stripplot_Jitter', fileext = '.tiff'),     formula = genes ~ values,     data = stripplot.data,     main = 'Low Jitter',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     groups = stripplot.data$sex,     col = c('pink', 'skyblue'),     pch = 19,     colour.alpha = 0.5,     cex = 1,     key = list(         space = 'right',         text = list(             lab = levels(stripplot.data$sex),             cex = 1,             col = 'black'             ),         points = list(             pch = 19,             col = c('pink','skyblue'),             alpha = 0.4,             cex = 1             ),         padding.text = 3         ),     # Custom jitter     jitter.data = TRUE,     description = 'Stripplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Jitter create.stripplot(     # filename = tempfile(pattern = 'Stripplot_High_Jitter', fileext = '.tiff'),     formula = genes ~ values,     data = stripplot.data,     main = 'High Jitter',     xlab.label = 'Change in gene expression',     ylab.label = 'Gene',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     groups = stripplot.data$sex,     col = c('pink', 'skyblue'),     pch = 19,     colour.alpha = 0.5,     cex = 1,     key = list(         space = 'right',         text = list(             lab = levels(stripplot.data$sex),             cex = 1,             col = 'black'             ),         points = list(             pch = 19,             col = c('pink','skyblue'),             alpha = 0.4,             cex = 1             ),         padding.text = 3         ),     # Custom jitter     jitter.data = TRUE,     jitter.factor = 0.5,     jitter.amount = 0.33,     description = 'Stripplot created by BoutrosLab.plotting.general',     resolution = 200     );   # Nature style create.stripplot(     # filename = tempfile(pattern = 'Stripplot_Nature_style', fileext = '.tiff'),     formula = genes ~ values,     data = stripplot.data,     main = 'Nature style',     xlab.cex = 1.5,     ylab.cex = 1.5,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlimits = c(0,13),     xat = seq(0,12,2),     groups = stripplot.data$sex,     col = c('pink', 'skyblue'),     pch = 19,     colour.alpha = 0.5,     cex = 1,     key = list(         space = 'right',         text = list(             lab = levels(stripplot.data$sex),             cex = 1,             col = 'black'             ),         points = list(             pch = 19,             col = c('pink','skyblue'),             alpha = 0.4,             cex = 1             ),         padding.text = 3         ),     jitter.data = TRUE,     jitter.factor = 0.5,     jitter.amount = 0.33,      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.label = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.label = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Stripplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend  # }"},{"path":"/reference/create.violinplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a violin plot — create.violinplot","title":"Make a violin plot — create.violinplot","text":"function takes dataframe writes pretty TIFF violin plot","code":""},{"path":"/reference/create.violinplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a violin plot — create.violinplot","text":"","code":"create.violinplot(   formula,   data,   filename = NULL,   main = NULL,   main.just = 'center',   main.x = 0.5,   main.y = 0.5,   main.cex = 3,   xlab.label = tail(sub('~', '', formula[-2]), 1),   ylab.label = tail(sub('~', '', formula[-3]), 1),   xlab.cex = 2,   ylab.cex = 2,   xlab.col = 'black',   ylab.col = 'black',   xlab.top.label = NULL,   xlab.top.cex = 2,   xlab.top.col = 'black',   xlab.top.just = 'center',   xlab.top.x = 0.5,   xlab.top.y = 0,   xaxis.lab = TRUE,   yaxis.lab = TRUE,   xaxis.cex = 1.5,   yaxis.cex = 1.5,   xaxis.col = 'black',   yaxis.col = 'black',   xaxis.fontface = 'bold',   yaxis.fontface = 'bold',   xaxis.rot = 0,   yaxis.rot = 0,   xaxis.tck = c(1,0),   yaxis.tck = c(1,1),   ylimits = NULL,   yat = TRUE,   col = 'black',   lwd = 1,   border.lwd = 1,   bandwidth = 'nrd0',   bandwidth.adjust = 1,   extra.points = NULL,   extra.points.pch = 21,   extra.points.col = 'white',   extra.points.border = 'black',   extra.points.cex = 1,   start = NULL,   end = NULL,   scale = FALSE,   plot.horizontal = FALSE,   top.padding = 0.1,   bottom.padding = 0.7,   left.padding = 0.5,   right.padding = 0.3,   key = NULL,   legend = NULL,   add.rectangle = FALSE,   xleft.rectangle = NULL,   ybottom.rectangle = NULL,   xright.rectangle = NULL,   ytop.rectangle = NULL,   col.rectangle = 'transparent',   alpha.rectangle = 1,   height = 6,   width = 6,   resolution = 1600,   size.units = 'in',   enable.warnings = FALSE,    description = 'Created with BoutrosLab.plotting.general',   style = 'BoutrosLab',   preload.default = 'custom',   use.legacy.settings = FALSE,   disable.factor.sorting = FALSE   )"},{"path":"/reference/create.violinplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a violin plot — create.violinplot","text":"formula formula used extract violin components data-frame data data-frame plot filename Filename tiff output, NULL returns trellis object main main title plot (space reclaimed NULL) main.just justification main title plot, default centered main.x x location main title, deault 0.5 main.y y location main title, default 0.5 main.cex Size text main plot title, defaults 3 xlab.label label x-axis ylab.label label y-axis xlab.cex Size x-axis label, defaults 3 ylab.cex Size y-axis label, defaults 3 xlab.col Colour x-axis label, defaults “black” ylab.col Colour y-axis label, defaults “black” xlab.top.label label top x-axis xlab.top.cex Size top x-axis label xlab.top.col Colour top x-axis label xlab.top.just Justification top x-axis label, defaults centered xlab.top.x x location top x-axis label xlab.top.y y location top y-axis label xaxis.lab Vector listing x-axis tick labels, defaults automatic yaxis.lab Vector listing y-axis tick labels, defaults automatic xaxis.cex Size x-axis tick labels, defaults 2 yaxis.cex Size y-axis tick labels, defaults 2 xaxis.col Colour x-axis tick labels, defaults “black” yaxis.col Colour y-axis tick labels, defaults “black” xaxis.fontface Fontface x-axis scales yaxis.fontface Fontface y-axis scales xaxis.rot Rotation x-axis tick labels; defaults 0 yaxis.rot Rotation y-axis tick labels; defaults 0 xaxis.tck Specifies length tick marks x-axis, defaults c(1,0) yaxis.tck Specifies length tick marks y-axis, defaults c(1,1) ylimits Two-element vector giving y-axis limits, default automatic yat Vector listing y-axis labels drawn, default automatic col Colour use filling interior violin plots, defaults “black” lwd Line width, defaults 1 border.lwd Width exterior boundary violin plots, defaults 1 bandwidth Smoothing bandwidth, character string giving rule choose bandwidth ('nrd0', 'nrd', 'ucv', 'bcv', 'sj', 'sj-ste'). Passed base R function density, via lattice::bwplot. bandwidth.adjust Adjustment parameter bandwidth (bandwidth used bandwidth*bandwidth.adjust). Makes easy specify bandwidth proportion default. extra.points list numeric vectors, one length equal number violins plotted. Specifies set sets extra points plotted along vertical spine violin plot. Defaults NULL (points added) extra.points.pch vector length extra.points specifying symbol use set points. Defaults 21 extra.points.col vector length extra.points specifying colour use set points. Defaults “white” extra.points.border vector length extra.points specifying border colour use points >=21. Defaults “black” extra.points.cex vector length extra.points specifying size set points. Defaults 1 start Start boundary cutoff, default NULL boundary end End boundary cutoff, default NULL boundary scale Logical; Scales violin plots, see ?panel.violin details, default FALSE plot.horizontal Logical; Determines whether draw violin plot horizontally vertically; default FALSE; horizontal FALSE, x coerced factor shingle, vise versa. top.padding number giving top padding multiples lattice default bottom.padding number giving bottom padding multiples lattice default left.padding number giving left padding multiples lattice default right.padding number giving right padding multiples lattice default key Add key plot. See xyplot. legend Add legend plot.  Helpful adding multiple keys adding keys margins plot. See xyplot. add.rectangle Allow rectangle drawn, default FALSE xleft.rectangle Specifies left x coordinate rectangle drawn ybottom.rectangle Specifies bottom y coordinate rectangle drawn xright.rectangle Specifies right x coordinate rectangle drawn ytop.rectangle Specifies top y coordinate rectangle drawn col.rectangle Specifies colour fill rectangle's area alpha.rectangle Specifies colour bias rectangle drawn height Figure height, defaults 6 inches width Figure width, defaults 6 inches resolution Figure resolution dpi, defaults 1600 size.units Figure units, defaults inches enable.warnings Print warnings set TRUE, defaults FALSE description Short description image/plot; default NULL style defaults “BoutrosLab”, also accepts “Nature”, changes parameters according Nature formatting requirements preload.default ability set multiple sets diffrent defaults depending publication needs use.legacy.settings boolean set wheter use legacy mode settings (font) disable.factor.sorting Disable barplot auto sorting factors alphabetically/numerically","code":""},{"path":"/reference/create.violinplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a violin plot — create.violinplot","text":"filename NULL returns trellis object, otherwise creates plot returns 0/1 success code.","code":""},{"path":"/reference/create.violinplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a violin plot — create.violinplot","text":"Paul C. Boutros","code":""},{"path":"/reference/create.violinplot.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Make a violin plot — create.violinplot","text":"function called without capturing return value, specifying filename, may crash trying draw histogram. particular, script uses call create histogram called reading script command line, fail badly, error message unavailable fonts:","code":"Error in grid.Call.graphics(\"L_text\", as.graphicsAnnot(x$label), x$x,  )         Invalid font type     Calls: print ... drawDetails.text -> grid.Call.graphics -> .Call.graphics"},{"path":[]},{"path":"/reference/create.violinplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a violin plot — create.violinplot","text":"","code":"set.seed(12345);  simple.data <- data.frame(     x = c(rep(rnorm(50),5)),     y = as.factor(sample(LETTERS[1:5],250,TRUE))     );  create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Simple', fileext = '.tiff'),     formula = x ~ y,     data = simple.data,     resolution = 100     );   # load real datasets violin.data <- data.frame(     values = c(t(microarray[1:10, 1:58])),     genes = rep(rownames(microarray)[1:10], each = 58),     sex = patient$sex     );  # Minimal input  create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Minimal_Input', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Minimal input',     xaxis.rot = 90,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Axes & Labels create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Axes_Labels', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Axes & labels',     xaxis.rot = 90,     # Adjusting axes     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 13),     yat = seq(0, 12, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Range create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Range', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Range',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     # adjusted y-axis limits     ylimits = c(0, 11),     yat = seq(0, 10, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     # Specify range     start = 1,     end = 10,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Scaling create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Scale', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Scale',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 13),     yat = seq(0, 12, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     # Scale     scale = TRUE,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # \\donttest{ # Extra points median.points <- unlist(tapply(violin.data$values, violin.data$genes, median)); top.points <- unlist(tapply(violin.data$values, violin.data$genes, quantile, 0.90));  create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Points', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Extra points',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 13),     yat = seq(0, 12, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     # Adding median and 90th percentile     extra.points = list(median.points, top.points),     extra.points.pch = 21,     extra.points.col = c('white','grey'),     extra.points.cex = 0.5,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Colours create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Colour', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Colour',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 13),     yat = seq(0, 12, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     extra.points = list(median.points, top.points),     extra.points.pch = 21,     extra.points.col = c('white','grey'),     extra.points.cex = 0.5,     # Colour     col = 'dodgerblue',     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Custom labels create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Custom_Labels', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Custom labels',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 16),     yat = c(0,1,2,4,8,16),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     extra.points = list(median.points, top.points),     extra.points.pch = 21,     extra.points.col = c('white','grey'),     extra.points.cex = 0.5,     col = 'dodgerblue',     # customizing labels     yaxis.lab = c(         0,         expression(paste('2'^'0')),         expression(paste('2'^'1')),         expression(paste('2'^'2')),         expression(paste('2'^'4')),         expression(paste('2'^'5'))         ),     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Orientation create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Orientation', fileext = '.tiff'),     # switch formula     formula = genes ~ values,     data = violin.data,     main = 'Orientation',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     ylab.label = 'Gene',     xlab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     extra.points = list(median.points, top.points),     extra.points.pch = 21,     extra.points.col = c('white','grey'),     extra.points.cex = 0.5,     col = 'dodgerblue',     # orientation     plot.horizontal = TRUE,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # background create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Background', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Background rectangle',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 13),     yat = seq(0, 12, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.label = 'Gene',     ylab.label = 'Change in expression',     xlab.cex = 1.5,     ylab.cex = 1.5,     extra.points = list(median.points, top.points),     extra.points.pch = 21,     extra.points.col = c('white','grey'),     extra.points.cex = 0.5,     col = 'dodgerblue',     # background     add.rectangle = TRUE,     xleft.rectangle = seq(0.5, 8.5, 2),     ybottom.rectangle = 0,     xright.rectangle = seq(1.5, 9.5, 2),     ytop.rectangle = 13,     col.rectangle = 'grey',     alpha.rectangle = 0.5,     description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 100     );   # Nature style create.violinplot(     # filename = tempfile(pattern = 'Violinplot_Nature_style', fileext = '.tiff'),     formula = values ~ genes,     data = violin.data,     main = 'Nature style',     xaxis.rot = 90,     xaxis.cex = 1,     yaxis.cex = 1,     ylimits = c(0, 13),     yat = seq(0, 12, 2),     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     col = 'dodgerblue',     add.rectangle = TRUE,     xleft.rectangle = seq(0.5, 8.5, 2),     ybottom.rectangle = 0,     xright.rectangle = seq(1.5, 9.5, 2),     ytop.rectangle = 13,     col.rectangle = 'grey',     alpha.rectangle = 0.5,      # set style to Nature      style = 'Nature',          # demonstrating how to italicize character variables     ylab.lab = expression(paste('italicized ', italic('a'))),        # demonstrating how to create en-dashes     xlab.lab = expression(paste('en dashs: 1','\\u2013', '10'^'\\u2013', ''^3)),      description = 'Violinplot created by BoutrosLab.plotting.general',     resolution = 200     ); #> Warning: Setting resolution to 1200 dpi. #> Warning: Nature also requires italicized single-letter variables and en-dashes #> \t\t\tfor ranges and negatives. See example in documentation for how to do this. #> Warning: Avoid red-green colour schemes, create TIFF files, do not outline the figure or legend.  # }"},{"path":"/reference/critical.value.ks.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","title":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","text":"Takes sample size confidence level computes corresponding critical value basing kolmogorov-smirnov test","code":""},{"path":"/reference/critical.value.ks.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","text":"","code":"critical.value.ks.test(n, conf, alternative = \"two.sided\");"},{"path":"/reference/critical.value.ks.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","text":"n sample size conf confidence level alternative Indicates alternative hypothesis must one \"two.sided\"(default), \"one-sided\".","code":""},{"path":"/reference/critical.value.ks.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","text":"corresponding critical value","code":""},{"path":"/reference/critical.value.ks.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","text":"Ying Wu","code":""},{"path":"/reference/critical.value.ks.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Critical Value for Kolmogorov-Smirnov Test — critical.value.ks.test","text":"","code":"critical.value.ks.test(10, 0.95); #> [1] 0.409249 critical.value.ks.test(100, 0.95, alternative = \"one-sided\"); #> [1] 0.1223849"},{"path":"/reference/default.colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides default colour schemes. — default.colours","title":"Provides default colour schemes. — default.colours","text":"Returns colour schemes based user input. Used provide default colour schemes simple cases.","code":""},{"path":"/reference/default.colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides default colour schemes. — default.colours","text":"","code":"default.colours(   number.of.colours = 2,   palette.type = 'qual',   is.greyscale = TRUE,   is.venn = FALSE   );"},{"path":"/reference/default.colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides default colour schemes. — default.colours","text":"number..colours number colours requested colour scheme. palette.type type colour scheme requested. palette types “seq”, “div”, “qual”, “pastel”, “survival”, “dotmap”, “spiral.sunrise”, “spiral.morning”, “spiral.dusk”, “spiral.noon”, “spiral.afternoon”, “spiral.dawn”, “spiral.night” accepted. Legacy colour palettes available “chromosomes”, “old.qual1”, “old.qual2”, “old.seq”, “old.div”. “seq” corresponds sequential colour schemes, “div” corresponds diverging colour schemes, “qual” corresponds qualitative colour schemes - “pastel” pastel version palette. “survival” useful survival plots, first two colour blue red, following convention. remaining colour schemes tied specific use-case. .greyscale Boolean asking whether colour scheme greyscale-compatible. Defaults TRUE. purpose parameter warn users ask colour scheme greyscale-compatible. Regardless value .greyscale, colour scheme provided. .venn Boolean determining whether colour scheme used venn diagram. TRUE, palette type set NULL. venn diagrams, text colours also provided.","code":""},{"path":"/reference/default.colours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provides default colour schemes. — default.colours","text":"information colour schemes, refer plotting guide.)","code":""},{"path":"/reference/default.colours.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Provides default colour schemes. — default.colours","text":"Christine P'ng","code":""},{"path":"/reference/default.colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides default colour schemes. — default.colours","text":"","code":"default.colours(number.of.colours = 6, is.greyscale = FALSE, palette.type = 'div') #> [1] \"#B32B2B\" \"#DD4E4E\" \"#EB7C7C\" \"#F7BEBE\" \"#BEF4F7\" \"#80CDD1\" # Returns: # [1] \"#B32B2B\" \"#DD4E4E\" \"#EB7C7C\" \"#F7BEBE\" \"#BEF4F7\" \"#80CDD1\"  default.colours(number.of.colours = 3, palette.type = NULL, is.venn = TRUE) #> [[1]] #> [1] \"red\"        \"dodgerblue\" \"yellow\"     #>  #> [[2]] #> [1] \"darkred\"    \"darkblue\"   \"darkorange\" #>  # Returns: # [1] \"red\"        \"dodgerblue\" \"yellow\"     # [1] \"darkred\"    \"darkblue\"   \"darkorange\" # The second line of colours is the corresponding text colour  default.colours(number.of.colours = c('2','5','3'), c('binary','seq','seq')) #> Warning: Colour scheme may not be greyscale compatible. #> [[1]] #> [1] \"white\" \"black\" #>  #> [[2]] #> [1] \"mintcream\"     \"darkseagreen1\" \"lightgreen\"    \"springgreen3\"  #> [5] \"springgreen4\"  #>  #> [[3]] #> [1] \"lightcyan\"     \"paleturquoise\" \"turquoise1\"    #>  # Returns: # [[1]] # [1] \"white\"       \"chartreuse3\"  # [[2]] # [1] \"lavenderblush\"  \"pink\"           \"palevioletred1\" \"violetred1\"     # [5] \"maroon\"          # [[3]] # [1] \"aliceblue\"    \"lightblue1\"   \"lightskyblue\"  default.colours(5, 'spiral.sunrise'); #> Warning: Colour scheme may not be greyscale compatible. #> [1] \"#336A90\" \"#65B4A2\" \"#B1D39A\" \"#F4E0A6\" \"#FFE1EE\" # Returns:  # [1] \"#336A90\" \"#65B4A2\" \"#B1D39A\" \"#F4E0A6\" \"#FFE1EE\""},{"path":"/reference/display.colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to display R colors, as well as corresponding R grey colours. — display.colours","title":"Function to display R colors, as well as corresponding R grey colours. — display.colours","text":"Displays R colors corresponding R grey colours.","code":""},{"path":"/reference/display.colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to display R colors, as well as corresponding R grey colours. — display.colours","text":"","code":"display.colours(   cols,    names = cols   );"},{"path":"/reference/display.colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to display R colors, as well as corresponding R grey colours. — display.colours","text":"cols Vector colours displayed. names names colours. Defaults equal input cols","code":""},{"path":"/reference/display.colours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to display R colors, as well as corresponding R grey colours. — display.colours","text":"information colour schemes, refer colour guide (Resources/general)","code":""},{"path":"/reference/display.colours.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to display R colors, as well as corresponding R grey colours. — display.colours","text":"Christine P'ng","code":""},{"path":"/reference/display.colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to display R colors, as well as corresponding R grey colours. — display.colours","text":"","code":"display.colours('red');  # Red and Grey are displayed  display.colours(default.colours(5)); #> Warning: Colour scheme may not be greyscale compatible.  # Five default colours and their grey values are displayed  test.colours <- force.colour.scheme(c('skin','nerve'), 'tissue'); display.colours(test.colours);"},{"path":"/reference/display.statistical.result.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to display statistical result in a plot — display.statistical.result","title":"Utility function to display statistical result in a plot — display.statistical.result","text":"utility function display statistical result plot scientific notation (appropriate)","code":""},{"path":"/reference/display.statistical.result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to display statistical result in a plot — display.statistical.result","text":"","code":"display.statistical.result(   x,   lower.cutoff = 2.2e-50,   scientific.cutoff = 0.001,   digits = 2,   statistic.type = 'P',   symbol = ': '   );"},{"path":"/reference/display.statistical.result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to display statistical result in a plot — display.statistical.result","text":"x Numeric value displayed lower.cutoff values x smaller lower.cutoff, return value \"< lower.cutoff\".  Defaults 2.2e-16 scientific.cutoff values x larger equal scientific.cutoff, standard notation used (rather scientific notation).  Defaults 0.001 digits Number decimal places precision shown statistic.type Type statistic displayed, defaults “P”. symbol Symbol prior statistic displayed, defaults “: ”.","code":""},{"path":"/reference/display.statistical.result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to display statistical result in a plot — display.statistical.result","text":"Returns expression","code":""},{"path":"/reference/display.statistical.result.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility function to display statistical result in a plot — display.statistical.result","text":"Nathalie Moon","code":""},{"path":[]},{"path":"/reference/display.statistical.result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function to display statistical result in a plot — display.statistical.result","text":"","code":"set.seed(100);  display.statistical.result(x = 0.00000000000000000000234); #> expression(paste(\"P\", \": \", c(base = \"2.34\") %*% 10^c(exponent = -21),  #>     phantom(\"|\")[phantom(\"|\")])) display.statistical.result(x = 0.023, statistic.type = 'Q'); #> expression(\"Q: 0.023\") display.statistical.result(x = 0.001, scientific.cutoff = 0.01, symbol = ' = '); #> expression(paste(\"P\", \" = \", c(base = \"1.00\") %*% 10^c(exponent = -3),  #>     phantom(\"|\")[phantom(\"|\")]))"},{"path":"/reference/dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Matrix Computation — dist","title":"Distance Matrix Computation — dist","text":"function computes returns distance matrix computed   using specified distance measure compute distances   rows data matrix.","code":""},{"path":"/reference/dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Matrix Computation — dist","text":"","code":"dist(x, method = \"euclidean\", diag = FALSE, upper = FALSE, p = 2)"},{"path":"/reference/dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Matrix Computation — dist","text":"x numeric matrix, data frame \"dist\" object. method distance measure used. must one     \"euclidean\", \"maximum\", \"manhattan\",     \"canberra\", \"binary\", \"minkowski\", \"jaccard\".     unambiguous substring can given. diag logical value indicating whether diagonal     distance matrix printed print.dist. upper logical value indicating whether upper triangle     distance matrix printed print.dist. p power Minkowski distance.","code":""},{"path":"/reference/dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance Matrix Computation — dist","text":"Available distance measures (written two vectors \\(x\\)   \\(y\\)): euclidean: Usual square distance two       vectors (2 norm). maximum: Maximum distance two components \\(x\\)       \\(y\\) (supremum norm) manhattan: Absolute distance two vectors       (1 norm). canberra: \\(\\sum_i |x_i - y_i| / |x_i + y_i|\\).       Terms zero numerator denominator omitted sum       treated values missing. intended non-negative values (e.g. counts): taking       absolute value denominator 1998 R modification       avoid negative distances. binary: (aka asymmetric binary): vectors       regarded binary bits, non-zero elements ‘’       zero elements ‘’.  distance       proportion bits one amongst       least one . minkowski: \\(p\\) norm, \\(p\\)th root       sum \\(p\\)th powers differences components. jaccard: proportion items \t  sets. binary data, output equal dist(method =\"binary\") Missing values allowed, excluded computations   involving rows within occur.   , Inf values involved, pairs values   excluded contribution distance gave NaN   NA.   columns excluded calculating Euclidean, Manhattan,   Canberra Minkowski distance, sum scaled proportionally   number columns used.  pairs excluded   calculating particular distance, value NA. \"dist\" method .matrix() .dist()   can used conversion objects class \"dist\"   conventional distance matrices.","code":""},{"path":"/reference/dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Matrix Computation — dist","text":"dist returns object class \"dist\". lower triangle distance matrix stored columns   vector, say . n number   observations, .e., n <- attr(, \"Size\"),   \\(< j \\le n\\), dissimilarity (row) j  [n*(-1) - *(-1)/2 + j-].   length vector \\(n*(n-1)/2\\), .e., order \\(n^2\\). object following attributes (besides \"class\" equal   \"dist\"): Size integer, number observations dataset. Labels optionally, contains labels, ,     observations dataset. Diag, Upper logicals corresponding arguments diag     upper , specifying object printed. call optionally, call used create     object. method optionally, distance method used; resulting     dist(), (match.arg()ed) method     argument.","code":""},{"path":"/reference/dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distance Matrix Computation — dist","text":"Becker, R. ., Chambers, J. M. Wilks, . R. (1988)   New S Language.   Wadsworth & Brooks/Cole. Mardia, K. V., Kent, J. T. Bibby, J. M. (1979)   Multivariate Analysis. Academic Press. Borg, . Groenen, P. (1997)   Modern Multidimensional Scaling.  Theory Applications.   Springer.","code":""},{"path":[]},{"path":"/reference/dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Matrix Computation — dist","text":"","code":"x <- matrix(rnorm(100), nrow=5) dist(x) #>          1        2        3        4 #> 2 6.322187                            #> 3 4.439208 6.749762                   #> 4 7.202898 7.708108 6.358277          #> 5 7.079079 5.581073 6.751528 9.151423 dist(x, diag = TRUE) #>          1        2        3        4        5 #> 1 0.000000                                     #> 2 6.322187 0.000000                            #> 3 4.439208 6.749762 0.000000                   #> 4 7.202898 7.708108 6.358277 0.000000          #> 5 7.079079 5.581073 6.751528 9.151423 0.000000 dist(x, upper = TRUE) #>          1        2        3        4        5 #> 1          6.322187 4.439208 7.202898 7.079079 #> 2 6.322187          6.749762 7.708108 5.581073 #> 3 4.439208 6.749762          6.358277 6.751528 #> 4 7.202898 7.708108 6.358277          9.151423 #> 5 7.079079 5.581073 6.751528 9.151423          m <- as.matrix(dist(x)) d <- as.dist(m) stopifnot(d == dist(x))  ## Use correlations between variables \"as distance\" dd <- as.dist((1 - cor(USJudgeRatings))/2) round(1000 * dd) # (prints more nicely) #>      CONT INTG DMNR DILG CFMG DECI PREP FAMI ORAL WRIT PHYS #> INTG  567                                                   #> DMNR  577   18                                              #> DILG  494   64   82                                         #> CFMG  432   93   93   21                                    #> DECI  457   99   98   22    9                               #> PREP  494   61   72   11   21   21                          #> FAMI  513   66   79   21   32   29    5                     #> ORAL  506   44   47   23   25   26    8    9                #> WRIT  522   46   53   20   29   27    7    5    3           #> PHYS  473  129  106   94   60   64   76   78   54   72      #> RTEN  517   31   28   35   36   38   25   29    9   16   47 plot(hclust(dd)) # to see a dendrogram of clustered variables   ## example of binary and canberra distances. x <- c(0, 0, 1, 1, 1, 1) y <- c(1, 0, 1, 1, 0, 1) dist(rbind(x,y), method= \"binary\") #>     x #> y 0.4 ## answer 0.4 = 2/5 dist(rbind(x,y), method= \"canberra\") #>     x #> y 2.4 ## answer 2 * (6/5) dist(rbind(x,y), method= \"jaccard\") #>     x #> y 0.4 ## answer 0.4 = 2/5  ## To find the names labels(eurodist) #>  [1] \"Athens\"          \"Barcelona\"       \"Brussels\"        \"Calais\"          #>  [5] \"Cherbourg\"       \"Cologne\"         \"Copenhagen\"      \"Geneva\"          #>  [9] \"Gibraltar\"       \"Hamburg\"         \"Hook of Holland\" \"Lisbon\"          #> [13] \"Lyons\"           \"Madrid\"          \"Marseilles\"      \"Milan\"           #> [17] \"Munich\"          \"Paris\"           \"Rome\"            \"Stockholm\"       #> [21] \"Vienna\"           ## Examples involving \"Inf\" : ## 1) x[6] <- Inf (m2 <- rbind(x,y)) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> x    0    0    1    1    1  Inf #> y    1    0    1    1    0    1 dist(m2, method=\"binary\")# warning, answer 0.5 = 2/4 #> Warning: treating non-finite values as NA #>     x #> y 0.5 ## These all give \"Inf\": stopifnot(Inf == dist(m2, method= \"euclidean\"),           Inf == dist(m2, method= \"maximum\"),           Inf == dist(m2, method= \"manhattan\")) ##  \"Inf\" is same as very large number: x1 <- x; x1[6] <- 1e100 stopifnot(dist(cbind(x ,y), method=\"canberra\") ==     print(dist(cbind(x1,y), method=\"canberra\"))) #>   1 2 3 4 5 #> 2 2         #> 3 1 2       #> 4 1 2 0     #> 5 2 2 1 1   #> 6 1 2 1 1 2  ## 2) y[6] <- Inf #-> 6-th pair is excluded dist(rbind(x,y), method=\"binary\")   # warning; 0.5 #> Warning: treating non-finite values as NA #>     x #> y 0.5 dist(rbind(x,y), method=\"canberra\") # 3 #>   x #> y 3 dist(rbind(x,y), method=\"maximum\")  # 1 #>   x #> y 1 dist(rbind(x,y), method=\"manhattan\")# 2.4 #>     x #> y 2.4"},{"path":"/reference/force.colour.scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"Takes vector character strings scheme returns matching colours vector.","code":""},{"path":"/reference/force.colour.scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"","code":"force.colour.scheme(   x = NA,   scheme,   fill.colour = 'slategrey',   include.names = FALSE,   return.factor = FALSE,   return.scheme = FALSE   );"},{"path":"/reference/force.colour.scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"x input character numeric vector, defaults NA incase return.scheme = TRUE. scheme string representing predefined scheme. Available schemes :          “annovar.annotation”, “annovar.annotation.collapsed”,          “annovar.annotation.collapsed2”, “tissue”, “sex”, “stage”,          “risk”, “MSI”, “tumour”, “CNV”, “organism” ,  “chromosome” “biomolecule” fill.colour Value enter value x present scheme. include.names output named vector ? return.factor factors (scheme names) returned? return.scheme scheme list returned?","code":""},{"path":"/reference/force.colour.scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"multiple returns requested, outputs list (return.factor: factor length x scheme names; scheme: list containing scheme names colours; colours: vector length x required colours).","code":""},{"path":"/reference/force.colour.scheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"input character options colour scheme follows:     annovar.annotation nonsynonymous snv stopgain snv stoploss snv frameshift deletion frameshift substitution splicing synonymous snv annovar.annotation.collapsed nonsynonymous snv stopgain snv stoploss SNV frameshift indel splicing annovar.annotation.collapsed2 nonsynonymous stopgain-stoploss splicing frameshift indel synonymous utr5-utr3 nonframeshift indel intronic intergenic tissue cartilage bone adipose bladder kidney blood heart muscle hypothalamus pituitary thyroid parathyroid skin salivarygland esophagus stomach liver gallbladder pancreas intestine colon pharynx larynx trachea diaphragm lung nerve spine brain eye breast ovary uterus prostate testes lymph leukocyte spleen sex male female stage II III IV risk High Low MSI MSI-High MSI-Low MSS tumour Primary Metastatic CNV Amplification Deletion LOH Neutral organism Human Rat Mouse chromosome 1 - 22 X Y biomolecule DNA RNA Protein Carbohydrate Lipid clinicalt3 t0 t1 t2 t3 t4 t5 clinicalt9 t1a t1b t1c t2a t2b t2c t3a t3b t3c gleason.score 3+3 3+4 4+4 4+5 3+5 5+3 5+4 5+5 missing NA gleason.sum 5 6 7 8 9 missing NA tissue.color blood frozen ffpe psa.categorical 0 - 9.9 10 - 19.9 >= 20 age.categorical.default <50 50 - 60 60 - 70 >= 70 age.categorical.prostate <40 40 - 50 50 - 65 65 - 70 >= 70 age.gradient psa.gradient heteroplasmy 0 - 0.2 0.2 - 0.4 0.4 - 0.6 0.6 - 1.0 mt.annotation MT-DLOOP MT-T* MT-RNR* MT-ND1 MT-ND2 MT-ND3 MT-ND4L MT-ND4L/MT-ND4 MT-ND4 MT-ND5 MT-ND6 MT-CO1 MT-CO2 MT-CO3 MT-ATP6/MT-CO3 MT-ATP6 MT-ATP8/MT-ATP6 MT-ATP8 MT-CYB MT-NC* MT-OL* isup.grade 1 2 3 4 5","code":""},{"path":"/reference/force.colour.scheme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"Nicholas Harding","code":""},{"path":"/reference/force.colour.scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Based on predefined colour schemes, returns a vector of corresponding colours. — force.colour.scheme","text":"","code":"annovar.output <- c('nonsynonymous snv', 'stopgain snv', 'none', 'stoploss snv',  'frameshift deletion', 'frameshift substitution', 'splicing', 'none'); force.colour.scheme(annovar.output,'annovar.annotation'); #> [1] \"darkseagreen4\" \"orchid4\"       \"slategrey\"     \"darkturquoise\" #> [5] \"darkorange\"    \"darkorange4\"   \"gold1\"         \"slategrey\"     force.colour.scheme(annovar.output,'annovar.annotation', 'white'); #> [1] \"darkseagreen4\" \"orchid4\"       \"white\"         \"darkturquoise\" #> [5] \"darkorange\"    \"darkorange4\"   \"gold1\"         \"white\""},{"path":"/reference/generate.at.final.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates alternative default tick mark locations for create.densityplot() and create.scatterplot() — generate.at.final","title":"Generates alternative default tick mark locations for create.densityplot() and create.scatterplot() — generate.at.final","text":"Generates tick mark locations output graphic create.densityplot(), based values arguments function.  needed ensure grid line tick mark locations agree .","code":""},{"path":"/reference/generate.at.final.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates alternative default tick mark locations for create.densityplot() and create.scatterplot() — generate.at.final","text":"","code":"generate.at.final(   at.input,   limits,   data.vector   );"},{"path":"/reference/generate.at.final.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates alternative default tick mark locations for create.densityplot() and create.scatterplot() — generate.at.final","text":".input either logical scalar numeric vector limits either NULL numeric vector length 2 data.vector numeric vector","code":""},{"path":"/reference/generate.at.final.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates alternative default tick mark locations for create.densityplot() and create.scatterplot() — generate.at.final","text":"Returns numeric vector containing tick mark locations densityplot.","code":""},{"path":"/reference/generate.at.final.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates alternative default tick mark locations for create.densityplot() and create.scatterplot() — generate.at.final","text":"Kenneth C.K. Chu","code":""},{"path":"/reference/get.corr.key.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation Key — get.corr.key","title":"Correlation Key — get.corr.key","text":"function adding correlation key legends scatterplots.","code":""},{"path":"/reference/get.corr.key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation Key — get.corr.key","text":"","code":"get.corr.key(   x,    y,    label.items = c(\"spearman\", \"spearman.p\"),    x.pos = 0.03,    y.pos = 0.97,    key.corner = NULL,    key.cex = 1,    key.title = NULL,    title.cex = 1,    alpha.background = 0,   num.decimals = 2,         border = 'white'   )"},{"path":"/reference/get.corr.key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation Key — get.corr.key","text":"x vector values y Another vector values length x label.items vector things include key.  combination following can used.           c(\"spearman\",\"pearson\",\"kendall\",\"beta0\", beta1,\"spearman.p\",\"pearson.p\",\"kendall.p\",\"beta1.p\", \"beta.robust\", \"beta.robust.p\").  \"\" alternative full list. x.pos Horizontal position key corner y.pos Vertical position key corner key.corner corner key defaults closest corner plot.  helps overcome variable character row sizing. key.cex Specifies size font key, defaults 1. key.title title key. Defaults NULL title.cex size key title. Defaults 1 alpha.background value 0 1 indicating transparency legend box. num.decimals Number decimal places keep spearman, pearson kendall correlations. Defaults 2. border Adds border around key color specified, alpha background 0. Defaults White.","code":""},{"path":"/reference/get.corr.key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation Key — get.corr.key","text":"Returns key format specified xyplot documentation.","code":""},{"path":"/reference/get.corr.key.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation Key — get.corr.key","text":"Daryl Waggott","code":""},{"path":[]},{"path":"/reference/get.corr.key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation Key — get.corr.key","text":"","code":"# create some temporary data tmp.data <- data.frame(     x = c(         runif(n = 15, min =  0, max =  20),         runif(n = 15, min = 80, max = 100),         runif(n = 70, min =  0, max = 100)         ),     y = c(         runif(n = 15, min =  0, max =  20),         runif(n = 15, min = 80, max = 100),         runif(n = 70, min =  0, max = 100)         )     );  # a simple scatterplot with correlation key BoutrosLab.plotting.general::create.scatterplot(     formula = y ~ x,     data = tmp.data,     # filename = tempfile(pattern = 'get.corr.key-scatterplot', fileext = '.tiff'),     xlab.label = 'X Axis Title',     ylab.label = 'Y Axis Title',     xlimits = c(0,100),     ylimits = c(0,100),     xat = seq(0,100,25),     yat = seq(0,100,25),     add.axes = FALSE,     key = BoutrosLab.plotting.general::get.corr.key(         tmp.data$y,         tmp.data$x,         label.items = c('spearman', 'spearman.p', 'kendall', 'beta1', 'beta1.p')         )     );   # \\donttest{ # compare beta1 vs a robust estimate of the slope  # add an outlier tmp.data <- rbind(tmp.data, c(2000,100));  BoutrosLab.plotting.general::create.scatterplot(     formula = y ~ x,     data = tmp.data,     # filename = tempfile(pattern = 'get.corr.key.robust-scatterplot', fileext = '.tiff'),     xlab.label = 'X Axis Title',     ylab.label = 'Y Axis Title',     xlimits = c(0,100),     ylimits = c(0,100),     xat = seq(0,100,25),     yat = seq(0,100,25),     add.axes = FALSE,     key = BoutrosLab.plotting.general::get.corr.key(         tmp.data$y,         tmp.data$x,         label.items = c('beta1', 'beta1.robust','beta1.p','beta1.robust.p')         )     );   # see create.scatterplot for an example of creating multiple keys using legends # }"},{"path":"/reference/get.correlation.p.and.corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","title":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","text":"Returns correlation p-value two variables using user-specified correlation metric. P-values estimated analytically, via permutation-testing.","code":""},{"path":"/reference/get.correlation.p.and.corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","text":"","code":"get.correlation.p.and.corr(x, y, alternative = 'two.sided', method = 'pearson');"},{"path":"/reference/get.correlation.p.and.corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","text":"x Vector numbers analyze y Vector numbers analyze alternative null-hypothesis? method correlation technique use (passed directly cor.test)","code":""},{"path":"/reference/get.correlation.p.and.corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","text":"Returns two-element vector containing correlation p-value.","code":""},{"path":"/reference/get.correlation.p.and.corr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","text":"Paul C. Boutros","code":""},{"path":"/reference/get.correlation.p.and.corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a correlation and its statistical significance — get.correlation.p.and.corr","text":"","code":"get.correlation.p.and.corr(   x = runif(100),   y = runif(100),   method = 'pearson'   ); #> [1] -0.02419819  0.81112527  get.correlation.p.and.corr(   x = sample(1:10, 100, replace = TRUE),   y = runif(100),   method = 'spearman'   ); #> [1] 0.02637574 0.79448844"},{"path":"/reference/get.defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get operating system specific default properties — get.defaults","title":"Get operating system specific default properties — get.defaults","text":"Returns value property requested","code":""},{"path":"/reference/get.defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get operating system specific default properties — get.defaults","text":"","code":"get.defaults(   property = 'fontfamily',   os.type = .Platform$OS.type,   add.to.list = NULL,   use.legacy.settings = FALSE   );"},{"path":"/reference/get.defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get operating system specific default properties — get.defaults","text":"property property retrieved os.type operating system (optional). valid values : “windows”, “unix” add..list appends requested property parameter use.legacy.settings boolean set wheter use legacy mode settings (font)","code":""},{"path":"/reference/get.defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get operating system specific default properties — get.defaults","text":"Returns value (list add..list passed) property requested given os.type parameter. latter missing, attempts find user's operating system","code":""},{"path":"/reference/get.defaults.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get operating system specific default properties — get.defaults","text":"Syed Haider","code":""},{"path":"/reference/get.defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get operating system specific default properties — get.defaults","text":"","code":"# returns the fontfamily for current OS     get.defaults(property = \"fontfamily\"); #> NULL      # returns the fontfamily for unix     get.defaults(property = \"fontfamily\", os.type = 'windows'); #> NULL"},{"path":"/reference/get.line.breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get line breaks — get.line.breaks","title":"Get line breaks — get.line.breaks","text":"Given vector, returns indices (adjustment draw lines cells) value equal preceding value. Main use intended row.lines arguments create.heatmap","code":""},{"path":"/reference/get.line.breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get line breaks — get.line.breaks","text":"","code":"get.line.breaks(   x   );"},{"path":"/reference/get.line.breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get line breaks — get.line.breaks","text":"x vector, numeric, factor character.","code":""},{"path":"/reference/get.line.breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get line breaks — get.line.breaks","text":"vector integers representing break points vector x","code":""},{"path":"/reference/get.line.breaks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get line breaks — get.line.breaks","text":"Nicholas Harding","code":""},{"path":"/reference/get.line.breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get line breaks — get.line.breaks","text":"","code":"set.seed(12345); values <- sample(   default.colours(3),   20,   replace = TRUE   ); get.line.breaks(values); #>  [1]  1.5  2.5  4.5  5.5  6.5  8.5  9.5 10.5 11.5 13.5 14.5 15.5 17.5 18.5 19.5"},{"path":"/reference/legend.grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a legend grob — legend.grob","title":"Generate a legend grob — legend.grob","text":"Takes list generates grob representing one legends","code":""},{"path":"/reference/legend.grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a legend grob — legend.grob","text":"","code":"legend.grob(   legends,   label.cex = 1,   title.cex = 1,   title.just = 'centre',   title.fontface = 'bold',   font.family = NULL,   size = 3,   border = NULL,   border.padding = 1,   layout = c(1, length(legends)),   between.col = 1,   between.row = 1,   use.legacy.settings = FALSE,         x = 0.5,         y = 0.5,   background.col = \"white\",   background.alpha = 0   );"},{"path":"/reference/legend.grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a legend grob — legend.grob","text":"legends list defining one legends. must separate component called 'legend'. component list components 'colours', 'labels', 'border' (optional), 'title' (optional), 'size' (optional). 'colours' component vector fill colours used rectangles, 'labels' component vector text labels corresponding colours, 'border' component specifies colours rectangle borders (defaults black), 'title' component character string representing title legend. label.cex Size text labels legends, defaults 1. title.cex Size titles legends, defaults 1. title.just Justification titles legends. Defaults 'centre'. title.fontface Font face titles legends ('plain', 'bold', 'italic', etc.) font.family Font used legend text. NULL, default font used. size Width legend boxes 'character' units. 'size' argument specified legend component, override value. border list parameters (passed gpar) specifying line options legend border. NULL, border drawn. border.padding amount empty space (split equally sides) add legend border, 'lines' units. Defaults 1. layout Numeric vector length 2 specifying number columns rows legend layout. Defaults 1-column layout. Note legends added layout row-wise order. .col Amount space add columns layout, 'lines' units. Defaults 0.5. .row Amount space add rows layout, 'lines' units. Defaults 0.5. use.legacy.settings boolean set wheter use legacy mode settings (font) x x coordinate npc coordinate system y y coordinate npc coordinate system background.col colour background legend grob background.alpha alpha background legend grob","code":""},{"path":"/reference/legend.grob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a legend grob — legend.grob","text":"Returns grob representing legend(s)","code":""},{"path":"/reference/legend.grob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a legend grob — legend.grob","text":"Lauren Chong","code":""},{"path":[]},{"path":"/reference/legend.grob.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Generate a legend grob — legend.grob","text":"function initially created called create.heatmap draw covariate legend. decision use grob (grid graphical object) represent legend made based format levelplot function lattice package.  Since legend argument function requires grobs, easiest create grob represent legend , necessary, add existing grobs (dendrograms, etc.) create.heatmap function using grid layout. alternative method creating legend using barchart function tested, unclear merge barchart heatmap since c.trellis function attempts unify format two images, use viewports required plots drawn, eliminating possibility suppressing output saving final graph trellis object.","code":""},{"path":"/reference/legend.grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a legend grob — legend.grob","text":"","code":"# The 'cairo' graphics is preferred but on M1 Macs this is not available bitmap.type = getOption('bitmapType') if (capabilities('cairo')) {   bitmap.type <- 'cairo';   }  # create list representing two legends legends1 <- list(     legend = list(         colours = c('orange', 'chartreuse4', 'darkorchid4'),         labels = c('Group 1', 'Group 2', 'Group 3'),         border = c('orange', 'chartreuse4', 'darkorchid4'),         title = 'Legend #1'         ),     legend = list(         colours = c('firebrick3', 'lightgrey'),         labels = c('Case', 'Control')         )     );  # create a legend grob using defaults legend.grob1 <- legend.grob(     legends = legends1     ); #> Warning: 'x' is NULL so the result will be NULL tiff(     filename = tempfile(pattern = 'legend_grob1', fileext = '.tiff'),     type = bitmap.type,     width = 5,     height = 5,     units = 'in',     res = 800,     compression = 'lzw'     ); grid.draw(legend.grob1); dev.off(); #> agg_png  #>       2   # create the same legend with some customizations legend.grob2 <- legend.grob(     legends = legends1,     label.cex = 1.25,     title.cex = 1.25,     title.just = 'left',     title.fontface = 'bold.italic',     size = 4,     border = list(),     layout = c(2,1)     ); #> Warning: 'x' is NULL so the result will be NULL tiff(     filename = tempfile(pattern = 'legend_grob2', fileext = '.tiff'),     type = bitmap.type,     width = 5,     height = 5,     units = 'in',     res = 800,     compression = 'lzw'     ); grid.draw(legend.grob2); dev.off(); #> agg_png  #>       2   # create a legend where the title is underlined (see ?plotmath), add space between rows legends2 <- list(     legend = list(         colours = c('orange', 'chartreuse4', 'darkorchid4'),         labels = c('Group 1', 'Group 2', 'Group 3'),         title = expression(underline('Legend #1'))         ),     # Use dots instead of rectangles     point = list(         colours = c('firebrick3', 'lightgrey'),         labels = c('A label', 'A longer label'),         # Set dot size         cex = 1.5         )     );  # create the new legend and use more complex border legend.grob3 <- legend.grob(     legends = legends2,     border = list(col = 'blue', lwd = 2, lty = 3),     border.padding = 1.5,     between.row = 3     ); #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL tiff(     filename = tempfile(pattern = 'legend_grob3', fileext = '.tiff'),     type = bitmap.type,     width = 5,     height = 5,     units = 'in',     res = 800,     compression = 'lzw'     ); grid.draw(legend.grob3); dev.off(); #> agg_png  #>       2   # Make a legend where the size of boxes is customized legends3 <- list(     legend = list(         colours = c('orange', 'chartreuse4', 'darkorchid4'),         labels = c('Group 1', 'Group 2', 'Group 3'),         title = 'Legend #1',         size = c(3,2,1)         ),     legend = list(         colours = NULL,         labels = c('+', '-'),         border = 'transparent',         title = 'Disease status',         size = 0.5         )     ); legend.grob4 <- legend.grob(     legends = legends3     ); #> Warning: 'x' is NULL so the result will be NULL #> Warning: 'x' is NULL so the result will be NULL tiff(     filename = tempfile(pattern = 'legend_grob4', fileext = '.tiff'),     type = bitmap.type,     width = 5,     height = 5,     units = 'in',     res = 800,     compression = 'lzw'     ); grid.draw(legend.grob4); dev.off(); #> agg_png  #>       2"},{"path":"/reference/microarray.html","id":null,"dir":"Reference","previous_headings":"","what":"Microarray dataset of colon cancer patients — microarray","title":"Microarray dataset of colon cancer patients — microarray","text":"Gene expression level changes 2382 genes across 58 colon cancer patients.      Additional data genes include chromosomal location p-values.     Additional data patient samples found \"patient\" dataset.     patient samples described \"SNV\" \"CNA\" datasets.","code":""},{"path":"/reference/microarray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microarray dataset of colon cancer patients — microarray","text":"","code":"microarray"},{"path":"/reference/microarray.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Microarray dataset of colon cancer patients — microarray","text":"data frame 62 columns 2383 rows. Columns 1-58 indicate cancer      patient sample. Columns 59-61 indicate (sorted) chromosomal location     \"Chr\", \"Start\", \"End\". Column 62 contains adjusted      p-values. row different gene, row names gene names.","code":""},{"path":"/reference/microarray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Microarray dataset of colon cancer patients — microarray","text":"Christine P'ng","code":""},{"path":"/reference/microarray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microarray dataset of colon cancer patients — microarray","text":"","code":"create.dotmap(     # filename = tempfile(pattern = 'Using_microarray_dataset', fileext = '.tiff'),     x = microarray[1:5,1:5],     main = 'microarray data',     spot.size.function = function(x) {abs(x)/3;},     xaxis.cex = 0.8,         yaxis.cex = 0.8,         xaxis.rot = 90,     description = 'Dotmap created by BoutrosLab.plotting.general'     );"},{"path":"/reference/panel.BL.bwplot.html","id":null,"dir":"Reference","previous_headings":"","what":"A lattice::panel.bwplot replacement that fixes colouring issues — panel.BL.bwplot","title":"A lattice::panel.bwplot replacement that fixes colouring issues — panel.BL.bwplot","text":"Function lattice::bwplot() shows unexpected unintuitive behaviour colouring parameters par.settings vectors. function panel.BL.bwplot fixes issues. called lattice::bwplot(). Use caution. function invoked create.boxplot","code":""},{"path":"/reference/panel.BL.bwplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A lattice::panel.bwplot replacement that fixes colouring issues — panel.BL.bwplot","text":"... Pass argument. See lattice::bwplot() details. enable.warnings Print warnings set TRUE, defaults FALSE","code":""},{"path":"/reference/panel.BL.bwplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A lattice::panel.bwplot replacement that fixes colouring issues — panel.BL.bwplot","text":"Mehrdad Shamsi","code":""},{"path":[]},{"path":"/reference/patient.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset describing qualities of 58 colon cancer patients — patient","title":"Dataset describing qualities of 58 colon cancer patients — patient","text":"number qualities describing 58 colon cancer patients.      patient samples described \"microarray\", \"SNV\"      \"CNA\" datasets.","code":""},{"path":"/reference/patient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset describing qualities of 58 colon cancer patients — patient","text":"","code":"patient"},{"path":"/reference/patient.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset describing qualities of 58 colon cancer patients — patient","text":"data frame 5 columns 58 rows. row indicates different patient     sample, following columns describing feature sample: sex sex paient, either \"male\" \"female\" stage stage patient's cancer, one \"\", \"II\", \"III\", \"IV\", NA msi microsatellite instabiltiy cancer, either \"MSS\" \"MSI-High\" prop.CAGT proportion C G T base changes sample reference genome prop.CTGA proportion C T G base changes sample reference genome prop.CGGC proportion C G G C base changes sample reference genome prop.TAAT proportion T T base changes sample reference genome prop.TGAC proportion T G C base changes sample reference genome prop.TCAG proportion T C G base changes sample reference genome","code":""},{"path":"/reference/patient.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dataset describing qualities of 58 colon cancer patients — patient","text":"Christine P'ng","code":""},{"path":"/reference/patient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset describing qualities of 58 colon cancer patients — patient","text":"","code":"# use sample to set colour scheme sex.colours <- replace(as.vector(patient$sex), which(patient$sex == 'male'),'dodgerblue'); sex.colours <- replace(sex.colours, which(patient$sex == 'female'), 'pink'); len <- apply(SNV[1:15], 2, function(x){mutation.count <- length(which(x == 1))});  create.barplot(     # filename = tempfile(pattern = 'Using_patient_dataset', fileext = '.tiff'),     formula = len ~ colnames(SNV[1:15]) ,     data = SNV,     main = 'patient dataset',     xaxis.rot = 45,      ylimits = c(0,30),     yat = seq(0,30,5),     col = sex.colours,     description = 'Barplot created by BoutrosLab.plotting.general'     );"},{"path":"/reference/pcawg.colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Return standard PCAWG colour palettes. — pcawg.colours","title":"Return standard PCAWG colour palettes. — pcawg.colours","text":"Return standard PCAWG colour palettes. Case insensitive.","code":""},{"path":"/reference/pcawg.colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return standard PCAWG colour palettes. — pcawg.colours","text":"","code":"pcawg.colours(   x = NULL,    scheme = NULL,    fill.colour = 'slategrey',    return.scheme = FALSE);"},{"path":"/reference/pcawg.colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return standard PCAWG colour palettes. — pcawg.colours","text":"x Chracter vector terms mapped colours. Ignored scheme='' return.scheme=TRUE. scheme String specifying desired colour scheme. see available schemes, use scheme='', returns.scheme=FALSE. fill.colour Unrecognized output filled colour. Default 'slategrey'. return.scheme TRUE/FALSE. Set true return full specified scheme. Set false map x colours.","code":""},{"path":"/reference/pcawg.colours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return standard PCAWG colour palettes. — pcawg.colours","text":"information colour schemes, refer plotting guide.)","code":""},{"path":"/reference/pcawg.colours.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return standard PCAWG colour palettes. — pcawg.colours","text":"Jennifer Aguiar & Constance Li","code":""},{"path":"/reference/scientific.notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Use scientific notation in plots — scientific.notation","title":"Use scientific notation in plots — scientific.notation","text":"Returns expression list plotting data scientific notation","code":""},{"path":"/reference/scientific.notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use scientific notation in plots — scientific.notation","text":"","code":"scientific.notation(   x,    digits = 1,    type = 'expression'   );"},{"path":"/reference/scientific.notation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use scientific notation in plots — scientific.notation","text":"x number want scientific notation. digits many decimal places keep. type format return value . Defaults 'expression', also accepts 'list'","code":""},{"path":"/reference/scientific.notation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use scientific notation in plots — scientific.notation","text":"Generates scientific notation either expression list.","code":""},{"path":"/reference/scientific.notation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use scientific notation in plots — scientific.notation","text":"Paul C. Boutros","code":""},{"path":"/reference/show.available.palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the available colour palettes — show.available.palettes","title":"Display the available colour palettes — show.available.palettes","text":"Displays available colour palettes","code":""},{"path":"/reference/show.available.palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the available colour palettes — show.available.palettes","text":"","code":"show.available.palettes(   type = 'general',   filename = NULL,   height = 5,   width = 8,   resolution = 300   );"},{"path":"/reference/show.available.palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the available colour palettes — show.available.palettes","text":"type Either “general”, “specific”, “” (default) filename Filename tiff output, NULL returns trellis object height Figure height, defaults 8 inches -- optimal specific schemes width Figure width, defaults 12 -- optimal specific schemes resolution Figure resolution dpi, defaults 300","code":""},{"path":"/reference/show.available.palettes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Display the available colour palettes — show.available.palettes","text":"Christine P'ng","code":""},{"path":"/reference/show.available.palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the available colour palettes — show.available.palettes","text":"","code":"show.available.palettes(   # filename = tempfile(pattern = 'show_case_specific_schemes', fileext = '.tiff'),   type = 'specific',   width = 10   );   show.available.palettes(   # filename = tempfile(pattern = 'default_schemes', fileext = '.tiff'),   type = 'general',   height = 6,   width = 8   );"},{"path":"/reference/thousands.split.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide strings into groups of thousands — thousands.split","title":"Divide strings into groups of thousands — thousands.split","text":"Takes single number list, converts new string commas mark thousand multiples","code":""},{"path":"/reference/thousands.split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide strings into groups of thousands — thousands.split","text":"","code":"thousands.split(         nums )"},{"path":"/reference/thousands.split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide strings into groups of thousands — thousands.split","text":"nums numbers divided","code":""},{"path":"/reference/thousands.split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Divide strings into groups of thousands — thousands.split","text":"Jeffrey Green","code":""},{"path":"/reference/thousands.split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide strings into groups of thousands — thousands.split","text":"","code":"thousands.split(2344) #> [1] \"2,344\"  nums = c(1,2,34343,56565645645,676756,3434)  thousands.split(nums) #> [1] \"1\"              \"2\"              \"34,343\"         \"56,565,645,645\" #> [5] \"676,756\"        \"3,434\"           scatter.data <- data.frame(     sample.one = microarray[1:800,1],     sample.two = microarray[1:800,2],     chr = microarray$Chr[1:800]     );  create.scatterplot(     # filename = tempfile(pattern = 'Test_Divide_Thousands', fileext = '.tiff'),     formula = sample.two ~ sample.one,     data = scatter.data,     main = 'Axes & Labels',     # Axes and labels     xlab.label = colnames(microarray[1]),     ylab.label = colnames(microarray[2]),     yaxis.lab = thousands.split(c(1,2323,4545,567676,454,76767678678,89,787)),     xat = seq(0, 16, 2),     yat = seq(0, 16, 2),     xlimits = c(0, 15),     ylimits = c(0, 15),     xaxis.cex = 1,     yaxis.cex = 1,     xaxis.fontface = 1,     yaxis.fontface = 1,     xlab.cex = 1.5,     ylab.cex = 1.5,     description = 'Scatter plot created by BoutrosLab.plotting.general'     );"},{"path":"/reference/write.metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes Metadata — write.metadata","title":"Writes Metadata — write.metadata","text":"Utilizes exiftool write metadata generated plots. Writes R version, lattice version, latticeExtra version, BoutrosLab.plotting.general version, BoutrosLab.plotting.survival version, operating system, machine, author, image description.","code":""},{"path":"/reference/write.metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes Metadata — write.metadata","text":"","code":"write.metadata(   filename = NULL,   description = NULL,   verbose = FALSE   );"},{"path":"/reference/write.metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes Metadata — write.metadata","text":"filename Filename output, NULL (default value) returns image unchanged. description Short description image; default NULL verbose Option standard output; default FALSE","code":""},{"path":"/reference/write.metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes Metadata — write.metadata","text":"filename NULL, returns image unchanged. description NULL, image returned without description tag. Note: easy way view metadata using exiftool command.","code":""},{"path":"/reference/write.metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Writes Metadata — write.metadata","text":"Esther Jung","code":""},{"path":"/reference/write.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","title":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","text":"Handle various graphics-driver weirdness writes output file returns 1 returns trellis.object","code":""},{"path":"/reference/write.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","text":"","code":"write.plot(   trellis.object,   filename = NULL,   additional.trellis.objects = NULL,   additional.trellis.locations = NULL,   height = 6,   width = 6,   size.units = 'in',   resolution = 1000,   enable.warnings = FALSE,   description = \"Created with BoutrosLab.plotting.general\"   );"},{"path":"/reference/write.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","text":"trellis.object trellis object plotted filename Filename output, NULL (default value) returns trellis object .  \tautomatically grab extension used. additional.trellis.objects List additional trellis objects add main\tplot. Default NULL additional.trellis.locations List coordinates additional trellis objects.  \tMust represented using variable names 'xleft', 'ybottom', 'xright' 'ytop'. Defaults NULL height Figure height, defaults 6 inches width Figure width, defaults 6 inches size.units Figure units, defaults '' resolution Figure resolution, defaults 1000 enable.warnings Print warnings set TRUE, defaults FALSE description Short description image; default NULL","code":""},{"path":"/reference/write.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","text":"Returns trellis.object filename NULL writes plot file filename specified.","code":""},{"path":"/reference/write.plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","text":"Paul C. Boutros","code":""},{"path":"/reference/write.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplifies plotting by standardizing and centralizing all output-handling — write.plot","text":"","code":"set.seed(253647) # create test data tmp.data <- data.frame(     x = c(         runif(n = 150, min =  0, max = 20),         runif(n = 150, min = 40, max = 60),         runif(n = 700, min =  0, max = 40)         ),     y = c(         runif(n = 150, min =  0, max =  20),         runif(n = 150, min = 40, max = 60),         runif(n = 700, min =  0, max = 40)         )     );  main.plot <- create.densityplot(     x = list(         X = tmp.data$x,         Y = tmp.data$y         ),     xlab.label = 'X Axis Title',     ylab.label = 'Y Axis Title',     xlimits = c(-50,150),     ylimits = c(0,0.03),        xat = seq(-50,150,50),     yat = seq(0,0.03,0.005),     description = 'Image description goes here'     );  secondary.plot <- create.densityplot(     x = list(         X = tmp.data$x,         Y = tmp.data$y         ),     xlab.label = '',     ylab.label = '',     xlimits = c(50,75),     ylimits = c(0,0.015),        xat = seq(0,150,10),     yat = seq(0,0.015,0.005),     xaxis.tck = 0,     description = 'Image description goes here'     );  write.plot(     filename = tempfile(pattern = 'write_plot_example', fileext = '.tiff'),     trellis.object = main.plot,     additional.trellis.objects = list(secondary.plot),     additional.trellis.locations = list(         xleft = 0.6,         ybottom = 0.5,         xright =0.97,         ytop = 0.9         ),     resolution = 50 # Lowering resolution decreases file size     );"}]
